<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YYHY&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-16T07:51:19.189Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>youyouhangyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>线性回归</title>
    <link href="http://example.com/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>http://example.com/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
    <published>2023-07-16T07:48:31.000Z</published>
    <updated>2023-07-16T07:51:19.189Z</updated>
    
    <content type="html"><![CDATA[<p>线性回归是一种基础而且常用的机器学习算法。</p><p>它的假设是，<strong>输出y可以被输入x以线性的方式预测</strong> <code>y = wx + b</code>,</p><p>其中，w和b是模型要学习的参数。</p><p><strong>线性回归的目标是求解w和b</strong>，使得预测输出y与真实输出之间的误差最小。</p><p>线性回归的损失函数通常使用均方误差作为衡量指标:</p><p><strong>$$MSE &#x3D; \frac{1}{n} \sum_{i&#x3D;1}^{n} (Y_i - \hat{Y}_i)^2$$</strong></p><p>其中:</p><ul><li>$n$ - 样本数量</li><li>$Y_i$ - 第$i$个样本的真实值</li><li>$\hat{Y}_i$ - 第$i$个样本的预测值 </li><li>$\sum$ - 求和符号,对所有样本求和解析:</li><li>$(Y_i - \hat{Y}_i)$ 表示第$i$个样本的预测误差,即真实值与预测值之</li><li>$(Y_i - \hat{Y}_i)^2$ 对预测误差进行平方,避免正负误差相抵消,误差可能为负也可能为正，取平方有一个特性，它惩罚更大的错误更多。</li><li>$\frac{1}{n}$ 求样本平均值,防止样本数量影响所以MSE是每个样本平方误差之和的平均值,反映了模型预测值与真实值的偏差程度。</li></ul><p>下面是一个简单的示例，搞明白线性回归是干什么的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line"><span class="comment"># x和y分别是一个一维数组,表示样本的特征和标签</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># w和b表示线性模型的参数,初始化为0</span></span><br><span class="line">w = <span class="number">0</span> </span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr是梯度下降的学习率,epochs是训练轮数</span></span><br><span class="line">lr = <span class="number">0.01</span> </span><br><span class="line">epochs = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    y_pred = w*x + b <span class="comment">#计算预测值   </span></span><br><span class="line">    loss = np.square(y_pred - y).mean()</span><br><span class="line">    w = w - lr*<span class="number">2</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((y_pred - y)*x) </span><br><span class="line">    b = b - lr*<span class="number">2</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((y_pred - y))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w, b)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.003880582342283 0.9859898664422495</span><br></pre></td></tr></table></figure><p>步骤：</p><ol><li>生成测试数据:<strong>x</strong>和<strong>y</strong>数组分别代表<strong>输入</strong>和<strong>输出</strong>,这里生成了5个数据点。</li><li>参数初始化:模型参数w和b初始化为0。</li><li>定义超参数:<strong>学习率</strong>lr为0.01,<strong>训练轮数</strong>epochs为1000。</li><li>训练:for循环表示进行1000轮训练,每轮都进行以下步骤:</li></ol><p>​(1) 根据当前参数w和b,计算预测输出y_pred。</p><p>​(2) 计算损失函数loss,这里使用<strong>均方误差</strong>。</p><p>​(3) 根据损失函数<strong>求导</strong>得出w和b的梯度。</p><p>​(4) 使用梯度下降算法更新w和b,其中lr是学习率。</p><p>​5.打印出训练后的w和b参数。</p><p>分析：</p><p>针对这个线性回归代码,最理想的输出结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = 2 </span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><p>因为我们生成的示例数据符合这样一个模型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = 2x + 1</span><br></pre></td></tr></table></figure><p>也就是说,真实的模型参数应该是:<br>w(权重参数)&#x3D; 2<br>b(偏置参数)&#x3D; 1</p><p>如果模型训练完美,经过足够多的迭代优化,我们期望的参数w和b会收敛到这两个值。</p><p>具体来看,在这个代码示例中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>这些样本点正好符合公式 y &#x3D; 2x + 1。</p><p>所以当代码训练结束后,如果我们的w和b分别收敛到2和1,就说明模型训练是成功的,完美拟合了这个线性关系。</p><p>其中调节线性回归模型的学习率会对训练过程和结果产生不同的影响:</p><ol><li>学习率增加:</li></ol><ul><li><p>收敛速度会变快,需要的迭代轮数会减少。</p></li><li><p>但是容易产生参数的振荡,难以收敛到稳定优化的结果。</p></li><li><p>最终模型的预测效果可能会变差。</p></li></ul><ol start="2"><li>学习率减小:</li></ol><ul><li><p>收敛速度会变慢,需要更多的迭代轮数。</p></li><li><p>参数更新会更加稳定和平滑。</p></li><li><p>最终可以收敛到一个较优的模型,预测效果更好。</p></li><li><p>但是计算代价更高,需要花费更多时间。</p></li></ul><p>所以学习率的选择需要找到最佳平衡点:</p><ul><li><p>学习率不能太大,否则容易产生参数振荡。</p></li><li><p>学习率也不能太小,否则收敛速度过慢。</p></li></ul><p>一个通用的方法是从一个较小的学习率开始,如果发现收敛速度过慢,可以适当增加学习率;如果出现振荡,则应该降低学习率。</p><p>下面再给出一个较复杂的例子：</p><p>这个线性回归的代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>导入所需的numpy和matplotlib库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置随机数种子,这样可以重现结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.uniform(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">3</span> + np.random.normal(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>使用numpy随机生成100组训练数据,x范围是0到100,y计算方式是y&#x3D;2x+3加上正态噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x.reshape(-<span class="number">1</span>,<span class="number">1</span>), y) </span><br></pre></td></tr></table></figure><p>使用scikit-learn中的LinearRegression模型,拟合训练数据x和y。需要reshape x 为二维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_test = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_pred = model.predict(x_test)</span><br></pre></td></tr></table></figure><p>生成0-100范围内的100个预测点x_test,用训练好的模型model预测对应的y值,得到y_pred。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x_test, y_pred, color=<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用matplotlib画出训练数据的散点图,以及用红色线画出预测的线性回归直线。增加坐标标签。</p><p>这样我们就可以直观地看到了模型对数据的拟合效果。</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成100组随机数据</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.uniform(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">3</span> + np.random.normal(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合线性回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x.reshape(-<span class="number">1</span>,<span class="number">1</span>), y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">x_test = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_pred = model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.scatter(x, y) </span><br><span class="line">plt.plot(x_test, y_pred, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>我们先生成了100组随机数据,其中y满足公式y&#x3D;2x+3加上一点正态扰动。</p><p>然后我们使用scikit-learn中的LinearRegression模型对数据进行线性回归拟合。</p><p>最后我们生成100个等间隔的x,用模型预测对应的y,并画出散点图和预测的线性回归直线。</p><p><a href="https://imgse.com/i/pCIMXMq"><img src="https://s1.ax1x.com/2023/07/16/pCIMXMq.png" alt="pCIMXMq.png"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性回归是一种基础而且常用的机器学习算法。&lt;/p&gt;
&lt;p&gt;它的假设是，&lt;strong&gt;输出y可以被输入x以线性的方式预测&lt;/strong&gt; &lt;code&gt;y = wx + b&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;其中，w和b是模型要学习的参数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;线性回</summary>
      
    
    
    
    
    <category term="机器学习" scheme="http://example.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="http://example.com/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Front-matter示例</title>
    <link href="http://example.com/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/"/>
    <id>http://example.com/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/</id>
    <published>2023-07-03T06:53:50.000Z</published>
    <updated>2023-07-03T07:26:59.292Z</updated>
    
    
    
    
    <category term="Hexo" scheme="http://example.com/categories/Hexo/"/>
    
    
    <category term="Markdown" scheme="http://example.com/tags/Markdown/"/>
    
    <category term="Hexo" scheme="http://example.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实习</title>
    <link href="http://example.com/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/"/>
    <id>http://example.com/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-06-30T10:42:10.000Z</published>
    <updated>2023-07-03T07:21:33.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实习内容"><a href="#实习内容" class="headerlink" title="实习内容"></a>实习内容</h1><h2 id="一、马踏棋盘"><a href="#一、马踏棋盘" class="headerlink" title="一、马踏棋盘"></a>一、马踏棋盘</h2><h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a><strong>问题描述</strong></h4><p>将马随机放在国际象棋的8×8棋盘[0～7][0～7]的某个方格中，马按走棋规则进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格。编制递归和非递归程序，求出马的行走路线，并按求出的行走路线，将数字1，2，…，64依次填入一个8×8的方阵，输出之。</p><h4 id="程序代码"><a href="#程序代码" class="headerlink" title="程序代码"></a><strong>程序代码</strong></h4><p><strong>棋盘定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STEPS ROW*COL</span></span><br></pre></td></tr></table></figure><p><strong>定义每次的改变的相对坐标</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> move_x[<span class="number">8</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">int</span> move_y[<span class="number">8</span>] = &#123; <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p>方法1：<strong>DFS（递归）</strong></p><blockquote><p><code>Dfs</code> 函数是深度优先遍历函数，使用递归方式实现。</p><p>接受二维数组 <code>path</code> 表示棋盘，<code>m</code> 和 <code>n</code> 表示当前位置的坐标，<code>edge</code> 表示棋盘边长，<code>count</code> 表示已经访问的格子数。</p><p>函数首先判断是否已经访问了所有的格子，如果是则直接返回。</p><p>然后判断当前位置是否在棋盘范围内且未被访问过，如果是则增加已访问的格子数，将该位置标记为已访问，并进行递归调用，以便继续向下一位置探索。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dfs</span><span class="params">(<span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge)<span class="comment">//如果走过的格子数大于等于棋盘数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (m &lt;= edge - <span class="number">1</span> &amp;&amp; n &lt;= edge - <span class="number">1</span> &amp;&amp; m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span> &amp;&amp; path[m][n] == <span class="number">0</span>)<span class="comment">//位置（m,n）在棋盘上，并且没有被走过</span></span><br><span class="line">&#123;</span><br><span class="line">count++;<span class="comment">//走过的格子数+1</span></span><br><span class="line">path[m][n] = count;<span class="comment">//把该位置的值改为第几个走过的格子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">Dfs(path, m + move_x[i], n + move_y[i], edge, count);<span class="comment">//进行递归，直到走过的格子数大于等于棋盘数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：<strong>DFS+贪心算法（递归）</strong></p><blockquote><p><code>Dfs_tx</code> 函数在深度优先遍历的基础上加入了贪心算法的思想，使用递归方式实现。</p><p>根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，</p><p>并选择具有最小可行方向数量的方向作为下一步的移动方向。</p><p>最后进行递归调用，继续向下一个位置探索。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dfs_tx</span><span class="params">(<span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count, <span class="type">int</span> found)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (found)<span class="keyword">return</span>;<span class="comment">// 如果已经找到完整路径，直接返回</span></span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge)<span class="comment">// 如果已经访问了所有方格</span></span><br><span class="line">&#123;</span><br><span class="line">found += <span class="number">1</span>;<span class="comment">// 将found标志设置为1，表示已找到完整路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">path[i][j] = flag[i][j];<span class="comment">// 将当前路径复制到path数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &gt; edge - <span class="number">1</span> || n &gt; edge - <span class="number">1</span> || m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || flag[m][n] != <span class="number">0</span>)<span class="keyword">return</span>;<span class="comment">// 如果当前位置超出边界或已被访问过，则返回</span></span><br><span class="line"></span><br><span class="line">count++;<span class="comment">// 增加计数器(初始为0)</span></span><br><span class="line">flag[m][n] = count;<span class="comment">// 标记当前位置为已访问</span></span><br><span class="line"><span class="comment">//贪心部分，计算局部（两步）最优方向</span></span><br><span class="line"><span class="type">int</span> count_next[<span class="number">8</span>] = &#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span> &#125;;<span class="comment">// 存储每个可行方向的下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_next = m + move_x[i];<span class="comment">// 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next = n + move_y[i];<span class="comment">// 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next &lt; edge &amp;&amp; n_next &lt; edge &amp;&amp; m_next &gt;= <span class="number">0</span> &amp;&amp; n_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next][n_next] == <span class="number">0</span>)<span class="comment">//下一步的位置，未被访问则</span></span><br><span class="line">&#123;</span><br><span class="line">count_next[i] ++;<span class="comment">// 增加下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_next_next = m_next + move_x[j];<span class="comment">// 下一步的 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next_next = n_next + move_y[j];<span class="comment">// 下一步的 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next_next &lt; edge &amp;&amp; n_next_next &lt; edge &amp;&amp; m_next_next &gt;= <span class="number">0</span> &amp;&amp; n_next_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next_next][n_next_next] == <span class="number">0</span>)<span class="comment">//下一步的下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++;<span class="comment">// 增加下一步可行方向的数量*</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> position = <span class="number">0</span>;<span class="comment">// 选择下一步的最优方向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)<span class="comment">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count_next[position] == <span class="number">-1</span>)</span><br><span class="line">position = i;</span><br><span class="line"><span class="keyword">if</span> ((count_next[i] &lt; count_next[position]) &amp;&amp; count_next[i] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">position = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Dfs_tx(flag, path, m + move_x[position], n + move_y[position], edge, count, found);</span><br><span class="line">flag[m][n] = <span class="number">0</span>;<span class="comment">// 标记当前位置为未访问，以便在下一次递归中重新考虑该位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：<strong>DFS+贪心算法（非递归）</strong></p><blockquote><p><code>Dfs_tx_s</code> 函数使用非递归方式实现的深度优先遍历算法，加入了贪心算法的思想。</p><p>该函数使用栈来保存待访问的位置，首先将起始位置入栈，然后进入一个循环，直到栈为空。</p><p>在循环中，取出栈顶的位置，判断是否已找到完整路径，如果是则直接返回。</p><p>然后判断当前位置是否超出边界或已被访问过，如果是则跳过当前位置。接下来增加已访问的格子数，并标记当前位置为已访问。</p><p>然后根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，并选择具有最小可行方向数量的方向作为下一步的移动方向，</p><p>将该位置入栈。最后继续下一轮循环，直到栈为空。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dfs_tx_s</span><span class="params">(<span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count, <span class="type">int</span>* found)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*found)<span class="keyword">return</span>;<span class="comment">//// 如果已经找到完整路径，直接返回</span></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line"><span class="type">int</span> stack_m[<span class="number">8</span> * <span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> stack_n[<span class="number">8</span> * <span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//将第一个元素入栈</span></span><br><span class="line">stack_m[top] = m;</span><br><span class="line">stack_n[top] = n;</span><br><span class="line">top++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line">top--;</span><br><span class="line">m = stack_m[top];</span><br><span class="line">n = stack_n[top];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge) &#123;<span class="comment">//如果已经访问了所有方格</span></span><br><span class="line">*found = <span class="number">1</span>;<span class="comment">// 将found标志设置为1，表示已找到完整路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">path[i][j] = flag[i][j];</span><br><span class="line">&#125;<span class="comment">// 将当前路径复制到path数组中</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m &gt; edge - <span class="number">1</span> || n &gt; edge - <span class="number">1</span> || m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || flag[m][n] != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">// 如果当前位置超出边界或已被访问过，则跳过</span></span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">flag[m][n] = count;<span class="comment">//// 标记当前位置为已访问</span></span><br><span class="line"><span class="comment">//贪心，计算局部（两步）最优方向</span></span><br><span class="line"><span class="type">int</span> count_next[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="type">int</span> m_next = m + move_x[i];<span class="comment">// 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next = n + move_y[i];<span class="comment">// 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next &lt; edge &amp;&amp; n_next &lt; edge &amp;&amp; m_next &gt;= <span class="number">0</span> &amp;&amp; n_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next][n_next] == <span class="number">0</span>) &#123;<span class="comment">//下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++;<span class="comment">// 增加下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++) &#123;</span><br><span class="line"><span class="type">int</span> m_next_next = m_next + move_x[j];<span class="comment">//下一步的 下一步的x坐标</span></span><br><span class="line"><span class="type">int</span> n_next_next = n_next + move_y[j];<span class="comment">//下一步的 下一步的y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next_next &lt; edge &amp;&amp; n_next_next &lt; edge &amp;&amp; m_next_next &gt;= <span class="number">0</span> &amp;&amp; n_next_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next_next][n_next_next] == <span class="number">0</span>)<span class="comment">//下一步的下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++; <span class="comment">//增加下一步可行方向的数量*</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;<span class="comment">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><br><span class="line"><span class="keyword">if</span> (count_next[position] == <span class="number">-1</span>)</span><br><span class="line">position = i;</span><br><span class="line"><span class="keyword">if</span> ((count_next[i] &lt; count_next[position]) &amp;&amp; count_next[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">position = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_m[top] = m + move_x[position];</span><br><span class="line">stack_n[top] = n + move_y[position];</span><br><span class="line">top++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数的调用：</strong></p><blockquote><p>定义了两个二维数组 <code>path</code> 和 <code>flag</code>，分别用于记录最终路径和临时路径。</p><p>初始化变量 <code>m</code> 和 <code>n</code>，表示起始位置的坐标。, <code>edge</code>，表示棋盘的大小（边长）,<code>found</code>，表示完整路径的标志，初始值为 0。</p><p>根据用户输入的序号，使用 <code>switch</code> 语句选择相应的解决方法。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">// 记录最终路径</span></span><br><span class="line"><span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">// 记录临时路径</span></span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> edge;</span><br><span class="line"><span class="type">int</span> found = <span class="number">0</span>;<span class="comment">// 完整路径标志</span></span><br><span class="line"><span class="type">int</span> switch_on;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line">n = <span class="number">1</span>;</span><br><span class="line">edge = <span class="number">8</span>;<span class="comment">// 棋盘大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1:使用深度优先搜索（递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2:使用深度优先搜索+贪心算法（递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3:使用深度优先搜索+贪心算法（非递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4:退出\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入序号，以选择解决方法：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;switch_on);</span><br><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Dfs(path, m, n, edge, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Dfs_tx(flag, path, m, n, edge, <span class="number">0</span>, found);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Dfs_tx_s(flag, path, m, n, edge, <span class="number">0</span>, &amp;found);</span><br><span class="line"><span class="keyword">if</span> (found) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到路径\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入正确的序号&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、迷宫问题"><a href="#二、迷宫问题" class="headerlink" title="二、迷宫问题"></a>二、迷宫问题</h2><h4 id="问题描述-1"><a href="#问题描述-1" class="headerlink" title="问题描述"></a>问题描述</h4><p>以一个M×N的长方阵表示迷宫，0和1分别表示迷宫中的通路和障碍。设计一个程序，对任意设定的迷宫，求出一条从入口到出口的通路，或得出没有通路的结论。</p><p>首先实现一个以链表作存储结构的栈类型，然后编写一个求解迷宫的递归和非递归程序。求得的通路以三元组（i，j，d）的形式输出，其中：（i，j）指示迷宫中的一个坐标，d表示走到下一坐标的方向。</p><h4 id="程序代码-1"><a href="#程序代码-1" class="headerlink" title="程序代码"></a>程序代码</h4><p><strong>初始化迷宫</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迷宫的行列数</span></span><br><span class="line"><span class="type">int</span> M = <span class="number">10</span>, N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迷宫数组初始化</span></span><br><span class="line">maze[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>定义栈的基本结构</strong></p><blockquote><p>StackNode 节点</p><p>Stack 栈</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x, y, direction;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; StackNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">StackNode* top;</span><br><span class="line">&#125; Stack;</span><br></pre></td></tr></table></figure><p><strong>定义栈的基本方法</strong></p><blockquote><p>initStack ( ) 初始化栈</p><p>isStackEmpty ( ) 判断栈是否为空</p><p>push ( ) 入栈</p><p>pop ( ) 出栈</p><p>top（）获取栈顶元素</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isStackEmpty</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Stack* <span class="built_in">stack</span>, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> direction)</span> &#123;</span><br><span class="line">StackNode* node = (StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">node-&gt;x = x;</span><br><span class="line">node-&gt;y = y;</span><br><span class="line">node-&gt;direction = direction;</span><br><span class="line">node-&gt;next = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">StackNode* node = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = node-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">top</span><span class="params">(Stack* <span class="built_in">stack</span>, <span class="type">int</span>* x, <span class="type">int</span>* y, <span class="type">int</span>* direction)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">*x = <span class="built_in">stack</span>-&gt;top-&gt;x;</span><br><span class="line">*y = <span class="built_in">stack</span>-&gt;top-&gt;y;</span><br><span class="line">*direction = <span class="built_in">stack</span>-&gt;top-&gt;direction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>检查坐标是否有效</strong></p><blockquote><p>(x,y)在棋盘上，并且标记为0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; M &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; N &amp;&amp; maze[x][y] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归求解迷宫通路</strong></p><blockquote><p>首先检查当前坐标 <code>(x, y)</code> 是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为 0（通路）。</p><p>如果当前坐标无效，返回 false，表示没有通路。</p><p>将当前坐标 <code>(x, y)</code> 入栈，表示已访问该节点。</p><p>将迷宫数组中的值标记为 2，表示该节点已访问过。</p><p>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回 true，表示找到了通路。</p><p>递归尝试四个方向：向右 <code>(x, y+1)</code>、向下 <code>(x+1, y)</code>、向左 <code>(x, y-1)</code>、向上 <code>(x-1, y)</code>。</p><p>如果其中任意方向返回 true，表示找到了通路，直接返回 true。</p><p>如果以上四个方向都没有找到通路，说明当前节点不在通路上，将其从栈中弹出并清除标记。</p><p>返回 false，表示没有找到通路。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">solveMazeRecursive</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isValid(x, y)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">push(<span class="built_in">stack</span>, x, y, <span class="number">-1</span>); <span class="comment">// 入栈，初始方向为-1</span></span><br><span class="line"></span><br><span class="line">maze[x][y] = <span class="number">2</span>; <span class="comment">// 标记已访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == M - <span class="number">1</span> &amp;&amp; y == N - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 到达出口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> direction; <span class="comment">// 添加direction变量</span></span><br><span class="line"><span class="comment">// 尝试四个方向</span></span><br><span class="line"><span class="keyword">if</span> ((direction = <span class="number">0</span>, solveMazeRecursive(x, y + <span class="number">1</span>, <span class="built_in">stack</span>)) || <span class="comment">// 向右</span></span><br><span class="line">(direction = <span class="number">1</span>, solveMazeRecursive(x + <span class="number">1</span>, y, <span class="built_in">stack</span>)) || <span class="comment">// 向下</span></span><br><span class="line">(direction = <span class="number">2</span>, solveMazeRecursive(x, y - <span class="number">1</span>, <span class="built_in">stack</span>)) || <span class="comment">// 向左</span></span><br><span class="line">(direction = <span class="number">3</span>, solveMazeRecursive(x - <span class="number">1</span>, y, <span class="built_in">stack</span>))) &#123; <span class="comment">// 向上</span></span><br><span class="line">push(<span class="built_in">stack</span>, x, y, direction); <span class="comment">// 入栈，保存方向</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">pop(<span class="built_in">stack</span>); <span class="comment">// 从栈中移除</span></span><br><span class="line">maze[x][y] = <span class="number">0</span>; <span class="comment">// 清除标记</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归求解迷宫通路</strong></p><blockquote><ol><li>初始化当前坐标 <code>(x, y)</code> 为起点 <code>(0, 0)</code>，并将初始方向 <code>direction</code> 设为 0。</li><li>进入一个循环，直到找到通路或确定没有通路。</li><li>检查当前坐标 <code>(x, y)</code> 是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为 0（通路）。</li><li>如果当前坐标有效，将其入栈，表示已访问该节点。将迷宫数组中的值标记为 2，表示该节点已访问过。</li><li>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回 true，表示找到了通路。</li><li>设置方向 <code>direction</code> 为 0，表示方向。</li><li>更新坐标 <code>(x, y)</code> 为下一个节点，根据方向 <code>direction</code> 的不同进行相应的移动操作。</li><li><strong>如果方向小于 3，表示还有方向未尝试</strong>，递增方向并继续进行下一次循环。</li><li><strong>如果方向大于等于 3，表示四个方向都尝试过</strong>，说明当前节点不在通路上。</li><li>检查栈是否为空，如果为空，表示已经回到起点且没有找到通路，返回 false。</li><li>从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</li><li>根据方向进行相应的坐标更新操作。</li><li>回到步骤 3，继续进行下一次循环。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">solveMazeIterative</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, direction = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isValid(x, y)) &#123;</span><br><span class="line">push(<span class="built_in">stack</span>, x, y, direction); <span class="comment">// 入栈</span></span><br><span class="line">maze[x][y] = <span class="number">2</span>; <span class="comment">// 标记已访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == M - <span class="number">1</span> &amp;&amp; y == N - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 到达出口</span></span><br><span class="line">&#125;</span><br><span class="line">direction = <span class="number">0</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (direction &lt; <span class="number">3</span>) &#123;<span class="comment">//如果方向小于 3，表示还有方向未尝试，递增方向并继续进行下一次循环。</span></span><br><span class="line">direction++;</span><br><span class="line"><span class="keyword">switch</span> (direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 向右</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 向下</span></span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 向左</span></span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;<span class="comment">//如果方向大于等于 3，表示四个方向都尝试过，说明当前节点不在通路上。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 无通路</span></span><br><span class="line">&#125;</span><br><span class="line">top(<span class="built_in">stack</span>, &amp;x, &amp;y, &amp;direction);<span class="comment">//从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</span></span><br><span class="line">pop(<span class="built_in">stack</span>); <span class="comment">// 从栈中移除</span></span><br><span class="line"><span class="keyword">switch</span> (direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 向上</span></span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 向右</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 向下</span></span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 向左</span></span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印迷宫和通路</strong></p><blockquote><p>□ 表示通路</p><p>■ 表示障碍</p><p>★ 表示通路上的路径</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printMaze</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫及通路：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;□ &quot;</span>); <span class="comment">// 通路</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■ &quot;</span>); <span class="comment">// 障碍</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★ &quot;</span>); <span class="comment">// 通路上的路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n通路：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">StackNode* node = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, E)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, S)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, W)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, N)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数的调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1:递归求解迷宫通路\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2:非递归求解迷宫通路\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3:不走迷宫了\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> switch_on = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入序号：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;switch_on);</span><br><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 使用递归求解迷宫通路</span></span><br><span class="line">initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">if</span> (solveMazeRecursive(<span class="number">0</span>, <span class="number">0</span>, &amp;<span class="built_in">stack</span>)) &#123;</span><br><span class="line">printMaze(&amp;<span class="built_in">stack</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫没有通路。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用非递归求解迷宫通路</span></span><br><span class="line"><span class="keyword">if</span> (solveMazeIterative(&amp;<span class="built_in">stack</span>)) &#123;</span><br><span class="line">printMaze(&amp;<span class="built_in">stack</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫没有通路。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的序号&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找算法比较"><a href="#查找算法比较" class="headerlink" title="查找算法比较"></a>查找算法比较</h2><h4 id="问题描述-2"><a href="#问题描述-2" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li><p>对以下6种常用的内部排序算法进行比较：顺序查找，折半查找，分块查找，插值查找，斐波那契查找，二叉树查找。</p></li><li><p>待查找表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-2"><a href="#程序代码-2" class="headerlink" title="程序代码"></a>程序代码</h4><p><strong>顺序查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sequentialSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>折半查找（二分查找）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分块查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">blockSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> blockSizes[], <span class="type">int</span> blockNum, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; blockNum; i++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (blockSizes[i] &gt;= key) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> comparisons;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> blockSize = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> start = i * blockSize - blockSize;</span><br><span class="line">    <span class="type">int</span> end = i * blockSize;</span><br><span class="line">    <span class="keyword">for</span> (j = start; j &lt; end; j++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插值查找</strong></p><blockquote><p>改进的二分查找算法，它通过对数组进行估算，试图根据查找键的值在数组中的分布情况来预测该键可能出现的位置。公式<code>int pos = low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low])</code>用于计算估算的位置。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">interSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high &amp;&amp; key &gt;= arr[low] &amp;&amp; key &lt;= arr[high]) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[low] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> comparisons;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pos = low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> (arr[pos] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[pos] &lt; key) &#123;</span><br><span class="line">            low = pos + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            high = pos - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>斐波那契查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fibonacciSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;  <span class="comment">// 记录比较次数的变量</span></span><br><span class="line">    <span class="type">int</span> fib2 = <span class="number">0</span>;  <span class="comment">// 第一个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> fib1 = <span class="number">1</span>;  <span class="comment">// 第二个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> fib = fib1 + fib2;  <span class="comment">// 当前斐波那契数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到大于等于数组大小的最小斐波那契数</span></span><br><span class="line">    <span class="keyword">while</span> (fib &lt; size) &#123;</span><br><span class="line">        fib2 = fib1;</span><br><span class="line">        fib1 = fib;</span><br><span class="line">        fib = fib1 + fib2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//用于确定待查找数组的起始位置，它随着迭代的进行不断更新，以便逼近目标元素的位置</span></span><br><span class="line">    <span class="type">int</span> offset = <span class="number">-1</span>;  <span class="comment">// 用于索引的偏移值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行斐波那契查找</span></span><br><span class="line">    <span class="keyword">while</span> (fib &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="type">int</span> i = (offset + fib2) &lt; (size - <span class="number">1</span>) ? (offset + fib2) : (size - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; key) &#123;</span><br><span class="line">            <span class="comment">// 关键字比当前元素大，向下移动斐波那契数</span></span><br><span class="line">            fib = fib1;</span><br><span class="line">            fib1 = fib2;</span><br><span class="line">            fib2 = fib - fib1;</span><br><span class="line">            offset = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; key) &#123;</span><br><span class="line">            <span class="comment">// 关键字比当前元素小，进一步向下移动斐波那契数</span></span><br><span class="line">            fib = fib2;</span><br><span class="line">            fib1 = fib1 - fib2;</span><br><span class="line">            fib2 = fib - fib1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 关键字在索引 i 处找到</span></span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查数组中最后一个元素（fib1 == 1）</span></span><br><span class="line">    <span class="keyword">if</span> (fib1 == <span class="number">1</span> &amp;&amp; arr[offset + <span class="number">1</span>] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> comparisons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未在数组中找到关键字</span></span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二叉树查找节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125; TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树节点</span></span><br><span class="line">TreeNode* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    TreeNode* node = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">    node-&gt;value = value;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树插入节点</span></span><br><span class="line">TreeNode* <span class="title function_">insertNode</span><span class="params">(TreeNode* root, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> createNode(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; root-&gt;value) &#123;</span><br><span class="line">        root-&gt;left = insertNode(root-&gt;left, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; root-&gt;value) &#123;</span><br><span class="line">        root-&gt;right = insertNode(root-&gt;right, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树查找节点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;value == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; root-&gt;value) &#123;</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成顺序数据集</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getSequen</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 生成顺序数据集</span></span><br><span class="line">    <span class="type">int</span> dataset[<span class="number">200</span>];</span><br><span class="line">    getSequen(dataset, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每种算法的比较次数</span></span><br><span class="line">    <span class="type">int</span> seqComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> binComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> blockComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> inteComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> fibComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> binTreeComp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行10次随机数的查找</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="type">int</span> key = rand() % <span class="number">200</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顺序查找</span></span><br><span class="line">        <span class="type">int</span> comparisons = sequentialSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        seqComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 折半查找</span></span><br><span class="line">        comparisons = binarySearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        binComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分块查找</span></span><br><span class="line">        <span class="type">int</span> blockSizes[<span class="number">10</span>] = &#123; <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">120</span>, <span class="number">140</span>, <span class="number">160</span>, <span class="number">180</span>, <span class="number">200</span> &#125;;</span><br><span class="line">        comparisons = blockSearch(dataset, blockSizes, <span class="number">10</span>, key);</span><br><span class="line">        blockComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插值查找</span></span><br><span class="line">        comparisons = interSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        inteComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 斐波那契查找</span></span><br><span class="line">        comparisons = fibonacciSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        fibComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二叉树查找</span></span><br><span class="line">        TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">200</span>; j++) &#123;</span><br><span class="line">            root = insertNode(root, dataset[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        comparisons = searchNode(root, key);</span><br><span class="line">        binTreeComp += comparisons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算平均比较次数</span></span><br><span class="line">    <span class="type">float</span> avgSequential = seqComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBinary = binComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBlock = blockComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgInterpolation = inteComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgFibonacci = fibComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBinaryTree = binTreeComp / <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序查找平均比较次数：%.2f\n&quot;</span>, avgSequential);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;折半查找平均比较次数：%.2f\n&quot;</span>, avgBinary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分块查找平均比较次数：%.2f\n&quot;</span>, avgBlock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插值查找平均比较次数：%.2f\n&quot;</span>, avgInterpolation);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;斐波那契查找平均比较次数：%.2f\n&quot;</span>, avgFibonacci);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树查找平均比较次数：%.2f\n&quot;</span>, avgBinaryTree);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部排序算法比较"><a href="#内部排序算法比较" class="headerlink" title="内部排序算法比较"></a>内部排序算法比较</h2><h4 id="问题描述-3"><a href="#问题描述-3" class="headerlink" title="问题描述"></a>问题描述</h4><ol><li><p>对以下6种常用的内部排序算法进行比较：冒泡排序，直接插入排序，简单选择排序，快速排序，希尔排序，堆排序。</p></li><li><p>待排序表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数和关键字的移动次数（关键字交换计为3次移动）。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-3"><a href="#程序代码-3" class="headerlink" title="程序代码"></a>程序代码</h4><p><strong>冒泡排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接插入排序</strong></p><blockquote><p>待排序的数组分为已排序和未排序两部分。初始时，将数组的第一个元素视为已排序部分，其余元素为未排序部分。然后，依次从未排序部分取出一个元素，插入到已排序部分的正确位置，使得已排序部分仍然保持有序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> key = arr[i]; <span class="comment">// 当前要插入的元素</span></span><br><span class="line">j = i - <span class="number">1</span>; <span class="comment">// 从当前元素的前一个元素开始比较</span></span><br><span class="line">(*moves)++;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 将大于当前元素的元素后移</span></span><br><span class="line">j = j - <span class="number">1</span>; <span class="comment">// 继续向前比较</span></span><br><span class="line">(*comparisons)++;</span><br><span class="line">(*moves) += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = key; <span class="comment">// 插入当前元素到正确的位置</span></span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>简单选择排序</strong></p><blockquote><p>算法每次从未排序的部分选择最小的元素，并将其放到已排序部分的末尾。</p><p><code>i</code> 控制已排序部分的末尾位置，初始值为 0。min_idx 存储未排序部分的最小元素的索引。</p><p>内层循环从 <code>i+1</code> 开始遍历未排序部分，找到最小元素的索引。</p><p>如果当前元素比已记录的最小元素小，则更新最小元素的索引。比较过程中。</p><p>外层循环中，将找到的最小元素与已排序部分的末尾元素进行交换。。这样每一次外层循环都会将未排序部分的最小元素放到已排序部分的末尾。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j, min_idx;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">min_idx = i; <span class="comment">// 假设当前位置为最小值的索引</span></span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min_idx]) &#123;</span><br><span class="line">min_idx = j; <span class="comment">// 更新最小值的索引</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp = arr[min_idx];</span><br><span class="line">arr[min_idx] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>; <span class="comment">// 交换最小值和当前位置的元素，并增加移动计数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>快速排序</strong></p><blockquote><p>基于分治的思想，通过将<strong>数组分割为较小的子数组，然后递归地对子数组进行排序</strong>，最终将整个数组排序完成。</p><ol><li>选择一个基准元素（pivot），通常可以选择数组的最后一个元素作为基准。</li><li>设置两个指针 <code>i</code> 和 <code>j</code>，初始时分别指向数组的第一个元素和最后一个元素。</li><li>从左边开始，找到第一个大于等于基准元素的元素，记为 <code>arr[i]</code>。从右边开始，找到第一个小于等于基准元素的元素，记为 <code>arr[j]</code>。</li><li>如果 <code>i</code> 小于 <code>j</code>，交换 <code>arr[i]</code> 和 <code>arr[j]</code>。</li><li>重复步骤 3 和步骤 4，直到 <code>i</code> 不再小于 <code>j</code>。</li><li>将基准元素 <code>arr[high]</code>（初始选择的最后一个元素）与 <code>arr[i]</code>（当前 <code>i</code> 指向的元素）交换位置，将基准元素放置在最终的位置上。</li><li>现在，基准元素左边的元素都小于它，右边的元素都大于它。</li><li>递归地对基准元素左边的子数组（<code>arr[low]</code> 到 <code>arr[i-1]</code>）和右边的子数组（<code>arr[i+1]</code> 到 <code>arr[high]</code>）进行快速排序。</li><li>重复上述步骤，直到每个子数组的大小为 1 或者为空。</li></ol><p>快速排序的核心操作是分区（partition）和递归排序。分区操作根据基准元素将数组划分为两个部分，其中一部分的元素都小于基准元素，另一部分的元素都大于基准元素。递归排序对分区后的子数组进行递归调用，直到数组被完全排序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> pivot = arr[high]; <span class="comment">// 选择最后一个元素作为基准值</span></span><br><span class="line"><span class="type">int</span> i = low - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = low; j &lt;= high - <span class="number">1</span>; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 交换 arr[i] 和 arr[j]</span></span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将基准值放置到正确的位置</span></span><br><span class="line"><span class="type">int</span> temp = arr[i + <span class="number">1</span>];</span><br><span class="line">arr[i + <span class="number">1</span>] = arr[high];</span><br><span class="line">arr[high] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> (i + <span class="number">1</span>); <span class="comment">// 返回基准值的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="comment">// 找到基准值的索引</span></span><br><span class="line"><span class="type">int</span> pivot = partition(arr, low, high, comparisons, moves);</span><br><span class="line"><span class="comment">// 递归地对基准元素左边的子数组进行排序</span></span><br><span class="line">quickSort(arr, low, pivot - <span class="number">1</span>, comparisons, moves);</span><br><span class="line"><span class="comment">// 递归地对基准元素右边的子数组进行排序</span></span><br><span class="line">quickSort(arr, pivot + <span class="number">1</span>, high, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>希尔排序</strong></p><blockquote><p>是插入排序的一种改进算法，通过将待排序的数组按一定间隔分组，<strong>对每个分组进行插入排序</strong>，然后逐渐缩小间隔，最终完成整个数组的排序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> gap, i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用希尔增量，初始间隔为数组长度的一半，逐渐缩小间隔</span></span><br><span class="line"><span class="keyword">for</span> (gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 对每个分组进行插入排序</span></span><br><span class="line"><span class="keyword">for</span> (i = gap; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前分组内进行插入排序</span></span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">arr[j] = arr[j - gap];</span><br><span class="line">(*comparisons)++;</span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[j] = temp;</span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>堆排序</strong></p><blockquote><p>堆排序通过构建最大堆和逐步调整堆实现排序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> largest = i;</span><br><span class="line"><span class="type">int</span> l = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> r = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较左子节点和根节点的值，找出较大的节点</span></span><br><span class="line"><span class="keyword">if</span> (l &lt; n) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[l] &gt; arr[largest]) &#123;</span><br><span class="line">largest = l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较右子节点和当前最大节点的值，找出最大的节点</span></span><br><span class="line"><span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[r] &gt; arr[largest]) &#123;</span><br><span class="line">largest = r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果最大节点不是当前节点，进行交换并继续调整子树</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[largest];</span><br><span class="line">arr[largest] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">heapify(arr, n, largest, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建初始最大堆</span></span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapify(arr, n, i, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐步将最大元素移到数组末尾并调整堆</span></span><br><span class="line"><span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">heapify(arr, i, <span class="number">0</span>, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生成不同的随机数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成大体上升序的随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAscRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">arr[<span class="number">0</span>] = rand() % <span class="number">100</span>; <span class="comment">// 随机生成第一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> range = rand() % <span class="number">10</span> + <span class="number">1</span>; <span class="comment">// 生成随机的增加范围</span></span><br><span class="line"><span class="keyword">if</span> (rand() % <span class="number">10</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] - range; <span class="comment">// 基于前一个数减少范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] + range; <span class="comment">// 基于前一个数增加范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 生成大体上降序的随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getDescRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">arr[<span class="number">0</span>] = rand() % <span class="number">100</span>; <span class="comment">// 随机生成第一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> range = rand() % <span class="number">10</span> + <span class="number">1</span>; <span class="comment">// 生成随机的增加范围</span></span><br><span class="line"><span class="keyword">if</span> (rand() % <span class="number">10</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] - range; <span class="comment">// 基于前一个数减少范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] + range; <span class="comment">// 基于前一个数增加范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">arr[i] = rand() % <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>针对不同的随机数编写不同的比较次数和关键字的移动次数的统计方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">comp_Random</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons/<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves/<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_Random</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span><span class="comment">//因为快速排序的参数传输和其他函数不同，额外编写的。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>,<span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_AscRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getAscRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_AscRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getAscRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>, <span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_DescRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_DescRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>, <span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数实现</strong></p><blockquote><p>主要为程序的调用</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为随机数据：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_Random(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_Random(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_Random(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_Random(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_Random(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_Random(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为大体上升序的随机数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_AscRandom(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为大体上降序的随机数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_DescRandom(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在数据集大小为200的情况下：</strong></p><ol><li>冒泡排序（Bubble Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于小规模数据排序</strong></li><li>比较次数：最好情况为0，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>直接插入排序（Insertion Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于基本有序的数据排序</strong></li><li>比较次数：最好情况为199，最坏情况为19900</li><li>移动次数：最好情况为199，最坏情况为59700</li></ul></li><li>简单选择排序（Selection Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于数据量较小的排序</strong></li><li>比较次数：最好情况为19900，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>快速排序（Quick Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(logn)~O(n)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1526，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>平均时间复杂度：取决于增量序列的选择</li><li>最坏时间复杂度：取决于增量序列的选择</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于中等规模数据排序</strong></li><li>比较次数：最好情况为1247，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>堆排序（Heap Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(nlogn)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1296，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li></ol><p><strong>不同数据集的影响</strong></p><ol><li>冒泡排序（Bubble Sort）：<ul><li>随机数据：由于每次比较只交换相邻元素，随机数据的冒泡排序性能较差，需要较多的比较和交换操作，波动较大。</li><li>大体上升序的随机数：冒泡排序在大体上升序的随机数上性能较好，因为大部分元素已经有序，只需要少量的比较和交换操作，波动较小。</li><li>大体下降序的随机数：冒泡排序在大体下降序的随机数上性能较差，需要较多的比较和交换操作来逆转递减序列，波动较大。</li></ul></li><li>插入排序（Insertion Sort）：<ul><li>随机数据：插入排序在随机数据上的性能较好，因为每个元素都与前面有序的部分进行比较，插入到正确的位置，波动较小。</li><li>大体上升序的随机数：插入排序在大体上升序的随机数上性能较好，只需要少量的比较操作就可以找到正确位置，波动较小。</li><li>大体下降序的随机数：插入排序在大体下降序的随机数上性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>快速排序（Quick Sort）：<ul><li>随机数据：快速排序在随机数据上的性能通常较好，它通过选择一个基准值并分区来排序，波动较小。</li><li>大体上升序的随机数：快速排序在大体上升序的随机数上的性能可能会略好一些，因为它能快速划分已经有序的部分，波动较小。</li><li>大体下降序的随机数：快速排序在大体下降序的随机数上的性能较差，需要较多的比较和划分操作，波动较大。</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>随机数据：希尔排序在随机数据上的性能通常较好，它通过将数组分成多个子序列进行插入排序，逐渐缩小子序列的间隔，最终完成排序，波动较小。</li><li>大体上升序的随机数：希尔排序在大体上升序的随机数上的性能较好，由于大部分元素已经有序，插入排序的次数会减少，波动较小。</li><li>大体下降序的随机数：希尔排序在大体下降序的随机数上的性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>堆排序（Heap Sort）：<ul><li>随机数据：堆排序在随机数据上的性能通常较好，它通过构建最大堆（或最小堆）来进行排序，具有较好的稳定性和较少的波动。</li><li>大体上升序的随机数：堆排序在大体上升序的随机数上的性能较好，最大堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li><li>大体下降序的随机数：堆排序在大体下降序的随机数上的性能较好，最小堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实习内容&quot;&gt;&lt;a href=&quot;#实习内容&quot; class=&quot;headerlink&quot; title=&quot;实习内容&quot;&gt;&lt;/a&gt;实习内容&lt;/h1&gt;&lt;h2 id=&quot;一、马踏棋盘&quot;&gt;&lt;a href=&quot;#一、马踏棋盘&quot; class=&quot;headerlink&quot; title=&quot;一、马踏棋</summary>
      
    
    
    
    <category term="课程" scheme="http://example.com/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="数据结构" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
