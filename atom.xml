<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YYHY&#39;s Blog</title>
  
  
  <link href="https://youyouhangyong.github.io/atom.xml" rel="self"/>
  
  <link href="https://youyouhangyong.github.io/"/>
  <updated>2024-08-16T03:06:16.547Z</updated>
  <id>https://youyouhangyong.github.io/</id>
  
  <author>
    <name>youyouhangyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Unity创建一个类似MC的游戏场景（一）</title>
    <link href="https://youyouhangyong.github.io/2024/08/13/%E4%BD%BF%E7%94%A8Unity%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCMC%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2024/08/13/%E4%BD%BF%E7%94%A8Unity%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCMC%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-08-13T11:58:37.000Z</published>
    <updated>2024-08-16T03:06:16.547Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>使用Unity来制作一个类似Minecraft的游戏场景。这个系列的文章将记录我制作这个游戏场景的过程。</p><p>我们首先将建立一个<ahref="https://zh.wikipedia.org/zh-cn/體素">体素</a>引擎，用于生成游戏中的区块（chunk）</p><h2 id="准备工作">准备工作</h2><p>首先，我们需要准备一些工具和资源。</p><p>在这个系列的文章中，我们将使用Unity2020.3.48f1c1版本，以及一些免费的资源。</p><p>贴图资源<a href="https://www.kenney.nl/assets/voxel-pack">Voxel Pack·Kenney</a>的原始地址<a href="/download/使用Unity创建一个类似MC的游戏场景（一）/贴图资源.unitypackage" download>点此下载贴图包</a></p><h3 id="导入贴图包">导入贴图包</h3><p>点击</p><p>资源-&gt;导入包-&gt;自定义包</p><p>选择下载的unity资源包进行导入</p><p><img src="导入贴图包.png" /></p><h3 id="编写代码">编写代码</h3><p>首先在我们Untiy的<strong>Assets</strong>文件夹下创建一个**_Scripts**文件夹，用于存储我们的所有代码。</p><pre><code>Assets   -- _Scripts //代码   -- _Textures //贴图   -- Scense //场景</code></pre><h4 id="定义方块类型">定义方块类型</h4><p>在**_Scripts<strong>下创建</strong>BlockType.cs**脚本，用于定义游戏中的方块类型。</p><div class="sourceCode" id="cb2"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co">//定义了游戏中使用到的不同方块类型。</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">enum</span> BlockType</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    Nothing<span class="op">,</span>                 <span class="co">// 表示无方块或空方块</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    Air<span class="op">,</span>                     <span class="co">// 表示空气方块，没有物理碰撞和渲染的透明方块。</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    Grass_Dirt<span class="op">,</span>              <span class="co">// 表示带草皮的泥土方块</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    Dirt<span class="op">,</span>                    <span class="co">// 表示泥土方块</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    Grass_Stone<span class="op">,</span>             <span class="co">// 表示带草皮的石头方块</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    Stone<span class="op">,</span>                   <span class="co">// 表示普通的石头方块</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    TreeTrunk<span class="op">,</span>               <span class="co">// 表示树干方块</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    TreeLeafesTransparent<span class="op">,</span>   <span class="co">// 表示透明的树叶方块，用于生成树木的叶子部分，允许部分光线透过</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    TreeLeafsSolid<span class="op">,</span>          <span class="co">// 表示不透明的树叶方块</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    Water<span class="op">,</span>                   <span class="co">// 表示水方块</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>    Sand                     <span class="co">// 表示沙子方块</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>虽然定义了这么多类型的方块，但是暂时不会全部用到。</p><hr /><h4 id="定义区块基础信息">定义区块基础信息</h4><p>在**_Scripts<strong>下创建</strong>ChunkData.cs**脚本，用于定义游戏中的区块信息。</p><div class="sourceCode" id="cb3"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 用于管理和存储一个区块（Chunk）中的所有方块数据，以及区块的相关信息。</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> ChunkData</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 存储区块中的所有方块类型，每个元素对应一个方块。</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> BlockType<span class="op">[]</span> blocks<span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 区块的水平大小（X和Z方向），是一个正方形的尺寸(16*16)。</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> chunkSize <span class="op">=</span> <span class="dv">16</span><span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 区块的垂直高度（Y方向），决定了区块的高度范围。</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> chunkHeight <span class="op">=</span> <span class="dv">100</span><span class="op">;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 对应的世界对象引用，用于访问世界相关的信息或功能，World目前还没创建。</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> World worldReference<span class="op">;</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 区块在整个世界中的位置，使用三维整数向量表示。</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> Vector3Int worldPosition<span class="op">;</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 标记区块是否被玩家修改过，用于判断是否保存区块信息，这在卸载区块的时候非常有用。</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">bool</span> modifiedByThePlayer <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 构造函数，用于初始化一个新的ChunkData对象，并为其分配方块数组。</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">//</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">// chunkSize区块的水平大小</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">// chunkHeight区块的垂直高度</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    <span class="co">// world引用的世界对象</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">// worldPosition区块在世界中的位置</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">ChunkData</span><span class="op">(</span><span class="dt">int</span> chunkSize<span class="op">,</span> <span class="dt">int</span> chunkHeight<span class="op">,</span> World world<span class="op">,</span> Vector3Int worldPosition<span class="op">)</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 初始化区块的大小、高度和位置</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">chunkHeight</span> <span class="op">=</span> chunkHeight<span class="op">;</span></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">chunkSize</span> <span class="op">=</span> chunkSize<span class="op">;</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">worldReference</span> <span class="op">=</span> world<span class="op">;</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">worldPosition</span> <span class="op">=</span> worldPosition<span class="op">;</span></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 为该区块分配存储方块类型的数组，大小为chunkSize * chunkHeight * chunkSize</span></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>        blocks <span class="op">=</span> <span class="kw">new</span> BlockType<span class="op">[</span>chunkSize <span class="op">*</span> chunkHeight <span class="op">*</span> chunkSize<span class="op">];</span></span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>写完代码我们发现World并没有创建，为了暂时解决报错，我们在<code>_Scripts</code>下创建<code>World.cs</code>脚本。</p><p>这样报错就解决了。</p><hr /><h4 id="meshdata数据类">MeshData数据类</h4><p>在**_Scripts<strong>下创建</strong>MeshData.cs**脚本用于存储和管理一个区块的网格数据。</p><p>包括用于渲染的顶点、三角形和UV坐标，以及用于物理碰撞的独立碰撞体网格数据。还有水网格的独立管理。</p><p>在游戏中，<code>Mesh</code> 是所有 3D 对象的基础。通过调整<code>Mesh</code>的顶点和三角形，可以创建各种形状的物体。<code>Mesh</code> 数据可以通过Unity 的渲染系统显示在屏幕上，并且可以通过物理系统进行碰撞检测。</p><div class="sourceCode" id="cb4"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">// 用于存储和管理一个区块的网格数据，包括顶点、三角形和UV坐标，</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="co">// 以及用于碰撞检测的独立网格数据。</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> MeshData</span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储网格的顶点信息</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span>Vector3<span class="op">&gt;</span> vertices <span class="op">=</span> <span class="kw">new</span> List<span class="op">&lt;</span>Vector3<span class="op">&gt;();</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储网格的三角形索引信息，每三个索引构成一个三角形</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> triangles <span class="op">=</span> <span class="kw">new</span> List<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;();</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储网格的UV坐标，用于纹理映射</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span>Vector2<span class="op">&gt;</span> uv <span class="op">=</span> <span class="kw">new</span> List<span class="op">&lt;</span>Vector2<span class="op">&gt;();</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储网格的碰撞体顶点信息</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span>Vector3<span class="op">&gt;</span> colliderVertices <span class="op">=</span> <span class="kw">new</span> List<span class="op">&lt;</span>Vector3<span class="op">&gt;();</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储网格的碰撞体三角形索引信息</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;</span> colliderTriangles <span class="op">=</span> <span class="kw">new</span> List<span class="op">&lt;</span><span class="dt">int</span><span class="op">&gt;();</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储水网格的数据。</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> MeshData waterMesh<span class="op">;</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 标识是否是主网格数据</span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">bool</span> isMainMesh <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 构造函数，用于初始化MeshData对象，如果是主网格，会同时初始化水网格数据。</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="fu">MeshData</span><span class="op">(</span><span class="dt">bool</span> isMainMesh<span class="op">)</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">isMainMesh</span> <span class="op">=</span> isMainMesh<span class="op">;</span></span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果是主网格，初始化水网格数据</span></span><span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>isMainMesh<span class="op">)</span></span><span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>            waterMesh <span class="op">=</span> <span class="kw">new</span> <span class="fu">MeshData</span><span class="op">(</span><span class="kw">false</span><span class="op">);</span></span><span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 添加一个顶点到网格数据，并根据需要将顶点添加到碰撞体数据中。</span></span><span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>    <span class="co">// vertex 要添加的顶点坐标</span></span><span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>    <span class="co">// vertexGeneratesCollider 是否为碰撞体生成顶点</span></span><span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">AddVertex</span><span class="op">(</span>Vector3 vertex<span class="op">,</span> <span class="dt">bool</span> vertexGeneratesCollider<span class="op">)</span></span><span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>        vertices<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertex<span class="op">);</span></span><span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果需要生成碰撞体，将顶点添加到碰撞体顶点列表中</span></span><span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>vertexGeneratesCollider<span class="op">)</span></span><span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>            colliderVertices<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertex<span class="op">);</span></span><span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 添加一个四边形（一个面）的三角形索引到网格数据，并根据需要将三角形添加到碰撞体数据中。</span></span><span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>    <span class="co">// quadGeneratesCollider 是否为碰撞体生成三角形</span></span><span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">AddQuadTriangles</span><span class="op">(</span><span class="dt">bool</span> quadGeneratesCollider<span class="op">)</span></span><span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 添加四边形的两个三角形到主网格</span></span><span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 第一个三角形：顶点 0 -&gt; 1 -&gt; 2</span></span><span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">4</span><span class="op">);</span><span class="co">//4-4</span></span><span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">3</span><span class="op">);</span><span class="co">//4-3</span></span><span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">2</span><span class="op">);</span><span class="co">//4-2</span></span><span id="cb4-65"><a href="#cb4-65" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 第二个三角形：顶点 0 -&gt; 2 -&gt; 3</span></span><span id="cb4-66"><a href="#cb4-66" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">4</span><span class="op">);</span></span><span id="cb4-67"><a href="#cb4-67" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">2</span><span class="op">);</span></span><span id="cb4-68"><a href="#cb4-68" aria-hidden="true" tabindex="-1"></a>        triangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>vertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb4-69"><a href="#cb4-69" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb4-70"><a href="#cb4-70" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果需要生成碰撞体，将四边形的两个三角形添加到碰撞体数据中</span></span><span id="cb4-71"><a href="#cb4-71" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>quadGeneratesCollider<span class="op">)</span></span><span id="cb4-72"><a href="#cb4-72" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-73"><a href="#cb4-73" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">4</span><span class="op">);</span></span><span id="cb4-74"><a href="#cb4-74" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb4-75"><a href="#cb4-75" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">2</span><span class="op">);</span></span><span id="cb4-76"><a href="#cb4-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-77"><a href="#cb4-77" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">4</span><span class="op">);</span></span><span id="cb4-78"><a href="#cb4-78" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">2</span><span class="op">);</span></span><span id="cb4-79"><a href="#cb4-79" aria-hidden="true" tabindex="-1"></a>            colliderTriangles<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>colliderVertices<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb4-80"><a href="#cb4-80" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-81"><a href="#cb4-81" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-82"><a href="#cb4-82" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>AddQuadTriangles方法所构成的面：</p><p><img src="Snipaste_2024-08-15_10-45-38.png" /></p><p>此外，我们的三角形是顺时针绘制出的，这将决定面的法线方向。法线方向又将决定绘制的面，从那个方向是可见的。</p><p>所以说绘制的顺序很重要。</p><h6 id="mash是什么">Mash是什么</h6><p>我们在<code>Unity</code>场景中，所有能被渲染出来的物体都会带有网格Mash。</p><p><img src="Mash示例.png" /></p><p>从概念上讲，网格是图形硬件用来绘制复杂内容的构造。</p><p>它至少包含一组定义<code>3D</code>空间中点的<code>顶点</code>，以及一组连接这些点的<code>三角形</code>，实际上还包含法线、顶点颜色纹理坐标（uv）等信息，这些三角形构成了网格所代表的任何表面。</p><p>所以创建一个<code>Mesh</code>，就是<code>new</code>一个<code>Mesh</code>，给它塞入顶点坐标、UV坐标和三角形序列即可。再复杂的网格也可以通过这些步骤创建出来~</p><h4 id="chunkrenderer类">ChunkRenderer类</h4><p>接下来我们将区块的数据转化为网格数据，然后渲染成3D对象。</p><p>在<code>_Scripts</code>下创建<code>ChunkRenderer.cs</code>用于渲染和更新区块。</p><div class="sourceCode" id="cb5"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Linq</span><span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEditor<span class="op">;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 该脚本需要附加在包含 MeshFilter、MeshRenderer 和 MeshCollider 组件的 GameObject 上</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="fu">RequireComponent</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>MeshFilter<span class="op">))]</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="fu">RequireComponent</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>MeshRenderer<span class="op">))]</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="fu">RequireComponent</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>MeshCollider<span class="op">))]</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> ChunkRenderer <span class="op">:</span> MonoBehaviour</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 私有字段，用于存储对 MeshFilter、MeshCollider 组件和 Mesh 的引用</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    MeshFilter meshFilter<span class="op">;</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    MeshCollider meshCollider<span class="op">;</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    Mesh mesh<span class="op">;</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 控制是否在编辑器中显示Gizmo</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">bool</span> showGizmo <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 公开的属性，用于获取当前区块的数据</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> ChunkData ChunkData <span class="op">&#123;</span> <span class="kw">get</span><span class="op">;</span> <span class="kw">private</span> <span class="kw">set</span><span class="op">;</span> <span class="op">&#125;</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 反映区块是否被玩家修改过</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">bool</span> ModifiedByThePlayer</span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        get</span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> ChunkData<span class="op">.</span><span class="fu">modifiedByThePlayer</span><span class="op">;</span></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>        set</span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>            ChunkData<span class="op">.</span><span class="fu">modifiedByThePlayer</span> <span class="op">=</span> value<span class="op">;</span></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 在脚本被激活时调用，初始化 MeshFilter、MeshCollider 和 Mesh</span></span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">Awake</span><span class="op">()</span></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        meshFilter <span class="op">=</span> GetComponent<span class="op">&lt;</span>MeshFilter<span class="op">&gt;();</span></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        meshCollider <span class="op">=</span> GetComponent<span class="op">&lt;</span>MeshCollider<span class="op">&gt;();</span></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        mesh <span class="op">=</span> meshFilter<span class="op">.</span><span class="fu">mesh</span><span class="op">;</span></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 初始化区块数据</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">InitializeChunk</span><span class="op">(</span>ChunkData data<span class="op">)</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">.</span><span class="fu">ChunkData</span> <span class="op">=</span> data<span class="op">;</span></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 渲染区块的网格数据</span></span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">RenderMesh</span><span class="op">(</span>MeshData meshData<span class="op">)</span></span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 清空当前网格数据</span></span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置子网格数量为2，用于区分普通网格和水面网格</span></span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">subMeshCount</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span></span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 将普通网格和水面网格的顶点数据合并后赋值给 mesh</span></span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">vertices</span> <span class="op">=</span> meshData<span class="op">.</span><span class="fu">vertices</span><span class="op">.</span><span class="fu">Concat</span><span class="op">(</span>meshData<span class="op">.</span><span class="fu">waterMesh</span><span class="op">.</span><span class="fu">vertices</span><span class="op">).</span><span class="fu">ToArray</span><span class="op">();</span></span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置第一个子网格的三角形数据</span></span><span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">SetTriangles</span><span class="op">(</span>meshData<span class="op">.</span><span class="fu">triangles</span><span class="op">.</span><span class="fu">ToArray</span><span class="op">(),</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置第二个子网格（水面网格）的三角形数据，顶点索引需要加上普通网格的顶点数量</span></span><span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">SetTriangles</span><span class="op">(</span>meshData<span class="op">.</span><span class="fu">waterMesh</span><span class="op">.</span><span class="fu">triangles</span><span class="op">.</span><span class="fu">Select</span><span class="op">(</span>val <span class="op">=&gt;</span> val <span class="op">+</span> meshData<span class="op">.</span><span class="fu">vertices</span><span class="op">.</span><span class="fu">Count</span><span class="op">).</span><span class="fu">ToArray</span><span class="op">(),</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 合并普通网格和水面网格的UV数据并赋值给 mesh</span></span><span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">uv</span> <span class="op">=</span> meshData<span class="op">.</span><span class="fu">uv</span><span class="op">.</span><span class="fu">Concat</span><span class="op">(</span>meshData<span class="op">.</span><span class="fu">waterMesh</span><span class="op">.</span><span class="fu">uv</span><span class="op">).</span><span class="fu">ToArray</span><span class="op">();</span></span><span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-72"><a href="#cb5-72" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 重新计算法线，使光照效果正确</span></span><span id="cb5-73"><a href="#cb5-73" aria-hidden="true" tabindex="-1"></a>        mesh<span class="op">.</span><span class="fu">RecalculateNormals</span><span class="op">();</span></span><span id="cb5-74"><a href="#cb5-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-75"><a href="#cb5-75" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 清空当前的碰撞网格，并创建一个新的碰撞网格</span></span><span id="cb5-76"><a href="#cb5-76" aria-hidden="true" tabindex="-1"></a>        meshCollider<span class="op">.</span><span class="fu">sharedMesh</span> <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb5-77"><a href="#cb5-77" aria-hidden="true" tabindex="-1"></a>        Mesh collisionMesh <span class="op">=</span> <span class="kw">new</span> <span class="fu">Mesh</span><span class="op">();</span></span><span id="cb5-78"><a href="#cb5-78" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-79"><a href="#cb5-79" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置碰撞网格的顶点和三角形数据</span></span><span id="cb5-80"><a href="#cb5-80" aria-hidden="true" tabindex="-1"></a>        collisionMesh<span class="op">.</span><span class="fu">vertices</span> <span class="op">=</span> meshData<span class="op">.</span><span class="fu">colliderVertices</span><span class="op">.</span><span class="fu">ToArray</span><span class="op">();</span></span><span id="cb5-81"><a href="#cb5-81" aria-hidden="true" tabindex="-1"></a>        collisionMesh<span class="op">.</span><span class="fu">triangles</span> <span class="op">=</span> meshData<span class="op">.</span><span class="fu">colliderTriangles</span><span class="op">.</span><span class="fu">ToArray</span><span class="op">();</span></span><span id="cb5-82"><a href="#cb5-82" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-83"><a href="#cb5-83" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 重新计算法线，确保碰撞检测准确</span></span><span id="cb5-84"><a href="#cb5-84" aria-hidden="true" tabindex="-1"></a>        collisionMesh<span class="op">.</span><span class="fu">RecalculateNormals</span><span class="op">();</span></span><span id="cb5-85"><a href="#cb5-85" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-86"><a href="#cb5-86" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 将新创建的碰撞网格赋值给 meshCollider</span></span><span id="cb5-87"><a href="#cb5-87" aria-hidden="true" tabindex="-1"></a>        meshCollider<span class="op">.</span><span class="fu">sharedMesh</span> <span class="op">=</span> collisionMesh<span class="op">;</span></span><span id="cb5-88"><a href="#cb5-88" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-89"><a href="#cb5-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-90"><a href="#cb5-90" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 更新区块的渲染，获取区块的网格数据并渲染</span></span><span id="cb5-91"><a href="#cb5-91" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">UpdateChunk</span><span class="op">()</span></span><span id="cb5-92"><a href="#cb5-92" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-93"><a href="#cb5-93" aria-hidden="true" tabindex="-1"></a>        <span class="fu">RenderMesh</span><span class="op">(</span>Chunk<span class="op">.</span><span class="fu">GetChunkMeshData</span><span class="op">(</span>ChunkData<span class="op">));</span></span><span id="cb5-94"><a href="#cb5-94" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-95"><a href="#cb5-95" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-96"><a href="#cb5-96" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 使用传入的 MeshData 更新区块的渲染</span></span><span id="cb5-97"><a href="#cb5-97" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">UpdateChunk</span><span class="op">(</span>MeshData data<span class="op">)</span></span><span id="cb5-98"><a href="#cb5-98" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-99"><a href="#cb5-99" aria-hidden="true" tabindex="-1"></a>        <span class="fu">RenderMesh</span><span class="op">(</span>data<span class="op">);</span></span><span id="cb5-100"><a href="#cb5-100" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-101"><a href="#cb5-101" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-102"><a href="#cb5-102" aria-hidden="true" tabindex="-1"></a><span class="kw">#if</span> UNITY_EDITOR</span><span id="cb5-103"><a href="#cb5-103" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 在编辑器中绘制Gizmo，用于可视化区块边界</span></span><span id="cb5-104"><a href="#cb5-104" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">OnDrawGizmos</span><span class="op">()</span></span><span id="cb5-105"><a href="#cb5-105" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb5-106"><a href="#cb5-106" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>showGizmo<span class="op">)</span></span><span id="cb5-107"><a href="#cb5-107" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb5-108"><a href="#cb5-108" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 仅在游戏运行时绘制Gizmo，并且确保区块数据不为空</span></span><span id="cb5-109"><a href="#cb5-109" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>Application<span class="op">.</span><span class="fu">isPlaying</span> <span class="op">&amp;&amp;</span> ChunkData <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb5-110"><a href="#cb5-110" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb5-111"><a href="#cb5-111" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 如果当前GameObject被选中，Gizmo颜色为绿色，否则为紫色</span></span><span id="cb5-112"><a href="#cb5-112" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>Selection<span class="op">.</span><span class="fu">activeObject</span> <span class="op">==</span> gameObject<span class="op">)</span></span><span id="cb5-113"><a href="#cb5-113" aria-hidden="true" tabindex="-1"></a>                    Gizmos<span class="op">.</span><span class="fu">color</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Color</span><span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="fl">0.4f</span><span class="op">);</span> <span class="co">// 绿色</span></span><span id="cb5-114"><a href="#cb5-114" aria-hidden="true" tabindex="-1"></a>                <span class="kw">else</span></span><span id="cb5-115"><a href="#cb5-115" aria-hidden="true" tabindex="-1"></a>                    Gizmos<span class="op">.</span><span class="fu">color</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Color</span><span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="fl">0.4f</span><span class="op">);</span> <span class="co">// 紫色</span></span><span id="cb5-116"><a href="#cb5-116" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-117"><a href="#cb5-117" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 绘制一个表示区块边界的立方体</span></span><span id="cb5-118"><a href="#cb5-118" aria-hidden="true" tabindex="-1"></a>                Gizmos<span class="op">.</span><span class="fu">DrawCube</span><span class="op">(</span></span><span id="cb5-119"><a href="#cb5-119" aria-hidden="true" tabindex="-1"></a>                    transform<span class="op">.</span><span class="fu">position</span> <span class="op">+</span> <span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>ChunkData<span class="op">.</span><span class="fu">chunkSize</span> <span class="op">/</span> 2f<span class="op">,</span> ChunkData<span class="op">.</span><span class="fu">chunkHeight</span> <span class="op">/</span> 2f<span class="op">,</span> ChunkData<span class="op">.</span><span class="fu">chunkSize</span> <span class="op">/</span> 2f<span class="op">),</span></span><span id="cb5-120"><a href="#cb5-120" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>ChunkData<span class="op">.</span><span class="fu">chunkSize</span><span class="op">,</span> ChunkData<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">,</span> ChunkData<span class="op">.</span><span class="fu">chunkSize</span><span class="op">)</span></span><span id="cb5-121"><a href="#cb5-121" aria-hidden="true" tabindex="-1"></a>                <span class="op">);</span></span><span id="cb5-122"><a href="#cb5-122" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb5-123"><a href="#cb5-123" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-124"><a href="#cb5-124" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-125"><a href="#cb5-125" aria-hidden="true" tabindex="-1"></a><span class="kw">#endif</span></span><span id="cb5-126"><a href="#cb5-126" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>在 Unity 中，<code>MeshFilter</code>、<code>MeshRenderer</code> 和<code>MeshCollider</code> 是与 3D对象的渲染和物理交互密切相关的组件。</p><p><code>MeshFilter</code> 提供了对象的几何数据。</p><p><code>MeshRenderer</code>负责将几何数据渲染到屏幕上，使其在游戏中可见。</p><p><code>MeshCollider</code>使用几何数据来进行物理碰撞检测，使对象能够与其他物理对象互动。</p><p>OK，我们发现Chunk目前还在报红</p><p>我们可以在<code>_Scripts</code>下创建<code>Chunk.cs</code>,并添加一下内容，暂时解决报错。</p><div class="sourceCode" id="cb6"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> Chunk</span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">internal</span> <span class="kw">static</span> MeshData <span class="fu">GetChunkMeshData</span><span class="op">(</span>ChunkData chunkData<span class="op">)</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">NotImplementedException</span><span class="op">();</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h4 id="chunk">Chunk</h4><p>检查一下我们的代码，应该有以下几个文件：</p><p><img src="Snipaste_2024-08-15_12-25-12.png" /></p><p>现在新建一个名为<code>Chunk</code>的空对象，并将<strong><code>ChunkRenderer.cs</code>附加到该对象上</strong>。</p><p>如图，依次添加材质，并将Chunk设置为预设体。</p><p><img src="Snipaste_2024-08-15_12-38-59.png" /></p><h5 id="chunk类">Chunk类</h5><div class="sourceCode" id="cb7"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">;</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> Chunk</span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 遍历 ChunkData 中的每个块，并对每个块执行指定的操作</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">LoopThroughTheBlocks</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> Action<span class="op">&lt;</span><span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">,</span> <span class="dt">int</span><span class="op">&gt;</span> actionToPerform<span class="op">)</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 遍历 chunkData.blocks 数组的每个索引</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> index <span class="op">&lt;</span> chunkData<span class="op">.</span><span class="fu">blocks</span><span class="op">.</span><span class="fu">Length</span><span class="op">;</span> index<span class="op">++)</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 根据索引获取块在 Chunk 中的三维坐标位置</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> position <span class="op">=</span> <span class="fu">GetPostitionFromIndex</span><span class="op">(</span>chunkData<span class="op">,</span> index<span class="op">);</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 对该坐标位置执行传入的操作 actionToPerform</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>            <span class="fu">actionToPerform</span><span class="op">(</span>position<span class="op">.</span><span class="fu">x</span><span class="op">,</span> position<span class="op">.</span><span class="fu">y</span><span class="op">,</span> position<span class="op">.</span><span class="fu">z</span><span class="op">);</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据索引计算块在 Chunk 中的三维坐标位置</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> Vector3Int <span class="fu">GetPostitionFromIndex</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> index<span class="op">)</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算 x 坐标</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> x <span class="op">=</span> index <span class="op">%</span> chunkData<span class="op">.</span><span class="fu">chunkSize</span><span class="op">;</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算 y 坐标</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> y <span class="op">=</span> <span class="op">(</span>index <span class="op">/</span> chunkData<span class="op">.</span><span class="fu">chunkSize</span><span class="op">)</span> <span class="op">%</span> chunkData<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">;</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算 z 坐标</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> z <span class="op">=</span> index <span class="op">/</span> <span class="op">(</span>chunkData<span class="op">.</span><span class="fu">chunkSize</span> <span class="op">*</span> chunkData<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">);</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 返回三维坐标</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Vector3Int</span><span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">);</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 检查给定的轴坐标是否在 Chunk 的范围内</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">InRange</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> axisCoordinate<span class="op">)</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果轴坐标在范围外，返回 false</span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>axisCoordinate <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> axisCoordinate <span class="op">&gt;=</span> chunkData<span class="op">.</span><span class="fu">chunkSize</span><span class="op">)</span></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 在范围内，返回 true</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 检查给定的 y 坐标是否在 Chunk 高度范围内</span></span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">bool</span> <span class="fu">InRangeHeight</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> ycoordinate<span class="op">)</span></span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果 y 坐标在范围外，返回 false</span></span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>ycoordinate <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> ycoordinate <span class="op">&gt;=</span> chunkData<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">)</span></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 在范围内，返回 true</span></span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据 Chunk 内部坐标获取对应的块类型</span></span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> BlockType <span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> Vector3Int chunkCoordinates<span class="op">)</span></span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>chunkData<span class="op">,</span> chunkCoordinates<span class="op">.</span><span class="fu">x</span><span class="op">,</span> chunkCoordinates<span class="op">.</span><span class="fu">y</span><span class="op">,</span> chunkCoordinates<span class="op">.</span><span class="fu">z</span><span class="op">);</span></span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据 x, y, z 坐标获取对应的块类型</span></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> BlockType <span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">)</span></span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果坐标在 Chunk 范围内</span></span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span><span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRangeHeight</span><span class="op">(</span>chunkData<span class="op">,</span> y<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> z<span class="op">))</span></span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 计算索引并返回块类型</span></span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> index <span class="op">=</span> <span class="fu">GetIndexFromPosition</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">);</span></span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> chunkData<span class="op">.</span><span class="fu">blocks</span><span class="op">[</span>index<span class="op">];</span></span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果不在范围内，抛出异常</span></span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a>        <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">Exception</span><span class="op">(</span><span class="st">&quot;&quot;</span><span class="op">);</span></span><span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 在 Chunk 内部坐标设置块类型</span></span><span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">SetBlock</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> Vector3Int localPosition<span class="op">,</span> BlockType block<span class="op">)</span></span><span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果坐标在 Chunk 范围内</span></span><span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span><span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> localPosition<span class="op">.</span><span class="fu">x</span><span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRangeHeight</span><span class="op">(</span>chunkData<span class="op">,</span> localPosition<span class="op">.</span><span class="fu">y</span><span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> localPosition<span class="op">.</span><span class="fu">z</span><span class="op">))</span></span><span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 计算索引并设置块类型</span></span><span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> index <span class="op">=</span> <span class="fu">GetIndexFromPosition</span><span class="op">(</span>chunkData<span class="op">,</span> localPosition<span class="op">.</span><span class="fu">x</span><span class="op">,</span> localPosition<span class="op">.</span><span class="fu">y</span><span class="op">,</span> localPosition<span class="op">.</span><span class="fu">z</span><span class="op">);</span></span><span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a>            chunkData<span class="op">.</span><span class="fu">blocks</span><span class="op">[</span>index<span class="op">]</span> <span class="op">=</span> block<span class="op">;</span></span><span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a>        <span class="kw">else</span></span><span id="cb7-86"><a href="#cb7-86" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb7-87"><a href="#cb7-87" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 如果不在范围内，抛出异常</span></span><span id="cb7-88"><a href="#cb7-88" aria-hidden="true" tabindex="-1"></a>            <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">Exception</span><span class="op">(</span><span class="st">&quot;Need to ask World for appropriate chunk&quot;</span><span class="op">);</span></span><span id="cb7-89"><a href="#cb7-89" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb7-90"><a href="#cb7-90" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-91"><a href="#cb7-91" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-92"><a href="#cb7-92" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据 x, y, z 坐标计算块在 Chunk 中的索引</span></span><span id="cb7-93"><a href="#cb7-93" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> <span class="dt">int</span> <span class="fu">GetIndexFromPosition</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">)</span></span><span id="cb7-94"><a href="#cb7-94" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-95"><a href="#cb7-95" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算索引值</span></span><span id="cb7-96"><a href="#cb7-96" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> x <span class="op">+</span> chunkData<span class="op">.</span><span class="fu">chunkSize</span> <span class="op">*</span> y <span class="op">+</span> chunkData<span class="op">.</span><span class="fu">chunkSize</span> <span class="op">*</span> chunkData<span class="op">.</span><span class="fu">chunkHeight</span> <span class="op">*</span> z<span class="op">;</span></span><span id="cb7-97"><a href="#cb7-97" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-98"><a href="#cb7-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-99"><a href="#cb7-99" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 将世界坐标转换为 Chunk 内部坐标</span></span><span id="cb7-100"><a href="#cb7-100" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Vector3Int <span class="fu">GetBlockInChunkCoordinates</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> Vector3Int pos<span class="op">)</span></span><span id="cb7-101"><a href="#cb7-101" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-102"><a href="#cb7-102" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> <span class="kw">new</span> Vector3Int</span><span id="cb7-103"><a href="#cb7-103" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb7-104"><a href="#cb7-104" aria-hidden="true" tabindex="-1"></a>            x <span class="op">=</span> pos<span class="op">.</span><span class="fu">x</span> <span class="op">-</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">x</span><span class="op">,</span></span><span id="cb7-105"><a href="#cb7-105" aria-hidden="true" tabindex="-1"></a>            y <span class="op">=</span> pos<span class="op">.</span><span class="fu">y</span> <span class="op">-</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">y</span><span class="op">,</span></span><span id="cb7-106"><a href="#cb7-106" aria-hidden="true" tabindex="-1"></a>            z <span class="op">=</span> pos<span class="op">.</span><span class="fu">z</span> <span class="op">-</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">z</span></span><span id="cb7-107"><a href="#cb7-107" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;;</span></span><span id="cb7-108"><a href="#cb7-108" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-109"><a href="#cb7-109" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-110"><a href="#cb7-110" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成 Chunk 的 Mesh 数据</span></span><span id="cb7-111"><a href="#cb7-111" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> MeshData <span class="fu">GetChunkMeshData</span><span class="op">(</span>ChunkData chunkData<span class="op">)</span></span><span id="cb7-112"><a href="#cb7-112" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb7-113"><a href="#cb7-113" aria-hidden="true" tabindex="-1"></a>        MeshData meshData <span class="op">=</span> <span class="kw">new</span> <span class="fu">MeshData</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb7-114"><a href="#cb7-114" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-115"><a href="#cb7-115" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 目前为空实现，后续可以在此添加生成 Mesh 数据的逻辑</span></span><span id="cb7-116"><a href="#cb7-116" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-117"><a href="#cb7-117" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> meshData<span class="op">;</span></span><span id="cb7-118"><a href="#cb7-118" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb7-119"><a href="#cb7-119" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h4 id="blockdataso">BlockDataSO</h4><p>创建一个ScriptableObject类，用于存储和管理块的纹理和碰撞相关数据。</p><p>通过 <code>textureDataList</code> 可以保存多个块的纹理信息。</p><div class="sourceCode" id="cb8"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">;</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a><span class="co">// [CreateAssetMenu] 允许在 Unity 编辑器中创建此类的实例作为资产</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="op">[</span><span class="fu">CreateAssetMenu</span><span class="op">(</span>fileName <span class="op">=</span> <span class="st">&quot;Block Data&quot;</span><span class="op">,</span> menuName <span class="op">=</span> <span class="st">&quot;Data/Block Data&quot;</span><span class="op">)]</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> BlockDataSO <span class="op">:</span> ScriptableObject</span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 存储纹理的 X 轴和 Y 轴的大小</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">float</span> textureSizeX<span class="op">,</span> textureSizeY<span class="op">;</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 存储每种块类型的纹理数据的列表</span></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> List<span class="op">&lt;</span>TextureData<span class="op">&gt;</span> textureDataList<span class="op">;</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a><span class="co">// [Serializable] 使类可序列化，这样它可以在 Unity 编辑器中显示和保存</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>Serializable<span class="op">]</span></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> TextureData</span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 该纹理数据对应的块类型</span></span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> BlockType blockType<span class="op">;</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 定义块的不同面（上、下、侧面）的纹理坐标</span></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> Vector2Int up<span class="op">,</span> down<span class="op">,</span> side<span class="op">;</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 指示块是否为实心块，默认值为 true</span></span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">bool</span> isSolid <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 指示是否为块生成碰撞器，默认值为 true</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">bool</span> generatesCollider <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>然后我们新建一个BlockData给每个方块设置贴图：</p><p><a href="/download/使用Unity创建一个类似MC的游戏场景（一）/Block Data Imported.unitypackage" download>点此下载BlockData Imported</a></p><p><img src="Snipaste_2024-08-15_14-10-15.png" /></p><p>Up、Down、Side就分别对应了方块的上面，下面和侧面的贴图在下面这张图片上的位置坐标。</p><h4 id="blockdatamanager">BlockDataManager</h4><p>负责管理和访问块的纹理数据。通过该类，可以在整个游戏中方便地获取和使用块的纹理信息。</p><div class="sourceCode" id="cb9"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> BlockDataManager <span class="op">:</span> MonoBehaviour</span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 定义纹理偏移量，用于防止纹理边缘出现不明显的缝隙</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">float</span> textureOffset <span class="op">=</span> <span class="fl">0.001f</span><span class="op">;</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 定义纹理的 X 轴和 Y 轴的大小</span></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">float</span> tileSizeX<span class="op">,</span> tileSizeY<span class="op">;</span></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 字典，用于将每种块类型映射到对应的纹理数据</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Dictionary<span class="op">&lt;</span>BlockType<span class="op">,</span> TextureData<span class="op">&gt;</span> blockTextureDataDictionary <span class="op">=</span> <span class="kw">new</span> Dictionary<span class="op">&lt;</span>BlockType<span class="op">,</span> TextureData<span class="op">&gt;();</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 引用包含块纹理数据的 ScriptableObject</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> BlockDataSO textureData<span class="op">;</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 在脚本挂载的 GameObject 启动时调用</span></span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">Awake</span><span class="op">()</span></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 遍历 ScriptableObject 中的纹理数据列表</span></span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>        <span class="kw">foreach</span> <span class="op">(</span><span class="dt">var</span> item <span class="kw">in</span> textureData<span class="op">.</span><span class="fu">textureDataList</span><span class="op">)</span></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 如果字典中不包含此块类型的数据，则添加到字典中</span></span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>blockTextureDataDictionary<span class="op">.</span><span class="fu">ContainsKey</span><span class="op">(</span>item<span class="op">.</span><span class="fu">blockType</span><span class="op">)</span> <span class="op">==</span> <span class="kw">false</span><span class="op">)</span></span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>                blockTextureDataDictionary<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>item<span class="op">.</span><span class="fu">blockType</span><span class="op">,</span> item<span class="op">);</span></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 将 ScriptableObject 中的纹理大小赋值给静态变量，以便全局访问</span></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>        tileSizeX <span class="op">=</span> textureData<span class="op">.</span><span class="fu">textureSizeX</span><span class="op">;</span></span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>        tileSizeY <span class="op">=</span> textureData<span class="op">.</span><span class="fu">textureSizeY</span><span class="op">;</span></span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>然后再Unity中创建BlockDataManager添加BlockDataManager.cs脚本，并将贴图数据赋予TextureData。</p><p><img src="Snipaste_2024-08-15_14-27-06.png" /></p><h4 id="direction">Direction</h4><div class="sourceCode" id="cb10"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 定义块的方向</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">enum</span> Direction</span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    forward<span class="op">,</span>    <span class="co">// z+ 方向（前）</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    right<span class="op">,</span>      <span class="co">// x+ 方向（右）</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    backwards<span class="op">,</span>  <span class="co">// z- 方向（后）</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>    left<span class="op">,</span>       <span class="co">// x- 方向（左）</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>    up<span class="op">,</span>         <span class="co">// y+ 方向（上）</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    down        <span class="co">// y- 方向（下）</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span></span></code></pre></div><p><strong><code>Direction</code> 枚举</strong>:用于表示方块在三维空间中的方向。这在处理方块的相对方向或在三维空间中进行方向操作时非常有用。</p><h4 id="directionextensions">DirectionExtensions</h4><p>为 <code>Direction</code> 枚举提供了额外的功能：将方向转换为对应的<code>Vector3Int</code>。</p><div class="sourceCode" id="cb11"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">;</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 定义方向枚举的扩展方法</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> DirectionExtensions</span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 扩展方法：根据方向枚举值获取对应的三维向量</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Vector3Int <span class="fu">GetVector</span><span class="op">(</span><span class="kw">this</span> Direction direction<span class="op">)</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">//根据方向返回对应的三维向量</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> direction <span class="kw">switch</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">up</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">up</span><span class="op">,</span>              <span class="co">// 返回 (0, 1, 0) 对应的向量，表示向上的方向</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">down</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">down</span><span class="op">,</span>          <span class="co">// 返回 (0, -1, 0) 对应的向量，表示向下的方向</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">right</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">right</span><span class="op">,</span>        <span class="co">// 返回 (1, 0, 0) 对应的向量，表示向右的方向</span></span><span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">left</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">left</span><span class="op">,</span>          <span class="co">// 返回 (-1, 0, 0) 对应的向量，表示向左的方向</span></span><span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">foreward</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">forward</span><span class="op">,</span>   <span class="co">// 返回 (0, 0, 1) 对应的向量，表示向前的方向</span></span><span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">backwards</span> <span class="op">=&gt;</span> Vector3Int<span class="op">.</span><span class="fu">back</span><span class="op">,</span>     <span class="co">// 返回 (0, 0, -1) 对应的向量，表示向后的方向</span></span><span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> <span class="kw">throw</span> <span class="kw">new</span> <span class="fu">Exception</span><span class="op">(</span><span class="st">&quot;Invalid input direction&quot;</span><span class="op">)</span> <span class="co">// 如果方向无效，抛出异常</span></span><span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;;</span></span><span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h4 id="blockhelper">BlockHelper</h4><p>根据块的类型和相邻块的类型，生成块的网格数据。</p><p>负责为体素生成正确的几何形状和纹理坐标，并确定哪些面应该被渲染。</p><div class="sourceCode" id="cb12"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="kw">class</span> BlockHelper</span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 定义了一个包含所有可能方向的数组，用于遍历块的六个面</span></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="kw">static</span> Direction<span class="op">[]</span> directions <span class="op">=</span></span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">backwards</span><span class="op">,</span> <span class="co">// -z 方向</span></span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">down</span><span class="op">,</span>      <span class="co">// -y 方向</span></span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">foreward</span><span class="op">,</span>  <span class="co">// +z 方向</span></span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">left</span><span class="op">,</span>      <span class="co">// -x 方向</span></span><span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">right</span><span class="op">,</span>     <span class="co">// +x 方向</span></span><span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>        Direction<span class="op">.</span><span class="fu">up</span>         <span class="co">// +y 方向</span></span><span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;;</span></span><span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据块的类型生成块的网格数据</span></span><span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> MeshData <span class="fu">GetMeshData</span><span class="op">(</span>ChunkData chunk<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">,</span> MeshData meshData<span class="op">,</span> BlockType blockType<span class="op">)</span></span><span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果块是空气或者什么都没有，则直接返回现有的网格数据</span></span><span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>blockType <span class="op">==</span> BlockType<span class="op">.</span><span class="fu">Air</span> <span class="op">||</span> blockType <span class="op">==</span> BlockType<span class="op">.</span><span class="fu">Nothing</span><span class="op">)</span></span><span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> meshData<span class="op">;</span></span><span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 遍历所有方向，检查该方向是否需要渲染面</span></span><span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>        <span class="kw">foreach</span> <span class="op">(</span>Direction direction <span class="kw">in</span> directions<span class="op">)</span></span><span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 计算相邻块的坐标</span></span><span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> neighbourBlockCoordinates <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector3Int</span><span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">)</span> <span class="op">+</span> direction<span class="op">.</span><span class="fu">GetVector</span><span class="op">();</span></span><span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 获取相邻块的类型</span></span><span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> neighbourBlockType <span class="op">=</span> Chunk<span class="op">.</span><span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>chunk<span class="op">,</span> neighbourBlockCoordinates<span class="op">);</span></span><span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 如果相邻块存在且不为固体，则生成对应的面</span></span><span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>neighbourBlockType <span class="op">!=</span> BlockType<span class="op">.</span><span class="fu">Nothing</span> <span class="op">&amp;&amp;</span> BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>neighbourBlockType<span class="op">].</span><span class="fu">isSolid</span> <span class="op">==</span> <span class="kw">false</span><span class="op">)</span></span><span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 特殊处理水块类型</span></span><span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>blockType <span class="op">==</span> BlockType<span class="op">.</span><span class="fu">Water</span><span class="op">)</span></span><span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#123;</span></span><span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// 仅当相邻块是空气时，才为水块生成面</span></span><span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>neighbourBlockType <span class="op">==</span> BlockType<span class="op">.</span><span class="fu">Air</span><span class="op">)</span></span><span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a>                        meshData<span class="op">.</span><span class="fu">waterMesh</span> <span class="op">=</span> <span class="fu">GetFaceDataIn</span><span class="op">(</span>direction<span class="op">,</span> chunk<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">,</span> meshData<span class="op">.</span><span class="fu">waterMesh</span><span class="op">,</span> blockType<span class="op">);</span></span><span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a>                <span class="kw">else</span></span><span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#123;</span></span><span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// 生成普通块的面</span></span><span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a>                    meshData <span class="op">=</span> <span class="fu">GetFaceDataIn</span><span class="op">(</span>direction<span class="op">,</span> chunk<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">,</span> meshData<span class="op">,</span> blockType<span class="op">);</span></span><span id="cb12-47"><a href="#cb12-47" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb12-48"><a href="#cb12-48" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb12-49"><a href="#cb12-49" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb12-50"><a href="#cb12-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-51"><a href="#cb12-51" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> meshData<span class="op">;</span></span><span id="cb12-52"><a href="#cb12-52" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-53"><a href="#cb12-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-54"><a href="#cb12-54" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 为指定方向的块面生成网格数据</span></span><span id="cb12-55"><a href="#cb12-55" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> MeshData <span class="fu">GetFaceDataIn</span><span class="op">(</span>Direction direction<span class="op">,</span> ChunkData chunk<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">,</span> MeshData meshData<span class="op">,</span> BlockType blockType<span class="op">)</span></span><span id="cb12-56"><a href="#cb12-56" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-57"><a href="#cb12-57" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 获取面对应的顶点</span></span><span id="cb12-58"><a href="#cb12-58" aria-hidden="true" tabindex="-1"></a>        <span class="fu">GetFaceVertices</span><span class="op">(</span>direction<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">,</span> meshData<span class="op">,</span> blockType<span class="op">);</span></span><span id="cb12-59"><a href="#cb12-59" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 添加四边形的三角形数据</span></span><span id="cb12-60"><a href="#cb12-60" aria-hidden="true" tabindex="-1"></a>        meshData<span class="op">.</span><span class="fu">AddQuadTriangles</span><span class="op">(</span>BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>blockType<span class="op">].</span><span class="fu">generatesCollider</span><span class="op">);</span></span><span id="cb12-61"><a href="#cb12-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 添加UV坐标</span></span><span id="cb12-62"><a href="#cb12-62" aria-hidden="true" tabindex="-1"></a>        meshData<span class="op">.</span><span class="fu">uv</span><span class="op">.</span><span class="fu">AddRange</span><span class="op">(</span><span class="fu">FaceUVs</span><span class="op">(</span>direction<span class="op">,</span> blockType<span class="op">));</span></span><span id="cb12-63"><a href="#cb12-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-64"><a href="#cb12-64" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> meshData<span class="op">;</span></span><span id="cb12-65"><a href="#cb12-65" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-66"><a href="#cb12-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-67"><a href="#cb12-67" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据方向获取面对应的顶点，并添加到网格数据中</span></span><span id="cb12-68"><a href="#cb12-68" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">GetFaceVertices</span><span class="op">(</span>Direction direction<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">,</span> MeshData meshData<span class="op">,</span> BlockType blockType<span class="op">)</span></span><span id="cb12-69"><a href="#cb12-69" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-70"><a href="#cb12-70" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> generatesCollider <span class="op">=</span> BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>blockType<span class="op">].</span><span class="fu">generatesCollider</span><span class="op">;</span></span><span id="cb12-71"><a href="#cb12-71" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 根据方向添加面对应的顶点坐标</span></span><span id="cb12-72"><a href="#cb12-72" aria-hidden="true" tabindex="-1"></a>        <span class="kw">switch</span> <span class="op">(</span>direction<span class="op">)</span></span><span id="cb12-73"><a href="#cb12-73" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb12-74"><a href="#cb12-74" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">backwards</span><span class="op">:</span> <span class="co">// -z 方向的面</span></span><span id="cb12-75"><a href="#cb12-75" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-76"><a href="#cb12-76" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-77"><a href="#cb12-77" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-78"><a href="#cb12-78" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-79"><a href="#cb12-79" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-80"><a href="#cb12-80" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">foreward</span><span class="op">:</span> <span class="co">// +z 方向的面</span></span><span id="cb12-81"><a href="#cb12-81" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-82"><a href="#cb12-82" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-83"><a href="#cb12-83" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-84"><a href="#cb12-84" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-85"><a href="#cb12-85" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-86"><a href="#cb12-86" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">left</span><span class="op">:</span> <span class="co">// -x 方向的面</span></span><span id="cb12-87"><a href="#cb12-87" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-88"><a href="#cb12-88" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-89"><a href="#cb12-89" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-90"><a href="#cb12-90" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-91"><a href="#cb12-91" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-92"><a href="#cb12-92" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-93"><a href="#cb12-93" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">right</span><span class="op">:</span> <span class="co">// +x 方向的面</span></span><span id="cb12-94"><a href="#cb12-94" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-95"><a href="#cb12-95" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-96"><a href="#cb12-96" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-97"><a href="#cb12-97" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-98"><a href="#cb12-98" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-99"><a href="#cb12-99" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">down</span><span class="op">:</span> <span class="co">// -y 方向的面</span></span><span id="cb12-100"><a href="#cb12-100" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-101"><a href="#cb12-101" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-102"><a href="#cb12-102" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-103"><a href="#cb12-103" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-104"><a href="#cb12-104" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-105"><a href="#cb12-105" aria-hidden="true" tabindex="-1"></a>            <span class="kw">case</span> Direction<span class="op">.</span><span class="fu">up</span><span class="op">:</span> <span class="co">// +y 方向的面</span></span><span id="cb12-106"><a href="#cb12-106" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-107"><a href="#cb12-107" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">+</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-108"><a href="#cb12-108" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-109"><a href="#cb12-109" aria-hidden="true" tabindex="-1"></a>                meshData<span class="op">.</span><span class="fu">AddVertex</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>x <span class="op">-</span> <span class="fl">0.5f</span><span class="op">,</span> y <span class="op">+</span> <span class="fl">0.5f</span><span class="op">,</span> z <span class="op">-</span> <span class="fl">0.5f</span><span class="op">),</span> generatesCollider<span class="op">);</span></span><span id="cb12-110"><a href="#cb12-110" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-111"><a href="#cb12-111" aria-hidden="true" tabindex="-1"></a>            <span class="kw">default</span><span class="op">:</span></span><span id="cb12-112"><a href="#cb12-112" aria-hidden="true" tabindex="-1"></a>                <span class="kw">break</span><span class="op">;</span></span><span id="cb12-113"><a href="#cb12-113" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb12-114"><a href="#cb12-114" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-115"><a href="#cb12-115" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-116"><a href="#cb12-116" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 获取面对应的UV坐标，确定纹理的显示位置</span></span><span id="cb12-117"><a href="#cb12-117" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Vector2<span class="op">[]</span> <span class="fu">FaceUVs</span><span class="op">(</span>Direction direction<span class="op">,</span> BlockType blockType<span class="op">)</span></span><span id="cb12-118"><a href="#cb12-118" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-119"><a href="#cb12-119" aria-hidden="true" tabindex="-1"></a>        Vector2<span class="op">[]</span> UVs <span class="op">=</span> <span class="kw">new</span> Vector2<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span><span id="cb12-120"><a href="#cb12-120" aria-hidden="true" tabindex="-1"></a>        <span class="dt">var</span> tilePos <span class="op">=</span> <span class="fu">TexturePosition</span><span class="op">(</span>direction<span class="op">,</span> blockType<span class="op">);</span></span><span id="cb12-121"><a href="#cb12-121" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-122"><a href="#cb12-122" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 根据方向和块类型确定纹理的位置，并生成UV坐标</span></span><span id="cb12-123"><a href="#cb12-123" aria-hidden="true" tabindex="-1"></a>        UVs<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">x</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">-</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">,</span></span><span id="cb12-124"><a href="#cb12-124" aria-hidden="true" tabindex="-1"></a>            BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">y</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">);</span></span><span id="cb12-125"><a href="#cb12-125" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-126"><a href="#cb12-126" aria-hidden="true" tabindex="-1"></a>        UVs<span class="op">[</span><span class="dv">1</span><span class="op">]</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">x</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">-</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">,</span></span><span id="cb12-127"><a href="#cb12-127" aria-hidden="true" tabindex="-1"></a>            BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">y</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">-</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">);</span></span><span id="cb12-128"><a href="#cb12-128" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-129"><a href="#cb12-129" aria-hidden="true" tabindex="-1"></a>        UVs<span class="op">[</span><span class="dv">2</span><span class="op">]</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">x</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">,</span></span><span id="cb12-130"><a href="#cb12-130" aria-hidden="true" tabindex="-1"></a>            BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">y</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">-</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">);</span></span><span id="cb12-131"><a href="#cb12-131" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-132"><a href="#cb12-132" aria-hidden="true" tabindex="-1"></a>        UVs<span class="op">[</span><span class="dv">3</span><span class="op">]</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>BlockDataManager<span class="op">.</span><span class="fu">tileSizeX</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">x</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">,</span></span><span id="cb12-133"><a href="#cb12-133" aria-hidden="true" tabindex="-1"></a>            BlockDataManager<span class="op">.</span><span class="fu">tileSizeY</span> <span class="op">*</span> tilePos<span class="op">.</span><span class="fu">y</span> <span class="op">+</span> BlockDataManager<span class="op">.</span><span class="fu">textureOffset</span><span class="op">);</span></span><span id="cb12-134"><a href="#cb12-134" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-135"><a href="#cb12-135" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> UVs<span class="op">;</span></span><span id="cb12-136"><a href="#cb12-136" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-137"><a href="#cb12-137" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-138"><a href="#cb12-138" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 根据方向和块类型确定纹理在图集中对应的位置</span></span><span id="cb12-139"><a href="#cb12-139" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">static</span> Vector2Int <span class="fu">TexturePosition</span><span class="op">(</span>Direction direction<span class="op">,</span> BlockType blockType<span class="op">)</span></span><span id="cb12-140"><a href="#cb12-140" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb12-141"><a href="#cb12-141" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> direction <span class="kw">switch</span></span><span id="cb12-142"><a href="#cb12-142" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb12-143"><a href="#cb12-143" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">up</span> <span class="op">=&gt;</span> BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>blockType<span class="op">].</span><span class="fu">up</span><span class="op">,</span>   <span class="co">// 向上方向的纹理</span></span><span id="cb12-144"><a href="#cb12-144" aria-hidden="true" tabindex="-1"></a>            Direction<span class="op">.</span><span class="fu">down</span> <span class="op">=&gt;</span> BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>blockType<span class="op">].</span><span class="fu">down</span><span class="op">,</span> <span class="co">// 向下方向的纹理</span></span><span id="cb12-145"><a href="#cb12-145" aria-hidden="true" tabindex="-1"></a>            _ <span class="op">=&gt;</span> BlockDataManager<span class="op">.</span><span class="fu">blockTextureDataDictionary</span><span class="op">[</span>blockType<span class="op">].</span><span class="fu">side</span>  <span class="co">// 其他方向的纹理</span></span><span id="cb12-146"><a href="#cb12-146" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;;</span></span><span id="cb12-147"><a href="#cb12-147" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-148"><a href="#cb12-148" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h4 id="world">World</h4><p>通过 <code>GenerateWorld</code>方法，可以一次性生成整个地图，并将每个区块对象添加到场景中。</p><div class="sourceCode" id="cb13"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">;</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">;</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> System<span class="op">.</span><span class="fu">Collections</span><span class="op">.</span><span class="fu">Generic</span><span class="op">;</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> World <span class="op">:</span> MonoBehaviour</span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 世界生成相关的参数</span></span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> mapSizeInChunks <span class="op">=</span> <span class="dv">6</span><span class="op">;</span>  <span class="co">// 世界地图由多少个区块组成（每行每列区块数）</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> chunkSize <span class="op">=</span> <span class="dv">16</span><span class="op">,</span>       <span class="co">// 每个区块的大小（x和z方向）</span></span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>               chunkHeight <span class="op">=</span> <span class="dv">100</span><span class="op">;</span>    <span class="co">// 每个区块的高度（y方向）</span></span><span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">int</span> waterThreshold <span class="op">=</span> <span class="dv">50</span><span class="op">;</span>  <span class="co">// 水的高度阈值（低于这个值的是水）</span></span><span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">float</span> noiseScale <span class="op">=</span> <span class="fl">0.03f</span><span class="op">;</span> <span class="co">// 噪声缩放比例，用于生成地形的高度</span></span><span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> GameObject chunkPrefab<span class="op">;</span>   <span class="co">// 区块的预制件，用于实例化区块对象</span></span><span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储区块数据和区块渲染器的字典</span></span><span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>    Dictionary<span class="op">&lt;</span>Vector3Int<span class="op">,</span> ChunkData<span class="op">&gt;</span> chunkDataDictionary <span class="op">=</span> <span class="kw">new</span> Dictionary<span class="op">&lt;</span>Vector3Int<span class="op">,</span> ChunkData<span class="op">&gt;();</span></span><span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    Dictionary<span class="op">&lt;</span>Vector3Int<span class="op">,</span> ChunkRenderer<span class="op">&gt;</span> chunkDictionary <span class="op">=</span> <span class="kw">new</span> Dictionary<span class="op">&lt;</span>Vector3Int<span class="op">,</span> ChunkRenderer<span class="op">&gt;();</span></span><span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成世界的方法</span></span><span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="dt">void</span> <span class="fu">GenerateWorld</span><span class="op">()</span></span><span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 清空字典和销毁已有的区块对象</span></span><span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>        chunkDataDictionary<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>        <span class="kw">foreach</span> <span class="op">(</span>ChunkRenderer chunk <span class="kw">in</span> chunkDictionary<span class="op">.</span><span class="fu">Values</span><span class="op">)</span></span><span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>            <span class="fu">Destroy</span><span class="op">(</span>chunk<span class="op">.</span><span class="fu">gameObject</span><span class="op">);</span></span><span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>        chunkDictionary<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 遍历每个区块的位置</span></span><span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>        <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> x <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> x <span class="op">&lt;</span> mapSizeInChunks<span class="op">;</span> x<span class="op">++)</span></span><span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> z <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> z <span class="op">&lt;</span> mapSizeInChunks<span class="op">;</span> z<span class="op">++)</span></span><span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 创建区块数据对象</span></span><span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>                ChunkData data <span class="op">=</span> <span class="kw">new</span> <span class="fu">ChunkData</span><span class="op">(</span>chunkSize<span class="op">,</span> chunkHeight<span class="op">,</span> <span class="kw">this</span><span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector3Int</span><span class="op">(</span>x <span class="op">*</span> chunkSize<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> z <span class="op">*</span> chunkSize<span class="op">));</span></span><span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 生成区块中的体素（方块）</span></span><span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>                <span class="fu">GenerateVoxels</span><span class="op">(</span>data<span class="op">);</span></span><span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 将生成的区块数据存入字典</span></span><span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>                chunkDataDictionary<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>data<span class="op">.</span><span class="fu">worldPosition</span><span class="op">,</span> data<span class="op">);</span></span><span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 生成区块的网格并创建区块对象</span></span><span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>        <span class="kw">foreach</span> <span class="op">(</span>ChunkData data <span class="kw">in</span> chunkDataDictionary<span class="op">.</span><span class="fu">Values</span><span class="op">)</span></span><span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 获取区块的网格数据</span></span><span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>            MeshData meshData <span class="op">=</span> Chunk<span class="op">.</span><span class="fu">GetChunkMeshData</span><span class="op">(</span>data<span class="op">);</span></span><span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 实例化区块对象</span></span><span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a>            GameObject chunkObject <span class="op">=</span> <span class="fu">Instantiate</span><span class="op">(</span>chunkPrefab<span class="op">,</span> data<span class="op">.</span><span class="fu">worldPosition</span><span class="op">,</span> Quaternion<span class="op">.</span><span class="fu">identity</span><span class="op">);</span></span><span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 获取区块渲染器组件</span></span><span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a>            ChunkRenderer chunkRenderer <span class="op">=</span> chunkObject<span class="op">.</span><span class="fu">GetComponent</span><span class="op">&lt;</span>ChunkRenderer<span class="op">&gt;();</span></span><span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 将区块渲染器存入字典</span></span><span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a>            chunkDictionary<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>data<span class="op">.</span><span class="fu">worldPosition</span><span class="op">,</span> chunkRenderer<span class="op">);</span></span><span id="cb13-56"><a href="#cb13-56" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 初始化区块数据</span></span><span id="cb13-57"><a href="#cb13-57" aria-hidden="true" tabindex="-1"></a>            chunkRenderer<span class="op">.</span><span class="fu">InitializeChunk</span><span class="op">(</span>data<span class="op">);</span></span><span id="cb13-58"><a href="#cb13-58" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 更新区块的网格</span></span><span id="cb13-59"><a href="#cb13-59" aria-hidden="true" tabindex="-1"></a>            chunkRenderer<span class="op">.</span><span class="fu">UpdateChunk</span><span class="op">(</span>meshData<span class="op">);</span></span><span id="cb13-60"><a href="#cb13-60" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-61"><a href="#cb13-61" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb13-62"><a href="#cb13-62" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-63"><a href="#cb13-63" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成区块中的体素</span></span><span id="cb13-64"><a href="#cb13-64" aria-hidden="true" tabindex="-1"></a>    <span class="kw">private</span> <span class="dt">void</span> <span class="fu">GenerateVoxels</span><span class="op">(</span>ChunkData data<span class="op">)</span></span><span id="cb13-65"><a href="#cb13-65" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb13-66"><a href="#cb13-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 遍历区块的每个位置</span></span><span id="cb13-67"><a href="#cb13-67" aria-hidden="true" tabindex="-1"></a>        <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> x <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> x <span class="op">&lt;</span> data<span class="op">.</span><span class="fu">chunkSize</span><span class="op">;</span> x<span class="op">++)</span></span><span id="cb13-68"><a href="#cb13-68" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb13-69"><a href="#cb13-69" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> z <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> z <span class="op">&lt;</span> data<span class="op">.</span><span class="fu">chunkSize</span><span class="op">;</span> z<span class="op">++)</span></span><span id="cb13-70"><a href="#cb13-70" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb13-71"><a href="#cb13-71" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 使用Perlin噪声生成地形高度</span></span><span id="cb13-72"><a href="#cb13-72" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> noiseValue <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">PerlinNoise</span><span class="op">((</span>data<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">x</span> <span class="op">+</span> x<span class="op">)</span> <span class="op">*</span> noiseScale<span class="op">,</span> <span class="op">(</span>data<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">z</span> <span class="op">+</span> z<span class="op">)</span> <span class="op">*</span> noiseScale<span class="op">);</span></span><span id="cb13-73"><a href="#cb13-73" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> groundPosition <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">RoundToInt</span><span class="op">(</span>noiseValue <span class="op">*</span> chunkHeight<span class="op">);</span></span><span id="cb13-74"><a href="#cb13-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-75"><a href="#cb13-75" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 遍历区块的高度，设置每个体素的类型</span></span><span id="cb13-76"><a href="#cb13-76" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> y <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> y <span class="op">&lt;</span> chunkHeight<span class="op">;</span> y<span class="op">++)</span></span><span id="cb13-77"><a href="#cb13-77" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#123;</span></span><span id="cb13-78"><a href="#cb13-78" aria-hidden="true" tabindex="-1"></a>                    BlockType voxelType <span class="op">=</span> BlockType<span class="op">.</span><span class="fu">Dirt</span><span class="op">;</span>  <span class="co">// 默认块类型为土块</span></span><span id="cb13-79"><a href="#cb13-79" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-80"><a href="#cb13-80" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>y <span class="op">&gt;</span> groundPosition<span class="op">)</span>  <span class="co">// 如果当前y值高于地面高度</span></span><span id="cb13-81"><a href="#cb13-81" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#123;</span></span><span id="cb13-82"><a href="#cb13-82" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>y <span class="op">&lt;</span> waterThreshold<span class="op">)</span>  <span class="co">// 如果y值低于水阈值，则为水</span></span><span id="cb13-83"><a href="#cb13-83" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&#123;</span></span><span id="cb13-84"><a href="#cb13-84" aria-hidden="true" tabindex="-1"></a>                            voxelType <span class="op">=</span> BlockType<span class="op">.</span><span class="fu">Water</span><span class="op">;</span></span><span id="cb13-85"><a href="#cb13-85" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&#125;</span></span><span id="cb13-86"><a href="#cb13-86" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">else</span>  <span class="co">// 否则为空气</span></span><span id="cb13-87"><a href="#cb13-87" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&#123;</span></span><span id="cb13-88"><a href="#cb13-88" aria-hidden="true" tabindex="-1"></a>                            voxelType <span class="op">=</span> BlockType<span class="op">.</span><span class="fu">Air</span><span class="op">;</span></span><span id="cb13-89"><a href="#cb13-89" aria-hidden="true" tabindex="-1"></a>                        <span class="op">&#125;</span></span><span id="cb13-90"><a href="#cb13-90" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#125;</span></span><span id="cb13-91"><a href="#cb13-91" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span> <span class="kw">if</span> <span class="op">(</span>y <span class="op">==</span> groundPosition <span class="op">&amp;&amp;</span> y <span class="op">&lt;</span> waterThreshold<span class="op">)</span>  <span class="co">// 如果y值等于地面高度且低于水阈值，则为沙</span></span><span id="cb13-92"><a href="#cb13-92" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#123;</span></span><span id="cb13-93"><a href="#cb13-93" aria-hidden="true" tabindex="-1"></a>                        voxelType <span class="op">=</span> BlockType<span class="op">.</span><span class="fu">Sand</span><span class="op">;</span></span><span id="cb13-94"><a href="#cb13-94" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#125;</span></span><span id="cb13-95"><a href="#cb13-95" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span> <span class="kw">if</span> <span class="op">(</span>y <span class="op">==</span> groundPosition<span class="op">)</span>  <span class="co">// 否则如果y值等于地面高度，则为草块</span></span><span id="cb13-96"><a href="#cb13-96" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#123;</span></span><span id="cb13-97"><a href="#cb13-97" aria-hidden="true" tabindex="-1"></a>                        voxelType <span class="op">=</span> BlockType<span class="op">.</span><span class="fu">Grass_Dirt</span><span class="op">;</span></span><span id="cb13-98"><a href="#cb13-98" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&#125;</span></span><span id="cb13-99"><a href="#cb13-99" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-100"><a href="#cb13-100" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// 设置该位置的体素类型</span></span><span id="cb13-101"><a href="#cb13-101" aria-hidden="true" tabindex="-1"></a>                    Chunk<span class="op">.</span><span class="fu">SetBlock</span><span class="op">(</span>data<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector3Int</span><span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">),</span> voxelType<span class="op">);</span></span><span id="cb13-102"><a href="#cb13-102" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb13-103"><a href="#cb13-103" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb13-104"><a href="#cb13-104" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-105"><a href="#cb13-105" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb13-106"><a href="#cb13-106" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong><code>GenerateWorld</code> 方法</strong>:</p><ul><li>负责生成整个世界。它先清空已有的数据和区块对象，然后为每个区块生成体素数据，并实例化对应的区块对象。每个区块数据都存储在<code>chunkDataDictionary</code> 中，而对应的渲染器则存储在<code>chunkDictionary</code> 中。</li></ul><p><strong><code>GenerateVoxels</code> 方法</strong>:</p><ul><li>生成每个区块中的体素数据。通过 <code>Perlin</code>噪声生成地形的高度，并根据高度和水阈值确定每个体素的类型（如土块、草块、沙块、水、空气等）。</li></ul><p><strong><code>chunkDataDictionary</code> 和<code>chunkDictionary</code></strong>:</p><ul><li>前者存储生成的区块数据，后者存储生成的区块渲染器对象。这些字典方便管理和访问生成的世界数据和区块对象。</li></ul><p><strong><code>PerlinNoise</code></strong>:</p><ul><li>使用 <code>Perlin</code>噪声生成的地形高度模拟了自然地形的起伏，生成逼真的地形效果。</li></ul><h4 id="完善chunk">完善Chunk</h4><p>在上面的代码中使用了GetChunkMeshData方法，如果你还记得该方法的实现，你会发现实现并不完整。</p><div class="sourceCode" id="cb14"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 获取区块的网格数据</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>MeshData meshData <span class="op">=</span> Chunk<span class="op">.</span><span class="fu">GetChunkMeshData</span><span class="op">(</span>data<span class="op">);</span></span></code></pre></div><p>现在我们来完善它：</p><div class="sourceCode" id="cb15"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> MeshData <span class="fu">GetChunkMeshData</span><span class="op">(</span>ChunkData chunkData<span class="op">)</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>     <span class="co">// 创建一个新的 MeshData 对象，用于存储生成的网格数据。</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>        MeshData meshData <span class="op">=</span> <span class="kw">new</span> <span class="fu">MeshData</span><span class="op">(</span><span class="kw">true</span><span class="op">);</span></span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>       <span class="co">// 遍历块数据中的所有块，并为每个块生成网格数据。</span></span><span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>       <span class="co">// 这里使用了一个委托，传递给 LoopThroughTheBlocks 方法，在遍历每个块时调用。</span></span><span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="fu">LoopThroughTheBlocks</span><span class="op">(</span>chunkData<span class="op">,</span> <span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">)</span> <span class="op">=&gt;</span> meshData <span class="op">=</span> </span><span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>          <span class="co">// 获取当前块的类型，并根据块的类型生成网格数据。</span></span><span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>          lockHelper<span class="op">.</span><span class="fu">GetMeshData</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">,</span> meshData<span class="op">,</span>  </span><span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a>          <span class="co">// 调用 BlockHelper.GetMeshData 生成网格数据，并将其存储在 meshData 对象中。</span></span><span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a>          chunkData<span class="op">.</span><span class="fu">blocks</span><span class="op">[</span><span class="fu">GetIndexFromPosition</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">)]));</span></span><span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> meshData<span class="op">;</span></span><span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span></code></pre></div><p>然后，还有`<code>GetBlockFromChunkCoordinates</code>没有实现。</p><pre><code> // 获取相邻块的类型var neighbourBlockType = Chunk.GetBlockFromChunkCoordinates(chunk, neighbourBlockCoordinates);</code></pre><p>我们进继续在Chunk类中完善：</p><div class="sourceCode" id="cb17"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> BlockType <span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">)</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 检查给定的块坐标是否在当前 Chunk 的范围内</span></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span><span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRangeHeight</span><span class="op">(</span>chunkData<span class="op">,</span> y<span class="op">)</span> <span class="op">&amp;&amp;</span> <span class="fu">InRange</span><span class="op">(</span>chunkData<span class="op">,</span> z<span class="op">))</span></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> index <span class="op">=</span> <span class="fu">GetIndexFromPosition</span><span class="op">(</span>chunkData<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">);</span></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> chunkData<span class="op">.</span><span class="fu">blocks</span><span class="op">[</span>index<span class="op">];</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 如果不在范围内，则向世界对象请求获取该块类型</span></span><span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> chunkData<span class="op">.</span><span class="fu">worldReference</span><span class="op">.</span><span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>chunkData<span class="op">,</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">x</span> <span class="op">+</span> x<span class="op">,</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">y</span> <span class="op">+</span> y<span class="op">,</span> chunkData<span class="op">.</span><span class="fu">worldPosition</span><span class="op">.</span><span class="fu">z</span> <span class="op">+</span> z<span class="op">);</span></span><span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span></code></pre></div><h4 id="完善world">完善World</h4><p>继续实现上面代码中的`<code>GetBlockFromChunkCoordinates</code>方法</p><div class="sourceCode" id="cb18"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">internal</span> BlockType <span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>ChunkData chunkData<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">)</span></span><span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 计算指定块坐标对应的 Chunk 的世界位置</span></span><span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    Vector3Int pos <span class="op">=</span> Chunk<span class="op">.</span><span class="fu">ChunkPositionFromBlockCoords</span><span class="op">(</span><span class="kw">this</span><span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> z<span class="op">);</span></span><span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 用于存储查找到的 ChunkData</span></span><span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>    ChunkData containerChunk <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 从字典中查找包含指定块坐标的 Chunk</span></span><span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>    chunkDataDictionary<span class="op">.</span><span class="fu">TryGetValue</span><span class="op">(</span>pos<span class="op">,</span> <span class="kw">out</span> containerChunk<span class="op">);</span></span><span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 如果未找到对应的 Chunk，返回 BlockType.Nothing 表示无块</span></span><span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">(</span>containerChunk <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">return</span> BlockType<span class="op">.</span><span class="fu">Nothing</span><span class="op">;</span></span><span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 将块的世界坐标转换为 Chunk 内部的局部坐标</span></span><span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>    Vector3Int blockInChunkCoordinates <span class="op">=</span> Chunk<span class="op">.</span><span class="fu">GetBlockInChunkCoordinates</span><span class="op">(</span>containerChunk<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector3Int</span><span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">));</span></span><span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 返回该块的类型</span></span><span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> Chunk<span class="op">.</span><span class="fu">GetBlockFromChunkCoordinates</span><span class="op">(</span>containerChunk<span class="op">,</span> blockInChunkCoordinates<span class="op">);</span></span><span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h4 id="完善chunk-1">完善Chunk</h4><p>最后实现完成最后一段代码：</p><div class="sourceCode" id="cb19"><preclass="sourceCode c#"><code class="sourceCode cs"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="kw">internal</span> <span class="kw">static</span> Vector3Int <span class="fu">ChunkPositionFromBlockCoords</span><span class="op">(</span>World world<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> z<span class="op">)</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 创建一个新的 Vector3Int 对象，用于存储 Chunk 的世界位置</span></span><span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    Vector3Int pos <span class="op">=</span> <span class="kw">new</span> Vector3Int</span><span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算给定 x 坐标所在的 Chunk 的世界位置</span></span><span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>        x <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">FloorToInt</span><span class="op">(</span>x <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>world<span class="op">.</span><span class="fu">chunkSize</span><span class="op">)</span> <span class="op">*</span> world<span class="op">.</span><span class="fu">chunkSize</span><span class="op">,</span></span><span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算给定 y 坐标所在的 Chunk 的世界位置</span></span><span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        y <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">FloorToInt</span><span class="op">(</span>y <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>world<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">)</span> <span class="op">*</span> world<span class="op">.</span><span class="fu">chunkHeight</span><span class="op">,</span></span><span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 计算给定 z 坐标所在的 Chunk 的世界位置</span></span><span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>        z <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">FloorToInt</span><span class="op">(</span>z <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>world<span class="op">.</span><span class="fu">chunkSize</span><span class="op">)</span> <span class="op">*</span> world<span class="op">.</span><span class="fu">chunkSize</span></span><span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;;</span></span><span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 返回计算得到的 Chunk 世界位置</span></span><span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> pos<span class="op">;</span></span><span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h3 id="运行一下">运行一下</h3><p>最后，我们创建一个名为World的空对象，并添加<code>World</code>脚本,</p><p>设置Chunk Prefab 添加Chunk 预设体。</p><p><img src="Snipaste_2024-08-15_15-33-56" /></p><p>然后创建一个按钮。如下图所示，添加一个点击事件。</p><p><img src="Snipaste_2024-08-15_15-36-07" /></p><p>点击运行，再次点击按钮，你应该在游戏运行窗口看到以下画面：</p><p><img src="Snipaste_2024-08-15_15-38-16.png" /></p><p>下一步我们将生成更大更复杂的地形。</p><h2 id="下面有请chatgpt做总结">下面有请ChatGPT做总结</h2><h3 id="类与调用关系概述">类与调用关系概述</h3><p>在项目中定义了多个核心类和脚本，这些类和脚本共同协作以实现 Minecraft风格的体素世界生成与渲染。以下是每个类的作用及其相互之间的调用关系。</p><h4 id="blockdataimported">1. <strong>BlockDataImported</strong></h4><ul><li><strong>作用</strong>:这个类或结构体通常用于加载和管理从外部资源（如 JSON文件或其他数据格式）导入的方块数据。它是数据的输入来源。</li><li><strong>调用关系</strong>: 通过 <code>BlockDataManager</code>进行管理，并将数据加载到游戏内。</li></ul><h4 id="blockdatamanager-1">2. <strong>BlockDataManager</strong></h4><ul><li><strong>作用</strong>:管理所有方块的数据，包括每个方块的纹理信息、碰撞检测、是否是固体等属性。它使用<code>BlockDataSO</code> 来存储这些数据。</li><li><strong>调用关系</strong>: 被<code>BlockHelper</code>、<code>Chunk</code>等类调用，用于获取特定方块的数据，比如纹理、是否生成碰撞体等。</li></ul><h4 id="blockdataso-1">3. <strong>BlockDataSO</strong></h4><ul><li><strong>作用</strong>: ScriptableObject 用于在 Unity编辑器中管理和配置方块数据，允许设计师在编辑器中直观地配置方块属性。</li><li><strong>调用关系</strong>: 被 <code>BlockDataManager</code>使用以统一管理方块数据。</li></ul><h4 id="blockhelper-1">4. <strong>BlockHelper</strong></h4><ul><li><strong>作用</strong>:提供与方块相关的辅助方法，例如获取方块的网格数据、计算相邻方块的位置、生成特定方向的面、计算UV 坐标等。</li><li><strong>调用关系</strong>: 被 <code>Chunk</code>类调用，用于生成每个块的网格数据。</li></ul><h4 id="blocktype">5. <strong>BlockType</strong></h4><ul><li><strong>作用</strong>:枚举（enum）或类，用于定义游戏中所有可用的方块类型，如空气、草地、石头、水等。</li><li><strong>调用关系</strong>: 通过 <code>Chunk</code> 和<code>BlockHelper</code>被大量使用，定义每个块的类型，并决定其外观和行为。</li></ul><h4 id="chunk-1">6. <strong>Chunk</strong></h4><ul><li><strong>作用</strong>:表示世界中的一个区块，包含一个块的集合，管理区块内的块数据，生成并返回区块的网格数据。</li><li><strong>调用关系</strong>: 负责调用 <code>BlockHelper</code>生成区块的网格数据，并与 <code>ChunkRenderer</code> 协作渲染区块。</li></ul><h4 id="chunkdata">7. <strong>ChunkData</strong></h4><ul><li><strong>作用</strong>:存储特定区块的所有数据，包括每个块的类型、位置、以及区块的世界位置等。</li><li><strong>调用关系</strong>: <code>Chunk</code> 使用<code>ChunkData</code> 来访问和修改区块的具体数据。<code>World</code>类生成世界时，也使用 <code>ChunkData</code> 来管理每个区块的数据。</li></ul><h4 id="chunkrenderer">8. <strong>ChunkRenderer</strong></h4><ul><li><strong>作用</strong>: 负责渲染区块，管理区块的 Mesh组件，将生成的网格数据应用到 Unity 的 Mesh 上以进行渲染。</li><li><strong>调用关系</strong>: <code>World</code> 生成世界时，会实例化<code>ChunkRenderer</code>，并使用它来显示生成的区块。</li></ul><h4 id="direction-1">9. <strong>Direction</strong></h4><ul><li><strong>作用</strong>:枚举类，用于定义可能的方向，如上、下、左、右、前、后，表示方块的六个面。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code> 和<code>Chunk</code> 使用，用于确定方块的方向并生成相应的面。</li></ul><h4 id="directionextensions-1">10.<strong>DirectionExtensions</strong></h4><ul><li><strong>作用</strong>: 提供扩展方法，用于从 <code>Direction</code>枚举中获取方向向量，帮助确定方块在某个方向上的相邻方块位置。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code>调用，用于计算相邻方块的位置。</li></ul><h4 id="meshdata">11. <strong>MeshData</strong></h4><ul><li><strong>作用</strong>: 存储生成的网格数据，包括顶点、三角形、UV坐标等，最终用于构建区块的 Mesh。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code> 和<code>Chunk</code> 使用，生成方块和区块的网格数据。</li></ul><h4 id="world-1">12. <strong>World</strong></h4><ul><li><strong>作用</strong>:管理整个体素世界的生成、维护和渲染，生成多个区块，并组织它们形成完整的世界。</li><li><strong>调用关系</strong>: 生成并管理 <code>Chunk</code> 和<code>ChunkRenderer</code>，负责大规模的世界生成逻辑，并与<code>BlockDataManager</code>、<code>ChunkData</code>协作处理方块和区块的数据。</li></ul><h3 id="调用关系图概念化">调用关系图（概念化）</h3><pre class="plaintext"><code>                          +-------------------+                          | BlockDataImported |                          +-------------------+                                   |                          +-------------------+                          |  BlockDataManager  |                          +-------------------+                          /           \           +-------------+             +-----------------+           | BlockDataSO |             |  BlockDataHelper|           +-------------+             +-----------------+                                           |                                       +-------+                                       | BlockType |                                       +-------+                                          |              +--------------------------------------------+              |                                            |         +--------+                                   +--------+         | Chunk  |                                   | World  |         +--------+                                   +--------+            |                                            |     +-------------+                                  +-------------+     | ChunkData   |                                  | ChunkRenderer|     +-------------+                                  +-------------+            |        +----------+        | MeshData |        +----------+</code></pre><h3 id="section"></h3><p>这些类和脚本的设计紧密合作以实现体素世界的生成和渲染。在这个系统中，<code>World</code>类负责管理整个世界的生成和维护；<code>Chunk</code> 和<code>ChunkData</code> 管理区块的数据与生成；<code>BlockHelper</code> 和<code>MeshData</code> 则负责具体的网格数据生成和处理；而<code>BlockDataManager</code> 和 <code>BlockType</code>则集中管理方块的具体属性和行为。每个类各司其职，共同协作构建一个复杂且可扩展的体素世界系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用Unity来制作一个类似Minecraft的游戏场景。这个系列的文章将记录我制作这个游戏场景的过程。&lt;/p&gt;
&lt;p&gt;我们首先将建立一个&lt;a
href=&quot;https://zh.wikipedia.org/zh-cn/體素&quot;&gt;体</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://youyouhangyong.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Unity" scheme="https://youyouhangyong.github.io/tags/Unity/"/>
    
    <category term="游戏开发" scheme="https://youyouhangyong.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    <category term="Minecraft" scheme="https://youyouhangyong.github.io/tags/Minecraft/"/>
    
  </entry>
  
  <entry>
    <title>图像表示和图像增强（二）</title>
    <link href="https://youyouhangyong.github.io/2023/07/29/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2023/07/29/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-07-29T05:44:48.000Z</published>
    <updated>2023-07-29T05:48:51.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理二">图像处理（二）</h2><h3 id="滤波">滤波</h3><p>滤波是一种常见的信号处理技术，用于去除信号中的噪声、平滑信号、增强信号特征等。在图像处理中，滤波器（也称为卷积核或内核）在图像上滑动，对图像的每个像素点进行加权求和，从而得到输出图像的像素值。滤波可以根据滤波器的设计和权重分布，实现不同的效果。</p><p>给出以下图片：<img src="yuan.png" alt="yuan" /></p><p><strong>进行三种滤波的演示：</strong></p><p><strong>使用OpenCV库进行图像处理操作</strong></p><h4 id="均值滤波">1. 均值滤波：</h4><p>均值滤波是一种线性平滑滤波方法，它<strong>用周围像素的平均值来替代当前像素值</strong>。均值滤波对图像中的噪声有较好的去除效果，同时能够一定程度上平滑图像。由于简单易实现，均值滤波通常用于实时应用或较低要求的去噪处理。</p><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 读取图像</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>image <span class="op">=</span> cv2.imread(<span class="st">&#39;image.jpg&#39;</span>, cv2.IMREAD_GRAYSCALE)</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 均值滤波</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>blurred_image <span class="op">=</span> cv2.blur(image, (<span class="dv">5</span>, <span class="dv">5</span>))</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 显示原始图像和均值滤波后的图像</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Original Image&#39;</span>, image)</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Blurred Image (Mean)&#39;</span>, blurred_image)</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>cv2.waitKey(<span class="dv">0</span>)</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>cv2.destroyAllWindows()</span></code></pre></div><figure><img src="Mean.png" alt="Mean" /><figcaption aria-hidden="true">Mean</figcaption></figure><h4 id="中值滤波">2. 中值滤波：</h4><p>中值滤波是一种非线性滤波方法，它<strong>用周围像素值的中值来替代当前像素值</strong>。中值滤波对图像中的椒盐噪声（即黑白点噪声）有较好的去噪效果，因为它能够有效地去除极端值（噪点），而不受滤波器大小的影响。中值滤波常用于去除椒盐噪声或其他噪声类型。</p><div class="sourceCode" id="cb2"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 读取图像</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>image <span class="op">=</span> cv2.imread(<span class="st">&#39;image.jpg&#39;</span>, cv2.IMREAD_GRAYSCALE)</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 中值滤波</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>median_blurred_image <span class="op">=</span> cv2.medianBlur(image, <span class="dv">5</span>)</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 显示原始图像和中值滤波后的图像</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Original Image&#39;</span>, image)</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Blurred Image (Median)&#39;</span>, median_blurred_image)</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>cv2.waitKey(<span class="dv">0</span>)</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>cv2.destroyAllWindows()</span></code></pre></div><figure><img src="Median.png" alt="Median" /><figcaption aria-hidden="true">Median</figcaption></figure><h4 id="高斯滤波">3. 高斯滤波：</h4><p>高斯滤波是一种<strong>基于高斯函数的加权平滑滤波方法</strong>。它用<strong>高斯函数的权重加权平均周围像素值来替代当前像素值</strong>。高斯滤波相比于均值滤波在平滑图像的同时，更加<strong>注重保留图像的边缘信息</strong>，因为权重与距离中心像素的距离成正比，<strong>距离越近的像素有更大的权重</strong>。高斯滤波通常用于平滑图像并去除高斯噪声。</p><div class="sourceCode" id="cb3"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 读取图像</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>image <span class="op">=</span> cv2.imread(<span class="st">&#39;image.jpg&#39;</span>, cv2.IMREAD_GRAYSCALE)</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 高斯滤波</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>gaussian_blurred_image <span class="op">=</span> cv2.GaussianBlur(image, (<span class="dv">5</span>, <span class="dv">5</span>), <span class="dv">0</span>)</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 显示原始图像和高斯滤波后的图像</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Original Image&#39;</span>, image)</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>cv2.imshow(<span class="st">&#39;Blurred Image (Gaussian)&#39;</span>, gaussian_blurred_image)</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>cv2.waitKey(<span class="dv">0</span>)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>cv2.destroyAllWindows()</span></code></pre></div><figure><img src="Gaussian.png" alt="Gaussian" /><figcaption aria-hidden="true">Gaussian</figcaption></figure><p>在实际应用中，选择合适的滤波方式取决于图像处理的具体需求和噪声特点。均值滤波对于轻度噪声和平滑效果较好的图像适用；中值滤波对于椒盐噪声较多的图像较为有效；高斯滤波则适用于平滑图像同时保留边缘信息的情况。通常，这三种滤波方式可以相互结合使用，以达到更好的图像处理效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图像处理二&quot;&gt;图像处理（二）&lt;/h2&gt;
&lt;h3 id=&quot;滤波&quot;&gt;滤波&lt;/h3&gt;
&lt;p&gt;滤波是一种常见的信号处理技术，用于去除信号中的噪声、平滑信号、增强信号特征等。在图像处理中，滤波器（也称为卷积核或内核）在图像上滑动，对图像的每个像素点进行加权求和，从而得到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图像表示和图像增强（一）</title>
    <link href="https://youyouhangyong.github.io/2023/07/25/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2023/07/25/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-07-25T03:43:08.000Z</published>
    <updated>2023-07-25T06:19:31.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像表示">图像表示</h2><p>图像表示与获取主要包括:</p><ol type="1"><li>图像的数字化表示</li></ol><ul><li>图像是连续的信号,需要通过采样和量化过程变为数字化的离散信号。</li><li>采样间隔(Sample spacing)决定了图像的分辨率和包含的信息量。</li><li>量化表决定了图像的灰度级数(比特数)。</li></ul><ol start="2" type="1"><li>颜色模式</li></ol><ul><li>RGB色彩模式:颜色通过红绿蓝三个颜色通道的组合表示。</li><li>灰度图像:只有灰度一个通道,表示图像的亮度信息。</li></ul><ol start="3" type="1"><li>图像获取</li></ol><ul><li>摄像机、图像传感器采集光线信息,转换为图像信号。</li><li>医学成像(CT、MRI等)通过非光学方法获取图像。</li></ul><ol start="4" type="1"><li>图像文件格式</li></ol><ul><li>JPEG:有损压缩格式,文件大小较小。</li><li>PNG:无损压缩格式,保留更多细节质量。</li><li>TIFF:灵活的位图图像格式。</li></ul><ol start="5" type="1"><li>图像存储</li></ol><ul><li>像素网格存储:行序和列序存储。</li><li>数据压缩:提高存储效率。</li></ul><p>图像从连续信号到数字化表示的过程,不同的颜色模式、文件格式,以及如何有效存储图像数据。这些构成了数字图像处理的基础。</p><h2 id="图像增强">图像增强</h2><p>图像增强主要包括以下几种方法:</p><h3 id="直方图均衡化">1. <strong>直方图均衡化</strong></h3><ul><li><p>改善图像的对比度,使得整个灰度范围都得到充分利用。</p></li><li><p>直方图均衡化后,容易区分不同部分的灰度差异。</p></li></ul><p>直方图均衡化(HistogramEqualization)是图像处理中常用的对比度增强技术,其目的是<strong>扩展图像的灰度范围</strong>,使图像灰度直方图尽可能均匀,<strong>从而增强图像的对比度</strong>。</p><p>具体做法是:</p><pre><code>  1. 计算图像的灰度直方图,即**统计每个灰度级个数**。  2. 计算每个灰度级的累积分布函数(CDF)。  3. 根据CDF,通过映射函数**将原始灰度级映射到新的灰度级**。这个映射函数使得新的灰度级数量在**0~255范围尽可能均匀**。  4. 根据映射函数转换每个像素的灰度值,生成直方图均衡化后的图像。</code></pre><p>直方图均衡化后,原来灰度分布范围小的区域会被拉伸到0~255全部范围,从而增强对比度。这对于亮度分布很局限的图像来说可以有效提高清晰度和可识别性。但它也可能导致图像增益过大出现反转。所以需针对不同图像谨慎使用。</p><div class="sourceCode" id="cb2"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> matplotlib <span class="im">import</span> pyplot <span class="im">as</span> plt</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>img <span class="op">=</span> cv2.imread(<span class="st">&#39;image.jpg&#39;</span>)  <span class="co"># 读取彩色图像</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co"># 将彩色图像转换为灰度图像</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>img_gray <span class="op">=</span> cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 灰度图像进行直方图均衡化</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>hist, bins <span class="op">=</span> np.histogram(img_gray.flatten(), <span class="dv">256</span>, [<span class="dv">0</span>, <span class="dv">256</span>])</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>cdf <span class="op">=</span> hist.cumsum()</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>cdf_m <span class="op">=</span> cdf <span class="op">*</span> hist.<span class="bu">max</span>() <span class="op">/</span> cdf.<span class="bu">max</span>()</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>img_eq <span class="op">=</span> np.interp(img_gray.flatten(), bins[:<span class="op">-</span><span class="dv">1</span>], cdf_m)</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>img_eq <span class="op">=</span> img_eq.reshape(img_gray.shape)</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>plt.imshow(img, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)  <span class="co"># 原图彩色</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>plt.show()</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>plt.imshow(img_gray, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)  <span class="co"># 原图-&gt;灰色图片</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>plt.show()</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>plt.imshow(img_eq, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)  <span class="co"># 灰色图片-&gt;直方图均衡化</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>原图</th><th>灰度图</th><th>直方图均衡化后的灰度图</th></tr></thead><tbody><tr class="odd"><td><img src="image-20230725114526717.png"alt="image-20230725114526717" /></td><td><img src="image-20230725114544412.png"alt="image-20230725114544412" /></td><td><img src="image-20230725114551233.png"alt="image-20230725114551233" /></td></tr></tbody></table><p>直方图均衡化在图像处理中的典型应用包括:</p><ol type="1"><li><p><strong>对比度增强</strong>：直方图均衡化可以有效拉伸图像的动态范围,增加图像对比度,使得图像细节更加明显。这对于低对比度的图像来说尤为重要。</p></li><li><p><strong>医学成像</strong>：在X射线、CT等医学图像分析中,使用直方图均衡化可以增加图像不同组织之间的对比度,更容易识别和诊断。</p></li><li><p><strong>夜视及卫星图像处理</strong>：由于拍摄条件受限,这些图像常常整体对比度很弱。使用均衡化可以增强显示效果。</p></li><li><p><strong>影像监控</strong>：在监控摄像中均衡化可以提高视频质量,更准确识别人或物体。</p></li><li><p><strong>人脸识别</strong>：直方图均衡化可以减少照明变化对人脸识别的影响,提高识别准确率。</p></li></ol><p>总之,直方图均衡化在需要提高图像对比度和细节的场合有着广泛的应用。但也需要注意它可能带来<strong>图像增益过高</strong>的问题。</p><h3 id="灰度变换">2. 灰度变换</h3><p>灰度变换是通过对图像像素点的灰度值进行映射来调整图像的对比度和亮度。</p><div class="sourceCode" id="cb3"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> cv2</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 读取图像</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>image <span class="op">=</span> cv2.imread(<span class="st">&#39;input_image.jpg&#39;</span>, cv2.IMREAD_GRAYSCALE)</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="co"># 线性灰度变换</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> linear_grayscale_transform(image, alpha, beta):</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 对每个像素应用线性变换</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> alpha <span class="op">*</span> image <span class="op">+</span> beta</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 将灰度值限制在[0, 255]范围内</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> np.clip(result, <span class="dv">0</span>, <span class="dv">255</span>)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result.astype(np.uint8)</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 非线性灰度变换（伽马变换）</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> gamma_transform(image, gamma):</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 对每个像素应用伽马变换</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    result <span class="op">=</span> np.power(image <span class="op">/</span> <span class="fl">255.0</span>, gamma) <span class="op">*</span> <span class="fl">255.0</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> result.astype(np.uint8)</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 设置线性变换的参数</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>alpha <span class="op">=</span> <span class="fl">1.5</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>beta <span class="op">=</span> <span class="dv">30</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co"># 设置伽马变换的参数</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>gamma_value <span class="op">=</span> <span class="fl">1.8</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="co"># 应用线性灰度变换</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>linear_transformed_image <span class="op">=</span> linear_grayscale_transform(image, alpha, beta)</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="co"># 应用伽马变换</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>gamma_transformed_image <span class="op">=</span> gamma_transform(image, gamma_value)</span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a><span class="co"># 显示原始图像和变换后的图像</span></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>plt.figure(figsize<span class="op">=</span>(<span class="dv">10</span>, <span class="dv">5</span>))</span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>plt.subplot(<span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">1</span>)</span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>plt.imshow(image, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)</span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;Original Image&#39;</span>)</span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>plt.subplot(<span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">2</span>)</span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>plt.imshow(linear_transformed_image, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)</span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;Linear Grayscale Transform&#39;</span>)</span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>plt.subplot(<span class="dv">1</span>, <span class="dv">3</span>, <span class="dv">3</span>)</span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>plt.imshow(gamma_transformed_image, cmap<span class="op">=</span><span class="st">&#39;gray&#39;</span>)</span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>plt.title(<span class="st">&#39;Gamma Transform&#39;</span>)</span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><figure><img src="image-20230725141320822.png" alt="image-20230725141320822" /><figcaption aria-hidden="true">image-20230725141320822</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图像表示&quot;&gt;图像表示&lt;/h2&gt;
&lt;p&gt;图像表示与获取主要包括:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;图像的数字化表示&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;图像是连续的信号,需要通过采样和量化过程变为数字化的离散信号。&lt;/li&gt;
&lt;li&gt;采</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>决策树</title>
    <link href="https://youyouhangyong.github.io/2023/07/22/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>https://youyouhangyong.github.io/2023/07/22/%E5%86%B3%E7%AD%96%E6%A0%91/</id>
    <published>2023-07-22T06:22:41.000Z</published>
    <updated>2023-07-25T03:39:47.970Z</updated>
    
    <content type="html"><![CDATA[<p>决策树是一种常见的监督学习方法,用于分类和回归。</p><p>主要思想:将数据递归地按特征分割,构建一个树形结构,表示输入和输出之间的映射关系。</p><p>特点:非参数化模型,可以处理数值和分类数据,易于理解和解释。</p><p>算法:常用ID3、C4.5、CART等,通过选取最优特征进行数据分割。</p><ol type="1"><li>分割标准:信息增益、GINI指数等,度量分割的好坏。</li><li>停止条件:没有特征可选或达到树的最大深度。</li><li>预测:从根节点开始,测试数据在树中传播,直到达叶节点获得预测。</li><li>剪枝:防止过拟合,后剪枝或预剪枝。</li><li>集成学习:决策树容易过拟合,通常使用随机森林、GBDT等集成学习方法。</li></ol><p>决策树通过递归分割构建树模型,易于理解和解释,是一种常用的基础分类与回归方法。</p><p>下面通过鸢尾花数据来进行一个简单的演示：</p><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>os.environ[<span class="st">&#39;PATH&#39;</span>] <span class="op">=</span> os.pathsep <span class="op">+</span> <span class="vs">r&#39;C:\Program Files (x86)\Graphviz2.38\bin&#39;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.datasets <span class="im">import</span> load_iris</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn <span class="im">import</span> tree</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> graphviz</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>iris <span class="op">=</span> load_iris() <span class="co"># 加载鸢尾花原始数据集</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> iris.data[:, :<span class="dv">2</span>]  <span class="co"># 取前两个特征，已经分割好</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> iris.target <span class="co"># 将特征存储在变量X中，而目标值（类别）存储在变量y中</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> tree.DecisionTreeClassifier()</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> clf.fit(X, y)  <span class="co"># 创建了一个决策树分类器并将数据 X 和对应的目标值y用于训练模型。</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 可视化决策树</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>dot_data <span class="op">=</span> tree.export_graphviz(clf, out_file<span class="op">=</span><span class="va">None</span>)<span class="co"># export_graphviz可以导出决策树的DOT图描述文件</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>graph <span class="op">=</span> graphviz.Source(dot_data)</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>graph.render(<span class="st">&quot;Iris&quot;</span>)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 对新样本进行预测</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(clf.predict([[<span class="fl">2.4</span>, <span class="fl">2.05</span>]]))  <span class="co"># [0]</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(clf.predict([[<span class="fl">4.9</span>, <span class="fl">2.05</span>]]))  <span class="co"># [1]</span></span></code></pre></div><ol type="1"><li><p>iris原始数据集存在于scikit-learn数据集模块中,可以通过load_iris()直接导入使用。</p><ol type="1"><li>iris.data -150x4的NumPy数组,包含4个特征,分别是花萼长度、花萼宽度、花瓣长度、花瓣宽度，这里只取前了两个特征</li><li>iris.target -150x1的NumPy数组,包含每朵鸢尾花对应的类别,0/1/2代表Setosa/Versicolor/Virginica</li></ol></li><li><p>通过代码提取iris的数据特征和目标值进行训练,得到一个决策树分类器模型clf。</p></li><li><p>决策树模型clf包含了训练后的树结构,但此时树结构还没有可视化。</p></li><li><p>使用export_graphviz可以导出决策树的DOT图描述文件。</p></li><li><p>使用graphviz模块将DOT文件转换为图像格式,如PDF。</p></li><li><p>所以最终我们得到了可视化的决策树图像iris.pdf。</p></li></ol><div class="row">    <embed src="/pdf/Iris.pdf" width="100%" height="550" type="application/pdf"></div><p>在决策树的图示中:</p><p><strong>gini</strong>:表示该节点的基尼系数(Giniindex),它衡量了该节点的不纯度,值越小表示样本集合的纯度越高。</p><p><strong>samples</strong>:表示该节点包含的样本数量。</p><p><strong>value</strong>:表示该节点包含的不同类别的样本数目,是个数组。</p><p>例如在根节点的信息:</p><p>gini = 0.667</p><p>samples = 150</p><p>value = [50, 50, 50]</p><p>意义是:</p><p>基尼系数为0.667,表示根节点的不纯度较高。</p><p>总样本量为150,即包含全部的150朵鸢尾花。</p><p>值数组[50, 50, 50]表示共有3类,每类样本数量分别为50。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;决策树是一种常见的监督学习方法,用于分类和回归。&lt;/p&gt;
&lt;p&gt;主要思想:将数据递归地按特征分割,构建一个树形结构,表示输入和输出之间的映射关系。&lt;/p&gt;
&lt;p&gt;特点:非参数化模型,可以处理数值和分类数据,易于理解和解释。&lt;/p&gt;
&lt;p&gt;算法:常用ID3、C4.5、C</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVM</title>
    <link href="https://youyouhangyong.github.io/2023/07/20/SVM/"/>
    <id>https://youyouhangyong.github.io/2023/07/20/SVM/</id>
    <published>2023-07-20T04:37:32.000Z</published>
    <updated>2023-07-20T04:42:28.410Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SVM(支持向量机)</strong>是一种常用的机器学习算法,<strong>主要用于分类问题</strong>,但是也可以扩展做回归任务。</p><p>SVM的主要思想是:</p><ol type="1"><li>将样本<strong>映射</strong>到高维空间中,<strong>转换为线性可分问题</strong>。</li><li>在高维空间中,存在很多分隔超平面可以将不同类样本完全分开。SVM试图找到这些超平面的最优解,即最大间隔超平面,这样可以获得最佳的分类GENERALIZATION（泛化）能力。</li><li>最大间隔超平面可以由支持向量决定,而支持向量就是离分隔超平面最近的样本点。</li><li>通过核函数,SVM可以隐式地实现高维映射,并建立优化问题求解最大间隔超平面,thus分类模型。</li></ol><p>SVM决策超平面的推导过程:</p><p>设训练样本为<span class="math inline">\(\{(x_1, y_1), (x_2, y_2),\cdots, (x_n, y_n)\}\)</span>,其中<span class="math inline">\(x_i \in\mathbb{R}^d\)</span>,<span class="math inline">\(y_i \in\{-1,+1\}\)</span>。</p><p>SVM的目标是找到一个分类超平面:</p><p><span class="math display">\[w^Tx + b = 0\]</span></p><p>将两类样本完全分开,且间隔尽可能大。</p><p>定义样本<spanclass="math inline">\(x_i\)</span>到超平面的函数间隔为:</p><p><span class="math display">\[d_i = \frac{|w^Tx_i +b|}{||w||}\]</span></p><p>则求最大间隔等价于最小化<spanclass="math inline">\(||w||\)</span>,满足约束:</p><p><span class="math display">\[y_i(w^Tx_i + b) \geq 1,i=1,2,\cdots,n\]</span></p><p>即解决以下优化问题:</p><p><span class="math display">\[\min\limits_{w,b}\frac{1}{2}||w||^2\]</span></p><p><span class="math display">\[\text{s.t. } y_i(w^Tx_i + b) \geq 1,i=1,2,\cdots,n\]</span></p><p>引入拉格朗日乘子<span class="math inline">\(\alpha_i \geq0\)</span>,构建拉格朗日函数:</p><p><span class="math display">\[L(w,b,\alpha) = \frac{1}{2}||w||^2 -\sum\limits_{i=1}^{n}{\alpha_i[y_i(w^Tx_i + b) - 1]}\]</span></p><p>对<span class="math inline">\(w,b\)</span>的偏导数等于0可得:</p><p><span class="math display">\[w = \sum\limits_{i=1}^{n}{\alpha_i y_ix_i}\]</span></p><p><span class="math display">\[\sum\limits_{i=1}^{n}{\alpha_i y_i} =0\]</span></p><p>将<span class="math inline">\(w\)</span>代回原问题,得到对偶问题:</p><p><span class="math display">\[\max\limits_{\alpha}\sum\limits_{i=1}^{n}{\alpha_i} -\frac{1}{2}\sum\limits_{i,j=1}^{n}{\alpha_i \alpha_j y_i y_j (x_i \cdotx_j)}\]</span></p><p><span class="math display">\[\text{s.t. } \alpha_i \geq 0,\sum\limits_{i=1}^{n}{\alpha_i y_i} = 0\]</span></p><p>求解得到<spanclass="math inline">\(\alpha\)</span>,则最大间隔超平面为:</p><p><span class="math display">\[w = \sum\limits_{i=1}^{n}{\alpha_i y_ix_i}\]</span> <span class="math display">\[b = \frac{1}{y_i} - w \cdotx_i, \text{对任一支持向量}i\]</span></p><p>将输入样本映射到高维特征空间。SVM试图在高维空间中找到一个最优分类超平面,以获得最佳的分类效果。</p><p>通过核函数实现了从低维到高维的隐式映射。常见的核函数有线性核、多项式核、Gauss核(RBF核)等。</p><p>通过求解对偶问题,只需要输入数据的内积,而输入数据的高维映射可以通过核函数实现。</p><p>这样就可以在低维输入空间构建最优分隔超平面,而实际上是在高维特征空间实现,从而处理非线性分类问题。</p><p>常见的GaussRBF核将输入映射到无穷维,可以看成在高维空间构建一个泛化能力最强的分类模型。</p><p>核技巧扩展了SVM的适用范围,使其不仅适用于线性可分问题,也可用于复杂的非线性分类问题。</p><p>通过选择不同的核函数,可以灵活地处理各种类型的数据集。</p><p>核技巧是SVM强大的原因之一,它寻求高维映射以求分类的最优解,却只需要计算低维数据的内积,thus有效实现了“维度灾难”的解决。</p><hr /><p>以下是一个在二维求解决策平面的代码示例：</p><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn <span class="im">import</span> svm</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 生成样本数据</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">0</span>)</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> np.r_[np.random.randn(<span class="dv">20</span>, <span class="dv">2</span>) <span class="op">-</span> [<span class="dv">2</span>, <span class="dv">2</span>], np.random.randn(<span class="dv">20</span>, <span class="dv">2</span>) <span class="op">+</span> [<span class="dv">2</span>, <span class="dv">2</span>]]</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> [<span class="dv">0</span>] <span class="op">*</span> <span class="dv">20</span> <span class="op">+</span> [<span class="dv">1</span>] <span class="op">*</span> <span class="dv">20</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a><span class="co"># 拟合SVM模型</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> svm.SVC(kernel<span class="op">=</span><span class="st">&#39;linear&#39;</span>)</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>clf.fit(X, y)</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制样本点</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>plt.scatter(X[:, <span class="dv">0</span>], X[:, <span class="dv">1</span>], c<span class="op">=</span>y, s<span class="op">=</span><span class="dv">30</span>, cmap<span class="op">=</span>plt.cm.Paired)</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制决策边界</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> plt.gca()</span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>xlim <span class="op">=</span> ax.get_xlim()</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>ylim <span class="op">=</span> ax.get_ylim()</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建网格采样点</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>xx <span class="op">=</span> np.linspace(xlim[<span class="dv">0</span>], xlim[<span class="dv">1</span>], <span class="dv">30</span>)</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>yy <span class="op">=</span> np.linspace(ylim[<span class="dv">0</span>], ylim[<span class="dv">1</span>], <span class="dv">30</span>)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>YY, XX <span class="op">=</span> np.meshgrid(yy, xx)</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>xy <span class="op">=</span> np.vstack([XX.ravel(), YY.ravel()]).T</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>Z <span class="op">=</span> clf.decision_function(xy).reshape(XX.shape)</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制决策边界</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>ax.contour(XX, YY, Z, colors<span class="op">=</span><span class="st">&#39;k&#39;</span>, levels<span class="op">=</span>[<span class="op">-</span><span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>], alpha<span class="op">=</span><span class="fl">0.5</span>, linestyles<span class="op">=</span>[<span class="st">&#39;--&#39;</span>, <span class="st">&#39;-&#39;</span>, <span class="st">&#39;--&#39;</span>])</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制支持向量</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>ax.scatter(clf.support_vectors_[:, <span class="dv">0</span>], clf.support_vectors_[:, <span class="dv">1</span>], s<span class="op">=</span><span class="dv">100</span>, linewidth<span class="op">=</span><span class="dv">1</span>, facecolors<span class="op">=</span><span class="st">&#39;none&#39;</span>,</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>           edgecolors<span class="op">=</span><span class="st">&#39;k&#39;</span>)</span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p><a href="https://imgse.com/i/pC7xzjJ"><imgsrc="https://s1.ax1x.com/2023/07/20/pC7xzjJ.png"alt="pC7xzjJ.png" /></a></p><p>在这个例子中,我们先随机生成了两类二维样本数据,然后训练一个线性核SVM模型,并画出了决策边界。支持向量也被标记出来了。</p><hr /><p>同样可以求解非线性问题：</p><div class="sourceCode" id="cb2"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn <span class="im">import</span> svm</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="co"># 生成一个环形分布的数据集</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">1</span>)</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> np.vstack((np.random.randn(<span class="dv">150</span>, <span class="dv">2</span>) <span class="op">+</span> [<span class="dv">1</span>, <span class="dv">2</span>],</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>               np.random.randn(<span class="dv">150</span>, <span class="dv">2</span>) <span class="op">-</span> [<span class="dv">1</span>, <span class="dv">2</span>]))</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> [<span class="dv">0</span>] <span class="op">*</span> <span class="dv">150</span> <span class="op">+</span> [<span class="dv">1</span>] <span class="op">*</span> <span class="dv">150</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="co"># 使用RBF核的SVM</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> svm.SVC(kernel<span class="op">=</span><span class="st">&#39;rbf&#39;</span>)</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>clf.fit(X, y)</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制样本点</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>plt.scatter(X[:, <span class="dv">0</span>], X[:, <span class="dv">1</span>], c<span class="op">=</span>y, s<span class="op">=</span><span class="dv">30</span>, cmap<span class="op">=</span>plt.cm.Paired)</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制决策边界</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> plt.gca()</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>xlim <span class="op">=</span> ax.get_xlim()</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>ylim <span class="op">=</span> ax.get_ylim()</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co"># 创建网格采样点</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>xx, yy <span class="op">=</span> np.meshgrid(np.linspace(xlim[<span class="dv">0</span>], xlim[<span class="dv">1</span>], <span class="dv">200</span>),</span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>                     np.linspace(ylim[<span class="dv">0</span>], ylim[<span class="dv">1</span>], <span class="dv">200</span>))</span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>Z <span class="op">=</span> clf.decision_function(np.c_[xx.ravel(), yy.ravel()])</span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>Z <span class="op">=</span> Z.reshape(xx.shape)</span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>ax.contourf(xx, yy, Z, alpha<span class="op">=</span><span class="fl">0.75</span>, cmap<span class="op">=</span>plt.cm.Paired)</span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>ax.set_xlim(xlim)</span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>ax.set_ylim(ylim)</span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p><a href="https://imgse.com/i/pC7z14f"><imgsrc="https://s1.ax1x.com/2023/07/20/pC7z14f.png"alt="pC7z14f.png" /></a></p><p>通过构造一个环形分布的二维非线性数据,然后使用RBF核的SVM进行建模。可以看到SVM学会了一个非线性的决策边界将两类不同程度的区分开。</p><hr /><p>生成了200个样本的二维数据集,然后进行了三维可视化。通过升维操作,SVM可以学习到一个线性的决策面对这些点进行分类。</p><div class="sourceCode" id="cb3"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> mpl_toolkits.mplot3d <span class="im">import</span> Axes3D</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.svm <span class="im">import</span> SVC</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 生成二维非线性可分数据集</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">100</span>)</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>X1 <span class="op">=</span> np.random.randn(<span class="dv">100</span>, <span class="dv">2</span>) <span class="op">+</span> [<span class="dv">2</span>, <span class="dv">2</span>]</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>X2 <span class="op">=</span> np.random.randn(<span class="dv">100</span>, <span class="dv">2</span>) <span class="op">-</span> [<span class="dv">2</span>, <span class="dv">2</span>]</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> np.vstack((X1, X2)).astype(np.float32)</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.array([<span class="dv">0</span>] <span class="op">*</span> <span class="dv">100</span> <span class="op">+</span> [<span class="dv">1</span>] <span class="op">*</span> <span class="dv">100</span>)</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co"># 升维到三维</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>X_3d <span class="op">=</span> np.hstack((X, (X[:, <span class="dv">0</span>]<span class="op">**</span><span class="dv">2</span> <span class="op">+</span> X[:, <span class="dv">1</span>]<span class="op">**</span><span class="dv">2</span>)[:, <span class="va">None</span>]))</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 三维可视化</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>fig <span class="op">=</span> plt.figure()</span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> fig.add_subplot(<span class="dv">111</span>, projection<span class="op">=</span><span class="st">&#39;3d&#39;</span>)</span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>ax.scatter(X_3d[:, <span class="dv">0</span>], X_3d[:, <span class="dv">1</span>], X_3d[:, <span class="dv">2</span>], c<span class="op">=</span>y, s<span class="op">=</span><span class="dv">10</span>, cmap<span class="op">=</span>plt.cm.Spectral)</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="co"># 在三维空间构建最大间隔超平面</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> SVC(kernel<span class="op">=</span><span class="st">&#39;linear&#39;</span>)</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>clf.fit(X_3d, y)</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="co"># 绘制三维决策平面</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>x1_min, x1_max <span class="op">=</span> X[:, <span class="dv">0</span>].<span class="bu">min</span>(), X[:, <span class="dv">0</span>].<span class="bu">max</span>()</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>x2_min, x2_max <span class="op">=</span> X[:, <span class="dv">1</span>].<span class="bu">min</span>(), X[:, <span class="dv">1</span>].<span class="bu">max</span>()</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>x1, x2 <span class="op">=</span> np.mgrid[x1_min:x1_max:<span class="ot">200j</span>, x2_min:x2_max:<span class="ot">200j</span>]</span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>x_grid <span class="op">=</span> np.stack((x1.ravel(), x2.ravel(), x1.ravel() <span class="op">**</span> <span class="dv">2</span> <span class="op">+</span> x2.ravel() <span class="op">**</span> <span class="dv">2</span>), axis<span class="op">=</span><span class="dv">1</span>)</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>y_hat <span class="op">=</span> clf.decision_function(x_grid)</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>y_grid <span class="op">=</span> y_hat.reshape((<span class="dv">200</span>, <span class="dv">200</span>))</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>ax.plot_surface(x1, x2, y_grid, alpha<span class="op">=</span><span class="fl">0.5</span>)</span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p><a href="https://imgse.com/i/pCHSwsH"><imgsrc="https://s1.ax1x.com/2023/07/20/pCHSwsH.png"alt="pCHSwsH.png" /></a></p><p>SVM(支持向量机)的主要思想和实现方法可以概括如下:</p><ol type="1"><li><p>思想:SVM试图找到一个最优分类超平面,使不同类样本Reality隔的边界尽可能大,从而获得最佳的 GENERALIZATION能力。</p></li><li><p>实现:将样本映射到高维特征空间,转换为线性可分问题。在高维空间中求解最大间隔超平面作为决策面。</p></li><li><p>优化目标:构建约束优化问题,最小化||w||并满足分类约束。求解得到最优w和b确定超平面。</p></li><li><p>对偶问题:引入拉格朗日乘子α,将原问题转换为对偶问题,求解α即可得到最优超平面。</p></li><li><p>核技巧:通过核函数计算输入样本的内积,实现高维映射。常用核有线性核、多项式核、GaussRBF核等。</p></li><li><p>模型参数:主要就是支持向量及对应的α。决策函数只依赖支持向量。</p></li><li><p>实现方法:一般通过求解相应的凸二次规划问题获得最优α,然后求出w,b。常用SMO算法加速训练。</p></li><li><p>应用:可处理线性和非线性分类问题。还可以扩展到回归任务。</p></li></ol><p>SVM通过间隔最大化寻求最佳分类超平面,核技巧实现高维映射,是一种流行的分类与回归方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;SVM(支持向量机)&lt;/strong&gt;是一种常用的机器学习算法,&lt;strong&gt;主要用于分类问题&lt;/strong&gt;,但是也可以扩展做回归任务。&lt;/p&gt;
&lt;p&gt;SVM的主要思想是:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;将样本&lt;strong&gt;映射&lt;</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="https://youyouhangyong.github.io/2023/07/18/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>https://youyouhangyong.github.io/2023/07/18/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</id>
    <published>2023-07-18T05:37:28.000Z</published>
    <updated>2023-07-18T06:57:25.354Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑回归本质上是一个<strong>分类模型</strong>,用于预测输入数据属于哪个类别的<strong>概率</strong>。其基本思想是:</p><ol type="1"><li>构建一个线性函数,输入是样本特征,输出是样例属于某类的对数概率。</li><li>将线性函数的输出通过sigmoid函数转换为概率值。</li><li>根据最大概率,对样本进行分类预测。</li><li>通过最大化似然估计或最小化交叉熵损失,训练线性模型的参数。</li></ol><p>具体实现原理:</p><p>假设逻辑回归为<strong>二分类</strong>,线性函数为:</p><p><span class="math display">\[z = w_1 x_1 + w_2 x_2 + ... + w_n x_n +b\]</span></p><p>其中:</p><ul><li><span class="math inline">\(z\)</span> - 模型的预测值</li><li><span class="math inline">\(x_1, x_2,...,x_n\)</span> - <spanclass="math inline">\(n\)</span>个特征变量</li><li><span class="math inline">\(w_1, w_2,...,w_n\)</span> - <spanclass="math inline">\(n\)</span>个特征变量对应的模型参数权重</li><li><span class="math inline">\(b\)</span> - 模型的偏置项</li></ul><p>将z代入sigmoid函数求概率:</p><p><span class="math display">\[p = \frac{1}{1+e^{-z}}\]</span></p><p>其中: p表示输入样本为正类的概率。</p><p>则逻辑回归的损失函数为负对数似然或交叉熵。</p><p>通过梯度下降算法训练w和b,最小化损失,完成模型。</p><p>预测时,计算新样本的概率p,如果p&gt;0.5则预测为正类,否则为负类。</p><p>在逻辑回归模型中,常用的损失函数有以下两种:</p><ol type="1"><li>对数损失(LogLoss):也称对数似然损失函数,定义为负的对数似然函数,表达式为:</li></ol><p><span class="math display">\[Loss = -\frac{1}{N}\sum_{i=1}^N\left[y_i\log(p_i) + (1-y_i)\log(1-p_i) \right]\]</span></p><p>其中:- <span class="math inline">\(N\)</span> - 样本数量</p><ul><li><span class="math inline">\(y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的真实标签,取值为0或1</li><li><span class="math inline">\(p_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测概率。求和是对所有样本进行遍历。</li></ul><ol type="1"><li>交叉熵损失(CrossEntropy):它扩展了对数损失到多分类问题,表达式为:</li></ol><p><span class="math display">\[Loss = -\frac{1}{N} \sum_{i=1}^{N}y_{i}\log(p_{i})\]</span></p><p>其中:- <span class="math inline">\(N\)</span> - 样本数量 - <spanclass="math inline">\(y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的one-hot编码标签向量 - <spanclass="math inline">\(p_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测概率向量</p><p><span class="math inline">\(y_i\)</span>是one-hot向量,只有对应真实类别的单个元素值为1。<spanclass="math inline">\(p_i\)</span> 是预测概率向量。</p><p><span class="math inline">\(y_i\log(p_i)\)</span>计算两个概率分布差异的交叉熵。</p><p>求和后取负号得到交叉熵损失。</p><p><strong>Sigmoid函数的介绍：</strong></p><p>Sigmoid函数将任意实数映射到(0, 1)区间内,表达为上述分数形式。</p><p>当输入<span class="math inline">\(z\)</span>趋近正无穷大时,<spanclass="math inline">\(e^{-z}\)</span>趋近0,分母趋近1,所以<spanclass="math inline">\(p\)</span>趋近1。</p><p>当输入<span class="math inline">\(z\)</span>趋近负无穷大时,<spanclass="math inline">\(e^{-z}\)</span>趋近无穷大,分母趋近无穷大,所以<spanclass="math inline">\(p\)</span>趋近0。</p><p>sigmoid函数的这个S形曲线图形,利用它可以将任意值映射到概率之间,所以常被用作神经网络中门限函数和逻辑回归中概率输出函数。</p><p><a href="https://imgse.com/i/pCTVfNd"><imgsrc="https://s1.ax1x.com/2023/07/18/pCTVfNd.png"alt="pCTVfNd.png" /></a></p><p>抽象的说：逻辑回归=线性回归+Sigmoid函数</p><p>构造两个聚类式的高斯分布数据,用于逻辑回归分类:</p><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LogisticRegression</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>mean1 <span class="op">=</span> [<span class="dv">1</span>, <span class="dv">1</span>]</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>mean2 <span class="op">=</span> [<span class="op">-</span><span class="dv">1</span>, <span class="op">-</span><span class="dv">1</span>]</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>cov <span class="op">=</span> [[<span class="dv">1</span>, <span class="dv">0</span>], [<span class="dv">0</span>, <span class="dv">1</span>]] </span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>X1 <span class="op">=</span> np.random.multivariate_normal(mean1, cov, <span class="dv">100</span>)</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>X2 <span class="op">=</span> np.random.multivariate_normal(mean2, cov, <span class="dv">100</span>)</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>X <span class="op">=</span> np.concatenate((X1, X2)) </span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.array([<span class="dv">0</span>]<span class="op">*</span><span class="dv">100</span> <span class="op">+</span> [<span class="dv">1</span>]<span class="op">*</span><span class="dv">100</span>)</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a><span class="co"># 训练和预测</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>clf <span class="op">=</span> LogisticRegression()</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>clf.fit(X, y) </span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="co"># 画出数据分布和决策边界</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>plt.scatter(X[:,<span class="dv">0</span>], X[:,<span class="dv">1</span>], c<span class="op">=</span>y)</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>ax <span class="op">=</span> plt.gca()  </span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>xlim <span class="op">=</span> ax.get_xlim()</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>ylim <span class="op">=</span> ax.get_ylim()</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>xx <span class="op">=</span> np.linspace(xlim[<span class="dv">0</span>], xlim[<span class="dv">1</span>], <span class="dv">30</span>)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>yy <span class="op">=</span> np.linspace(ylim[<span class="dv">0</span>], ylim[<span class="dv">1</span>], <span class="dv">30</span>)</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>YY, XX <span class="op">=</span> np.meshgrid(yy, xx)</span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>xy <span class="op">=</span> np.vstack([XX.ravel(), YY.ravel()]).T</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>Z <span class="op">=</span> clf.decision_function(xy).reshape(XX.shape)</span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>ax.contour(XX, YY, Z, colors<span class="op">=</span><span class="st">&#39;k&#39;</span>, levels<span class="op">=</span>[<span class="op">-</span><span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">1</span>], alpha<span class="op">=</span><span class="fl">0.5</span>)</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p>这里构造了两个高斯分布,<strong>分别围绕(1,1)和(-1,-1)生成类0和类1的数据</strong>。可以看到逻辑回归学习到了一个合适的决策边界将两个类别尽量分开。</p><p><a href="https://imgse.com/i/pCTZXqO"><imgsrc="https://s1.ax1x.com/2023/07/18/pCTZXqO.png"alt="pCTZXqO.png" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逻辑回归本质上是一个&lt;strong&gt;分类模型&lt;/strong&gt;,用于预测输入数据属于哪个类别的&lt;strong&gt;概率&lt;/strong&gt;。其基本思想是:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;构建一个线性函数,输入是样本特征,输出是样例属于某类的对数概率。&lt;/li&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>线性回归</title>
    <link href="https://youyouhangyong.github.io/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://youyouhangyong.github.io/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
    <published>2023-07-16T07:48:31.000Z</published>
    <updated>2023-07-18T06:57:33.371Z</updated>
    
    <content type="html"><![CDATA[<p>线性回归是一种基础而且常用的机器学习算法，顾名思义是一个回归模型。</p><p>它的假设是，<strong>输出y可以被输入x以线性的方式预测</strong><code>y = wx + b</code>,</p><p>其中，w和b是模型要学习的参数。</p><p><strong>线性回归的目标是求解w和b</strong>，使得预测输出y与真实输出之间的误差最小。</p><p>线性回归的损失函数通常使用均方误差作为衡量指标:</p><p><strong><span class="math display">\[MSE = \frac{1}{n} \sum_{i=1}^{n}(Y_i - \hat{Y}_i)^2\]</span></strong></p><p>其中:</p><ul><li><span class="math inline">\(n\)</span> - 样本数量</li><li><span class="math inline">\(Y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的真实值</li><li><span class="math inline">\(\hat{Y}_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测值</li><li><span class="math inline">\(\sum\)</span> -求和符号,对所有样本求和解析:</li><li><span class="math inline">\((Y_i - \hat{Y}_i)\)</span> 表示第<spanclass="math inline">\(i\)</span>个样本的预测误差,即真实值与预测值之</li><li><span class="math inline">\((Y_i - \hat{Y}_i)^2\)</span>对预测误差进行平方,避免正负误差相抵消,误差可能为负也可能为正，取平方有一个特性，它惩罚更大的错误更多。</li><li><span class="math inline">\(\frac{1}{n}\)</span>求样本平均值,防止样本数量影响所以MSE是每个样本平方误差之和的平均值,反映了模型预测值与真实值的偏差程度。</li></ul><p>下面是一个简单的示例，搞明白线性回归是干什么的：</p><div class="sourceCode" id="cb1"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="co"># 生成数据</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co"># x和y分别是一个一维数组,表示样本的特征和标签</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.array([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>])</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.array([<span class="dv">3</span>, <span class="dv">5</span>, <span class="dv">7</span>, <span class="dv">9</span>, <span class="dv">11</span>])</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a><span class="co"># w和b表示线性模型的参数,初始化为0</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>w <span class="op">=</span> <span class="dv">0</span> </span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>b <span class="op">=</span> <span class="dv">0</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="co"># lr是梯度下降的学习率,epochs是训练轮数</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>lr <span class="op">=</span> <span class="fl">0.01</span> </span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>epochs <span class="op">=</span> <span class="dv">1000</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a><span class="co"># 训练</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(epochs):</span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    y_pred <span class="op">=</span> w<span class="op">*</span>x <span class="op">+</span> b <span class="co">#计算预测值   </span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    loss <span class="op">=</span> np.square(y_pred <span class="op">-</span> y).mean()</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    w <span class="op">=</span> w <span class="op">-</span> lr<span class="op">*</span><span class="dv">2</span><span class="op">/</span><span class="bu">len</span>(x) <span class="op">*</span> np.<span class="bu">sum</span>((y_pred <span class="op">-</span> y)<span class="op">*</span>x) </span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    b <span class="op">=</span> b <span class="op">-</span> lr<span class="op">*</span><span class="dv">2</span><span class="op">/</span><span class="bu">len</span>(x) <span class="op">*</span> np.<span class="bu">sum</span>((y_pred <span class="op">-</span> y))</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(w, b)</span></code></pre></div><p>结果</p><pre><code>2.003880582342283 0.9859898664422495</code></pre><p>步骤：</p><ol type="1"><li>生成测试数据:<strong>x</strong>和<strong>y</strong>数组分别代表<strong>输入</strong>和<strong>输出</strong>,这里生成了5个数据点。</li><li>参数初始化:模型参数w和b初始化为0。</li><li>定义超参数:<strong>学习率</strong>lr为0.01,<strong>训练轮数</strong>epochs为1000。</li><li>训练:for循环表示进行1000轮训练,每轮都进行以下步骤:</li></ol><ul><li><ol type="1"><li>根据当前参数w和b,计算预测输出y_pred。</li></ol></li><li><ol start="2" type="1"><li>计算损失函数loss,这里使用<strong>均方误差</strong>。</li></ol></li><li><ol start="3" type="1"><li>根据损失函数<strong>求导</strong>得出w和b的梯度。</li></ol></li><li><ol start="4" type="1"><li>使用梯度下降算法更新w和b,其中lr是学习率。</li></ol></li></ul><p>​5. 打印出训练后的w和b参数。</p><p>分析：</p><p>针对这个线性回归代码,最理想的输出结果是:</p><pre><code>w = 2 b = 1</code></pre><p>因为我们生成的示例数据符合这样一个模型:</p><p><code>y = 2x + 1 y = 2x + 1</code></p><p>也就是说,真实的模型参数应该是: w(权重参数)= 2 b(偏置参数)= 1</p><p>如果模型训练完美,经过足够多的迭代优化,我们期望的参数w和b会收敛到这两个值。</p><p>具体来看,在这个代码示例中:</p><div class="sourceCode" id="cb4"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.array([<span class="dv">1</span>, <span class="dv">2</span>, <span class="dv">3</span>, <span class="dv">4</span>, <span class="dv">5</span>])</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> np.array([<span class="dv">3</span>, <span class="dv">5</span>, <span class="dv">7</span>, <span class="dv">9</span>, <span class="dv">11</span>])</span></code></pre></div><p>这些样本点正好符合公式 y = 2x + 1。</p><p>所以当代码训练结束后,如果我们的w和b分别收敛到2和1,就说明模型训练是成功的,完美拟合了这个线性关系。</p><p>其中调节线性回归模型的学习率会对训练过程和结果产生不同的影响:</p><ol type="1"><li>学习率增加:</li></ol><ul><li><p>收敛速度会变快,需要的迭代轮数会减少。</p></li><li><p>但是容易产生参数的振荡,难以收敛到稳定优化的结果。</p></li><li><p>最终模型的预测效果可能会变差。</p></li></ul><ol start="2" type="1"><li>学习率减小:</li></ol><ul><li><p>收敛速度会变慢,需要更多的迭代轮数。</p></li><li><p>参数更新会更加稳定和平滑。</p></li><li><p>最终可以收敛到一个较优的模型,预测效果更好。</p></li><li><p>但是计算代价更高,需要花费更多时间。</p></li></ul><p>所以学习率的选择需要找到最佳平衡点:</p><ul><li><p>学习率不能太大,否则容易产生参数振荡。</p></li><li><p>学习率也不能太小,否则收敛速度过慢。</p></li></ul><p>一个通用的方法是从一个较小的学习率开始,如果发现收敛速度过慢,可以适当增加学习率;如果出现振荡,则应该降低学习率。</p><p>下面再给出一个较复杂的例子：</p><p>这个线性回归的代码示例:</p><div class="sourceCode" id="cb5"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span></code></pre></div><p>导入所需的numpy和matplotlib库。</p><div class="sourceCode" id="cb6"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">1</span>)</span></code></pre></div><p>设置随机数种子,这样可以重现结果。</p><div class="sourceCode" id="cb7"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.uniform(<span class="dv">0</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">2</span><span class="op">*</span>x <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> np.random.normal(<span class="dv">0</span>, <span class="dv">10</span>, <span class="dv">100</span>)</span></code></pre></div><p>使用numpy随机生成100组训练数据,x范围是0到100,y计算方式是y=2x+3加上正态噪声。</p><div class="sourceCode" id="cb8"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> LinearRegression()</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>model.fit(x.reshape(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>), y) </span></code></pre></div><p>使用scikit-learn中的LinearRegression模型,拟合训练数据x和y。需要reshapex 为二维。</p><div class="sourceCode" id="cb9"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>x_test <span class="op">=</span> np.linspace(<span class="dv">0</span>, <span class="dv">100</span>, <span class="dv">100</span>).reshape(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>)</span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>y_pred <span class="op">=</span> model.predict(x_test)</span></code></pre></div><p>生成0-100范围内的100个预测点x_test,用训练好的模型model预测对应的y值,得到y_pred。</p><div class="sourceCode" id="cb10"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>plt.scatter(x, y)</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>plt.plot(x_test, y_pred, color<span class="op">=</span><span class="st">&#39;r&#39;</span>) </span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;x&#39;</span>)</span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;y&#39;</span>)</span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p>使用matplotlib画出训练数据的散点图,以及用红色线画出预测的线性回归直线。增加坐标标签。</p><p>这样我们就可以直观地看到了模型对数据的拟合效果。</p><p>完整代码：</p><div class="sourceCode" id="cb11"><preclass="sourceCode python"><code class="sourceCode python"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> numpy <span class="im">as</span> np</span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> matplotlib.pyplot <span class="im">as</span> plt</span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a><span class="co"># 生成100组随机数据</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>np.random.seed(<span class="dv">1</span>)</span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>x <span class="op">=</span> np.random.uniform(<span class="dv">0</span>, <span class="dv">100</span>, <span class="dv">100</span>)</span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>y <span class="op">=</span> <span class="dv">2</span><span class="op">*</span>x <span class="op">+</span> <span class="dv">3</span> <span class="op">+</span> np.random.normal(<span class="dv">0</span>, <span class="dv">10</span>, <span class="dv">100</span>) </span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a><span class="co"># 拟合线性回归模型</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> sklearn.linear_model <span class="im">import</span> LinearRegression</span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>model <span class="op">=</span> LinearRegression()</span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>model.fit(x.reshape(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>), y)</span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a><span class="co"># 预测</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>x_test <span class="op">=</span> np.linspace(<span class="dv">0</span>, <span class="dv">100</span>, <span class="dv">100</span>).reshape(<span class="op">-</span><span class="dv">1</span>,<span class="dv">1</span>)</span><span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>y_pred <span class="op">=</span> model.predict(x_test)</span><span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a><span class="co"># 画图</span></span><span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>plt.scatter(x, y) </span><span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>plt.plot(x_test, y_pred, color<span class="op">=</span><span class="st">&#39;r&#39;</span>)</span><span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>plt.xlabel(<span class="st">&#39;x&#39;</span>)</span><span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>plt.ylabel(<span class="st">&#39;y&#39;</span>)</span><span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>plt.show()</span></code></pre></div><p>我们先生成了100组随机数据,其中y满足公式y=2x+3加上一点正态扰动。</p><p>然后我们使用scikit-learn中的LinearRegression模型对数据进行线性回归拟合。</p><p>最后我们生成100个等间隔的x,用模型预测对应的y,并画出散点图和预测的线性回归直线。</p><p><a href="https://imgse.com/i/pCIMXMq"><imgsrc="https://s1.ax1x.com/2023/07/16/pCIMXMq.png"alt="pCIMXMq.png" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性回归是一种基础而且常用的机器学习算法，顾名思义是一个回归模型。&lt;/p&gt;
&lt;p&gt;它的假设是，&lt;strong&gt;输出y可以被输入x以线性的方式预测&lt;/strong&gt;
&lt;code&gt;y = wx + b&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;其中，w和b是模型要学习的参数。&lt;/p&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Front-matter示例</title>
    <link href="https://youyouhangyong.github.io/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/"/>
    <id>https://youyouhangyong.github.io/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/</id>
    <published>2023-07-03T06:53:50.000Z</published>
    <updated>2023-07-03T07:26:59.292Z</updated>
    
    <content type="html"><![CDATA[]]></content>
    
    
      
      
    <summary type="html">
</summary>
      
    
    
    
    <category term="Hexo" scheme="https://youyouhangyong.github.io/categories/Hexo/"/>
    
    
    <category term="Markdown" scheme="https://youyouhangyong.github.io/tags/Markdown/"/>
    
    <category term="Hexo" scheme="https://youyouhangyong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实习</title>
    <link href="https://youyouhangyong.github.io/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/"/>
    <id>https://youyouhangyong.github.io/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-06-30T10:42:10.000Z</published>
    <updated>2023-07-03T07:21:33.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实习内容">实习内容</h1><h2 id="一马踏棋盘">一、马踏棋盘</h2><h4 id="问题描述"><strong>问题描述</strong></h4><p>将马随机放在国际象棋的8×8棋盘[0～7][0～7]的某个方格中，马按走棋规则进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格。编制递归和非递归程序，求出马的行走路线，并按求出的行走路线，将数字1，2，…，64依次填入一个8×8的方阵，输出之。</p><h4 id="程序代码"><strong>程序代码</strong></h4><p><strong>棋盘定义</strong></p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define ROW </span><span class="dv">8</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define COL </span><span class="dv">8</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#define MAX_STEPS </span>ROW<span class="op">*</span><span class="pp">COL</span></span></code></pre></div><p><strong>定义每次的改变的相对坐标</strong></p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> move_x<span class="op">[</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">2</span><span class="op">,</span> <span class="op">-</span><span class="dv">2</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span> <span class="op">&#125;;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> move_y<span class="op">[</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">2</span><span class="op">,</span> <span class="op">-</span><span class="dv">2</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span> <span class="op">&#125;;</span></span></code></pre></div><p>方法1：<strong>DFS（递归）</strong></p><blockquote><p><code>Dfs</code> 函数是深度优先遍历函数，使用递归方式实现。</p><p>接受二维数组 <code>path</code> 表示棋盘，<code>m</code> 和<code>n</code> 表示当前位置的坐标，<code>edge</code>表示棋盘边长，<code>count</code> 表示已经访问的格子数。</p><p>函数首先判断是否已经访问了所有的格子，如果是则直接返回。</p><p>然后判断当前位置是否在棋盘范围内且未被访问过，如果是则增加已访问的格子数，将该位置标记为已访问，并进行递归调用，以便继续向下一位置探索。</p></blockquote><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//深度优先遍历（递归）</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> Dfs<span class="op">(</span><span class="dt">int</span> path<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">],</span> <span class="dt">int</span> m<span class="op">,</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span> edge<span class="op">,</span> <span class="dt">int</span> count<span class="op">)</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>count <span class="op">&gt;=</span> edge <span class="op">*</span> edge<span class="op">)</span><span class="co">//如果走过的格子数大于等于棋盘数</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>m <span class="op">&lt;=</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> n <span class="op">&lt;=</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> m <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> path<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span><span class="co">//位置（m,n）在棋盘上，并且没有被走过</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        count<span class="op">++;</span><span class="co">//走过的格子数+1</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        path<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">=</span> count<span class="op">;</span><span class="co">//把该位置的值改为第几个走过的格子</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>            Dfs<span class="op">(</span>path<span class="op">,</span> m <span class="op">+</span> move_x<span class="op">[</span>i<span class="op">],</span> n <span class="op">+</span> move_y<span class="op">[</span>i<span class="op">],</span> edge<span class="op">,</span> count<span class="op">);</span><span class="co">//进行递归，直到走过的格子数大于等于棋盘数</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span>                                                       </span></code></pre></div><p>方法2：<strong>DFS+贪心算法（递归）</strong></p><blockquote><p><code>Dfs_tx</code>函数在深度优先遍历的基础上加入了贪心算法的思想，使用递归方式实现。</p><p>根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，</p><p>并选择具有最小可行方向数量的方向作为下一步的移动方向。</p><p>最后进行递归调用，继续向下一个位置探索。</p></blockquote><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> Dfs_tx<span class="op">(</span><span class="dt">int</span> flag<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">],</span> <span class="dt">int</span> path<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">],</span> <span class="dt">int</span> m<span class="op">,</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span> edge<span class="op">,</span> <span class="dt">int</span> count<span class="op">,</span> <span class="dt">int</span> found<span class="op">)</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>found<span class="op">)</span><span class="cf">return</span><span class="op">;</span><span class="co">// 如果已经找到完整路径，直接返回 </span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>count <span class="op">&gt;=</span> edge <span class="op">*</span> edge<span class="op">)</span><span class="co">// 如果已经访问了所有方格</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        found <span class="op">+=</span> <span class="dv">1</span><span class="op">;</span><span class="co">// 将found标志设置为1，表示已找到完整路径</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>                path<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">=</span> flag<span class="op">[</span>i<span class="op">][</span>j<span class="op">];</span><span class="co">// 将当前路径复制到path数组中</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>m <span class="op">&gt;</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">||</span> n <span class="op">&gt;</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">||</span> m <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> n <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> flag<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span><span class="cf">return</span><span class="op">;</span><span class="co">// 如果当前位置超出边界或已被访问过，则返回</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    count<span class="op">++;</span><span class="co">// 增加计数器(初始为0)</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    flag<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">=</span> count<span class="op">;</span><span class="co">// 标记当前位置为已访问</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">//贪心部分，计算局部（两步）最优方向</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> count_next<span class="op">[</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="op">-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span><span class="op">,-</span><span class="dv">1</span> <span class="op">&#125;;</span><span class="co">// 存储每个可行方向的下一步可行方向的数量</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> m_next <span class="op">=</span> m <span class="op">+</span> move_x<span class="op">[</span>i<span class="op">];</span><span class="co">// 下一步的 x坐标</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> n_next <span class="op">=</span> n <span class="op">+</span> move_y<span class="op">[</span>i<span class="op">];</span><span class="co">// 下一步的 y坐标</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>m_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> n_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> m_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> flag<span class="op">[</span>m_next<span class="op">][</span>n_next<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span><span class="co">//下一步的位置，未被访问则</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>            count_next<span class="op">[</span>i<span class="op">]</span> <span class="op">++;</span><span class="co">// 增加下一步可行方向的数量</span></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#123;</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> m_next_next <span class="op">=</span> m_next <span class="op">+</span> move_x<span class="op">[</span>j<span class="op">];</span><span class="co">// 下一步的 下一步的 x坐标</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> n_next_next <span class="op">=</span> n_next <span class="op">+</span> move_y<span class="op">[</span>j<span class="op">];</span><span class="co">// 下一步的 下一步的 y坐标</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>m_next_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> n_next_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> m_next_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n_next_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> flag<span class="op">[</span>m_next_next<span class="op">][</span>n_next_next<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span><span class="co">//下一步的下一步的位置，未被访问则</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>                    count_next<span class="op">[</span>i<span class="op">]++;</span><span class="co">// 增加下一步可行方向的数量*</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> position <span class="op">=</span> <span class="dv">0</span><span class="op">;</span><span class="co">// 选择下一步的最优方向</span></span><span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span><span class="co">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>count_next<span class="op">[</span>position<span class="op">]</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span><span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>            position <span class="op">=</span> i<span class="op">;</span></span><span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">((</span>count_next<span class="op">[</span>i<span class="op">]</span> <span class="op">&lt;</span> count_next<span class="op">[</span>position<span class="op">])</span> <span class="op">&amp;&amp;</span> count_next<span class="op">[</span>i<span class="op">]</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span><span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a>            position <span class="op">=</span> i<span class="op">;</span></span><span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>    Dfs_tx<span class="op">(</span>flag<span class="op">,</span> path<span class="op">,</span> m <span class="op">+</span> move_x<span class="op">[</span>position<span class="op">],</span> n <span class="op">+</span> move_y<span class="op">[</span>position<span class="op">],</span> edge<span class="op">,</span> count<span class="op">,</span> found<span class="op">);</span></span><span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>    flag<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span><span class="co">// 标记当前位置为未访问，以便在下一次递归中重新考虑该位置</span></span><span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p>方法3：<strong>DFS+贪心算法（非递归）</strong></p><blockquote><p><code>Dfs_tx_s</code>函数使用非递归方式实现的深度优先遍历算法，加入了贪心算法的思想。</p><p>该函数使用栈来保存待访问的位置，首先将起始位置入栈，然后进入一个循环，直到栈为空。</p><p>在循环中，取出栈顶的位置，判断是否已找到完整路径，如果是则直接返回。</p><p>然后判断当前位置是否超出边界或已被访问过，如果是则跳过当前位置。接下来增加已访问的格子数，并标记当前位置为已访问。</p><p>然后根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，并选择具有最小可行方向数量的方向作为下一步的移动方向，</p><p>将该位置入栈。最后继续下一轮循环，直到栈为空。</p></blockquote><div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> Dfs_tx_s<span class="op">(</span><span class="dt">int</span> flag<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">],</span> <span class="dt">int</span> path<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">],</span> <span class="dt">int</span> m<span class="op">,</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span> edge<span class="op">,</span> <span class="dt">int</span> count<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> found<span class="op">)</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(*</span>found<span class="op">)</span><span class="cf">return</span><span class="op">;</span><span class="co">//// 如果已经找到完整路径，直接返回  </span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//定义栈</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> stack_m<span class="op">[</span><span class="dv">8</span> <span class="op">*</span> <span class="dv">8</span><span class="op">];</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> stack_n<span class="op">[</span><span class="dv">8</span> <span class="op">*</span> <span class="dv">8</span><span class="op">];</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> top <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//将第一个元素入栈</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    stack_m<span class="op">[</span>top<span class="op">]</span> <span class="op">=</span> m<span class="op">;</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    stack_n<span class="op">[</span>top<span class="op">]</span> <span class="op">=</span> n<span class="op">;</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    top<span class="op">++;</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>top <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">//取出栈顶元素</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        top<span class="op">--;</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        m <span class="op">=</span> stack_m<span class="op">[</span>top<span class="op">];</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        n <span class="op">=</span> stack_n<span class="op">[</span>top<span class="op">];</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>count <span class="op">&gt;=</span> edge <span class="op">*</span> edge<span class="op">)</span> <span class="op">&#123;</span><span class="co">//如果已经访问了所有方格</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">*</span>found <span class="op">=</span> <span class="dv">1</span><span class="op">;</span><span class="co">// 将found标志设置为1，表示已找到完整路径</span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>                    path<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">=</span> flag<span class="op">[</span>i<span class="op">][</span>j<span class="op">];</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span><span class="co">// 将当前路径复制到path数组中</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span><span class="op">;</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>m <span class="op">&gt;</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">||</span> n <span class="op">&gt;</span> edge <span class="op">-</span> <span class="dv">1</span> <span class="op">||</span> m <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> n <span class="op">&lt;</span> <span class="dv">0</span> <span class="op">||</span> flag<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">continue</span><span class="op">;</span><span class="co">// 如果当前位置超出边界或已被访问过，则跳过</span></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>        count<span class="op">++;</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>        flag<span class="op">[</span>m<span class="op">][</span>n<span class="op">]</span> <span class="op">=</span> count<span class="op">;</span><span class="co">//// 标记当前位置为已访问</span></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>        <span class="co">//贪心，计算局部（两步）最优方向</span></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> count_next<span class="op">[</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span> <span class="op">&#125;;</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> m_next <span class="op">=</span> m <span class="op">+</span> move_x<span class="op">[</span>i<span class="op">];</span><span class="co">// 下一步的 x坐标</span></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> n_next <span class="op">=</span> n <span class="op">+</span> move_y<span class="op">[</span>i<span class="op">];</span><span class="co">// 下一步的 y坐标</span></span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>m_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> n_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> m_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> flag<span class="op">[</span>m_next<span class="op">][</span>n_next<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span><span class="co">//下一步的位置，未被访问则</span></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>                count_next<span class="op">[</span>i<span class="op">]++;</span><span class="co">// 增加下一步可行方向的数量</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">int</span> m_next_next <span class="op">=</span> m_next <span class="op">+</span> move_x<span class="op">[</span>j<span class="op">];</span><span class="co">//下一步的 下一步的x坐标</span></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">int</span> n_next_next <span class="op">=</span> n_next <span class="op">+</span> move_y<span class="op">[</span>j<span class="op">];</span><span class="co">//下一步的 下一步的y坐标</span></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> <span class="op">(</span>m_next_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> n_next_next <span class="op">&lt;</span> edge <span class="op">&amp;&amp;</span> m_next_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> n_next_next <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> flag<span class="op">[</span>m_next_next<span class="op">][</span>n_next_next<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span><span class="co">//下一步的下一步的位置，未被访问则</span></span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>                        count_next<span class="op">[</span>i<span class="op">]++;</span> <span class="co">//增加下一步可行方向的数量*</span></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> position <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span><span class="co">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>count_next<span class="op">[</span>position<span class="op">]</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span></span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>                position <span class="op">=</span> i<span class="op">;</span></span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">((</span>count_next<span class="op">[</span>i<span class="op">]</span> <span class="op">&lt;</span> count_next<span class="op">[</span>position<span class="op">])</span> <span class="op">&amp;&amp;</span> count_next<span class="op">[</span>i<span class="op">]</span> <span class="op">!=</span> <span class="op">-</span><span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>                position <span class="op">=</span> i<span class="op">;</span></span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>        stack_m<span class="op">[</span>top<span class="op">]</span> <span class="op">=</span> m <span class="op">+</span> move_x<span class="op">[</span>position<span class="op">];</span></span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a>        stack_n<span class="op">[</span>top<span class="op">]</span> <span class="op">=</span> n <span class="op">+</span> move_y<span class="op">[</span>position<span class="op">];</span></span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>        top<span class="op">++;</span></span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>主函数的调用：</strong></p><blockquote><p>定义了两个二维数组 <code>path</code> 和<code>flag</code>，分别用于记录最终路径和临时路径。</p><p>初始化变量 <code>m</code> 和 <code>n</code>，表示起始位置的坐标。,<code>edge</code>，表示棋盘的大小（边长）,<code>found</code>，表示完整路径的标志，初始值为0。</p><p>根据用户输入的序号，使用 <code>switch</code>语句选择相应的解决方法。</p></blockquote><div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> path<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span><span class="co">// 记录最终路径</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> flag<span class="op">[</span><span class="dv">8</span><span class="op">][</span><span class="dv">8</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span><span class="co">// 记录临时路径</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> m<span class="op">,</span> n<span class="op">;</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> edge<span class="op">;</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> found <span class="op">=</span> <span class="dv">0</span><span class="op">;</span><span class="co">// 完整路径标志</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> switch_on<span class="op">;</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    m <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    n <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    edge <span class="op">=</span> <span class="dv">8</span><span class="op">;</span><span class="co">// 棋盘大小</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;1:使用深度优先搜索（递归）</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;2:使用深度优先搜索+贪心算法（递归）</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;3:使用深度优先搜索+贪心算法（非递归）</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;4:退出</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span><span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;输入序号，以选择解决方法：&quot;</span><span class="op">);</span></span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        scanf_s<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>switch_on<span class="op">);</span></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>switch_on<span class="op">)</span></span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#123;</span></span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span><span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>            Dfs<span class="op">(</span>path<span class="op">,</span> m<span class="op">,</span> n<span class="op">,</span> edge<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#123;</span></span><span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>                    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%2d</span><span class="st"> &quot;</span><span class="op">,</span> path<span class="op">[</span>i<span class="op">][</span>j<span class="op">]);</span></span><span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a>            <span class="op">;</span></span><span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span><span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a>            Dfs_tx<span class="op">(</span>flag<span class="op">,</span> path<span class="op">,</span> m<span class="op">,</span> n<span class="op">,</span> edge<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> found<span class="op">);</span></span><span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#123;</span></span><span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>                    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%2d</span><span class="st"> &quot;</span><span class="op">,</span> path<span class="op">[</span>i<span class="op">][</span>j<span class="op">]);</span></span><span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span><span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>            Dfs_tx_s<span class="op">(</span>flag<span class="op">,</span> path<span class="op">,</span> m<span class="op">,</span> n<span class="op">,</span> edge<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="op">&amp;</span>found<span class="op">);</span></span><span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>found<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> edge<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> edge<span class="op">;</span> j<span class="op">++)</span></span><span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a>                        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">%2d</span><span class="st"> &quot;</span><span class="op">,</span> path<span class="op">[</span>i<span class="op">][</span>j<span class="op">]);</span></span><span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a>                    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-49"><a href="#cb6-49" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb6-50"><a href="#cb6-50" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb6-51"><a href="#cb6-51" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb6-52"><a href="#cb6-52" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;没有找到路径</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb6-53"><a href="#cb6-53" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb6-54"><a href="#cb6-54" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb6-55"><a href="#cb6-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">4</span><span class="op">:</span></span><span id="cb6-56"><a href="#cb6-56" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb6-57"><a href="#cb6-57" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span><span id="cb6-58"><a href="#cb6-58" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;请输入正确的序号&quot;</span><span class="op">);</span></span><span id="cb6-59"><a href="#cb6-59" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb6-60"><a href="#cb6-60" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb6-61"><a href="#cb6-61" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb6-62"><a href="#cb6-62" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb6-63"><a href="#cb6-63" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h2 id="二迷宫问题">二、迷宫问题</h2><h4 id="问题描述-1">问题描述</h4><p>以一个M×N的长方阵表示迷宫，0和1分别表示迷宫中的通路和障碍。设计一个程序，对任意设定的迷宫，求出一条从入口到出口的通路，或得出没有通路的结论。</p><p>首先实现一个以链表作存储结构的栈类型，然后编写一个求解迷宫的递归和非递归程序。求得的通路以三元组（i，j，d）的形式输出，其中：（i，j）指示迷宫中的一个坐标，d表示走到下一坐标的方向。</p><h4 id="程序代码-1">程序代码</h4><p><strong>初始化迷宫</strong></p><div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 迷宫的行列数</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> M <span class="op">=</span> <span class="dv">10</span><span class="op">,</span> N <span class="op">=</span> <span class="dv">10</span><span class="op">;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="co">// 迷宫数组初始化</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>maze<span class="op">[</span><span class="dv">10</span><span class="op">][</span><span class="dv">10</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">&#125;,</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;,</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span><span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">&#125;</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;;</span></span></code></pre></div><p><strong>定义栈的基本结构</strong></p><blockquote><p>StackNode 节点</p><p>Stack 栈</p></blockquote><div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 栈的节点</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> StackNode <span class="op">&#123;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> x<span class="op">,</span> y<span class="op">,</span> direction<span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> StackNode<span class="op">*</span> next<span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> StackNode<span class="op">;</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 栈结构</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> <span class="op">&#123;</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    StackNode<span class="op">*</span> top<span class="op">;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> Stack<span class="op">;</span></span></code></pre></div><p><strong>定义栈的基本方法</strong></p><blockquote><p>initStack ( ) 初始化栈</p><p>isStackEmpty ( ) 判断栈是否为空</p><p>push ( ) 入栈</p><p>pop ( ) 出栈</p><p>top（）获取栈顶元素</p></blockquote><div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="co">// 初始化栈</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> initStack<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    stack<span class="op">-&gt;</span>top <span class="op">=</span> NULL<span class="op">;</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a><span class="co">// 判断栈是否为空</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> isStackEmpty<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> stack<span class="op">-&gt;</span>top <span class="op">==</span> NULL<span class="op">;</span></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a><span class="co">// 入栈</span></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> push<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">,</span> <span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> <span class="dt">int</span> direction<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>    StackNode<span class="op">*</span> node <span class="op">=</span> <span class="op">(</span>StackNode<span class="op">*)</span>malloc<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span>StackNode<span class="op">));</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>x <span class="op">=</span> x<span class="op">;</span></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>y <span class="op">=</span> y<span class="op">;</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>direction <span class="op">=</span> direction<span class="op">;</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>next <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">;</span></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>    stack<span class="op">-&gt;</span>top <span class="op">=</span> node<span class="op">;</span></span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a><span class="co">// 出栈</span></span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> pop<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>isStackEmpty<span class="op">(</span>stack<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>    StackNode<span class="op">*</span> node <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">;</span></span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>    stack<span class="op">-&gt;</span>top <span class="op">=</span> node<span class="op">-&gt;</span>next<span class="op">;</span></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>    free<span class="op">(</span>node<span class="op">);</span></span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a><span class="co">// 获取栈顶元素</span></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> top<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> x<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> y<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> direction<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>isStackEmpty<span class="op">(</span>stack<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span></span><span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>x <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">-&gt;</span>x<span class="op">;</span></span><span id="cb9-38"><a href="#cb9-38" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>y <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">-&gt;</span>y<span class="op">;</span></span><span id="cb9-39"><a href="#cb9-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">*</span>direction <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">-&gt;</span>direction<span class="op">;</span></span><span id="cb9-40"><a href="#cb9-40" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>检查坐标是否有效</strong></p><blockquote><p>(x,y)在棋盘上，并且标记为0</p></blockquote><div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> isValid<span class="op">(</span><span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> x <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> x <span class="op">&lt;</span> M <span class="op">&amp;&amp;</span> y <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> y <span class="op">&lt;</span> N <span class="op">&amp;&amp;</span> maze<span class="op">[</span>x<span class="op">][</span>y<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>递归求解迷宫通路</strong></p><blockquote><p>首先检查当前坐标 <code>(x, y)</code>是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为0（通路）。</p><p>如果当前坐标无效，返回 false，表示没有通路。</p><p>将当前坐标 <code>(x, y)</code> 入栈，表示已访问该节点。</p><p>将迷宫数组中的值标记为 2，表示该节点已访问过。</p><p>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回true，表示找到了通路。</p><p>递归尝试四个方向：向右 <code>(x, y+1)</code>、向下<code>(x+1, y)</code>、向左 <code>(x, y-1)</code>、向上<code>(x-1, y)</code>。</p><p>如果其中任意方向返回 true，表示找到了通路，直接返回 true。</p><p>如果以上四个方向都没有找到通路，说明当前节点不在通路上，将其从栈中弹出并清除标记。</p><p>返回 false，表示没有找到通路。</p></blockquote><div class="sourceCode" id="cb11"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> solveMazeRecursive<span class="op">(</span><span class="dt">int</span> x<span class="op">,</span> <span class="dt">int</span> y<span class="op">,</span> Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>isValid<span class="op">(</span>x<span class="op">,</span> y<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>    push<span class="op">(</span>stack<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">);</span> <span class="co">// 入栈，初始方向为-1</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>    maze<span class="op">[</span>x<span class="op">][</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span> <span class="co">// 标记已访问</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> M <span class="op">-</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> y <span class="op">==</span> N <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span> <span class="co">// 到达出口</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> direction<span class="op">;</span> <span class="co">// 添加direction变量</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 尝试四个方向</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">((</span>direction <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> solveMazeRecursive<span class="op">(</span>x<span class="op">,</span> y <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> stack<span class="op">))</span> <span class="op">||</span> <span class="co">// 向右</span></span><span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">(</span>direction <span class="op">=</span> <span class="dv">1</span><span class="op">,</span> solveMazeRecursive<span class="op">(</span>x <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> y<span class="op">,</span> stack<span class="op">))</span> <span class="op">||</span> <span class="co">// 向下</span></span><span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">(</span>direction <span class="op">=</span> <span class="dv">2</span><span class="op">,</span> solveMazeRecursive<span class="op">(</span>x<span class="op">,</span> y <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> stack<span class="op">))</span> <span class="op">||</span> <span class="co">// 向左</span></span><span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">(</span>direction <span class="op">=</span> <span class="dv">3</span><span class="op">,</span> solveMazeRecursive<span class="op">(</span>x <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> y<span class="op">,</span> stack<span class="op">)))</span> <span class="op">&#123;</span> <span class="co">// 向上</span></span><span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>        push<span class="op">(</span>stack<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> direction<span class="op">);</span> <span class="co">// 入栈，保存方向</span></span><span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a>    pop<span class="op">(</span>stack<span class="op">);</span> <span class="co">// 从栈中移除</span></span><span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>    maze<span class="op">[</span>x<span class="op">][</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> <span class="co">// 清除标记</span></span><span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>非递归求解迷宫通路</strong></p><blockquote><ol type="1"><li>初始化当前坐标 <code>(x, y)</code> 为起点<code>(0, 0)</code>，并将初始方向 <code>direction</code> 设为 0。</li><li>进入一个循环，直到找到通路或确定没有通路。</li><li>检查当前坐标 <code>(x, y)</code>是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为0（通路）。</li><li>如果当前坐标有效，将其入栈，表示已访问该节点。将迷宫数组中的值标记为2，表示该节点已访问过。</li><li>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回true，表示找到了通路。</li><li>设置方向 <code>direction</code> 为 0，表示方向。</li><li>更新坐标 <code>(x, y)</code> 为下一个节点，根据方向<code>direction</code> 的不同进行相应的移动操作。</li><li><strong>如果方向小于3，表示还有方向未尝试</strong>，递增方向并继续进行下一次循环。</li><li><strong>如果方向大于等于3，表示四个方向都尝试过</strong>，说明当前节点不在通路上。</li><li>检查栈是否为空，如果为空，表示已经回到起点且没有找到通路，返回false。</li><li>从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</li><li>根据方向进行相应的坐标更新操作。</li><li>回到步骤 3，继续进行下一次循环。</li></ol></blockquote><div class="sourceCode" id="cb12"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> solveMazeIterative<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> x <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> y <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> direction <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span><span class="kw">true</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>isValid<span class="op">(</span>x<span class="op">,</span> y<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>            push<span class="op">(</span>stack<span class="op">,</span> x<span class="op">,</span> y<span class="op">,</span> direction<span class="op">);</span> <span class="co">// 入栈</span></span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>            maze<span class="op">[</span>x<span class="op">][</span>y<span class="op">]</span> <span class="op">=</span> <span class="dv">2</span><span class="op">;</span> <span class="co">// 标记已访问</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-8"><a href="#cb12-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>x <span class="op">==</span> M <span class="op">-</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> y <span class="op">==</span> N <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb12-9"><a href="#cb12-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> <span class="kw">true</span><span class="op">;</span> <span class="co">// 到达出口</span></span><span id="cb12-10"><a href="#cb12-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb12-11"><a href="#cb12-11" aria-hidden="true" tabindex="-1"></a>            direction <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb12-12"><a href="#cb12-12" aria-hidden="true" tabindex="-1"></a>            y<span class="op">++;</span></span><span id="cb12-13"><a href="#cb12-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb12-14"><a href="#cb12-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb12-15"><a href="#cb12-15" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>direction <span class="op">&lt;</span> <span class="dv">3</span><span class="op">)</span> <span class="op">&#123;</span><span class="co">//如果方向小于 3，表示还有方向未尝试，递增方向并继续进行下一次循环。</span></span><span id="cb12-16"><a href="#cb12-16" aria-hidden="true" tabindex="-1"></a>                direction<span class="op">++;</span></span><span id="cb12-17"><a href="#cb12-17" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>direction<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb12-18"><a href="#cb12-18" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">// 向右</span></span><span id="cb12-19"><a href="#cb12-19" aria-hidden="true" tabindex="-1"></a>                    x<span class="op">++;</span></span><span id="cb12-20"><a href="#cb12-20" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-21"><a href="#cb12-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span> <span class="co">// 向下</span></span><span id="cb12-22"><a href="#cb12-22" aria-hidden="true" tabindex="-1"></a>                    y<span class="op">--;</span></span><span id="cb12-23"><a href="#cb12-23" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-24"><a href="#cb12-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span> <span class="co">// 向左</span></span><span id="cb12-25"><a href="#cb12-25" aria-hidden="true" tabindex="-1"></a>                    x<span class="op">--;</span></span><span id="cb12-26"><a href="#cb12-26" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-27"><a href="#cb12-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb12-28"><a href="#cb12-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb12-29"><a href="#cb12-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb12-30"><a href="#cb12-30" aria-hidden="true" tabindex="-1"></a>                <span class="cf">if</span> <span class="op">(</span>isStackEmpty<span class="op">(</span>stack<span class="op">))</span> <span class="op">&#123;</span><span class="co">//如果方向大于等于 3，表示四个方向都尝试过，说明当前节点不在通路上。</span></span><span id="cb12-31"><a href="#cb12-31" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">return</span> <span class="kw">false</span><span class="op">;</span> <span class="co">// 无通路</span></span><span id="cb12-32"><a href="#cb12-32" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb12-33"><a href="#cb12-33" aria-hidden="true" tabindex="-1"></a>                top<span class="op">(</span>stack<span class="op">,</span> <span class="op">&amp;</span>x<span class="op">,</span> <span class="op">&amp;</span>y<span class="op">,</span> <span class="op">&amp;</span>direction<span class="op">);</span><span class="co">//从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</span></span><span id="cb12-34"><a href="#cb12-34" aria-hidden="true" tabindex="-1"></a>                pop<span class="op">(</span>stack<span class="op">);</span> <span class="co">// 从栈中移除</span></span><span id="cb12-35"><a href="#cb12-35" aria-hidden="true" tabindex="-1"></a>                <span class="cf">switch</span> <span class="op">(</span>direction<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb12-36"><a href="#cb12-36" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span> <span class="co">// 向上</span></span><span id="cb12-37"><a href="#cb12-37" aria-hidden="true" tabindex="-1"></a>                    y<span class="op">++;</span></span><span id="cb12-38"><a href="#cb12-38" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-39"><a href="#cb12-39" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span> <span class="co">// 向右</span></span><span id="cb12-40"><a href="#cb12-40" aria-hidden="true" tabindex="-1"></a>                    x<span class="op">++;</span></span><span id="cb12-41"><a href="#cb12-41" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-42"><a href="#cb12-42" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span> <span class="co">// 向下</span></span><span id="cb12-43"><a href="#cb12-43" aria-hidden="true" tabindex="-1"></a>                    y<span class="op">--;</span></span><span id="cb12-44"><a href="#cb12-44" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-45"><a href="#cb12-45" aria-hidden="true" tabindex="-1"></a>                <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span> <span class="co">// 向左</span></span><span id="cb12-46"><a href="#cb12-46" aria-hidden="true" tabindex="-1"></a>                    x<span class="op">--;</span></span><span id="cb12-47"><a href="#cb12-47" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">break</span><span class="op">;</span></span><span id="cb12-48"><a href="#cb12-48" aria-hidden="true" tabindex="-1"></a>                <span class="op">&#125;</span></span><span id="cb12-49"><a href="#cb12-49" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb12-50"><a href="#cb12-50" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb12-51"><a href="#cb12-51" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb12-52"><a href="#cb12-52" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>打印迷宫和通路</strong></p><blockquote><p>□ 表示通路</p><p>■ 表示障碍</p><p>★ 表示通路上的路径</p></blockquote><div class="sourceCode" id="cb13"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> printMaze<span class="op">(</span>Stack<span class="op">*</span> stack<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;迷宫及通路：</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> M<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> N<span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>maze<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;□ &quot;</span><span class="op">);</span> <span class="co">// 通路</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>maze<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;■ &quot;</span><span class="op">);</span> <span class="co">// 障碍</span></span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>maze<span class="op">[</span>i<span class="op">][</span>j<span class="op">]</span> <span class="op">==</span> <span class="dv">2</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>                printf<span class="op">(</span><span class="st">&quot;★ &quot;</span><span class="op">);</span> <span class="co">// 通路上的路径</span></span><span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>        printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">通路：</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>    StackNode<span class="op">*</span> node <span class="op">=</span> stack<span class="op">-&gt;</span>top<span class="op">;</span></span><span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>node <span class="op">!=</span> NULL<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">switch</span> <span class="op">(</span>node<span class="op">-&gt;</span>direction<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">0</span><span class="op">:</span></span><span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%d</span><span class="st">, </span><span class="sc">%d</span><span class="st">, E)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> node<span class="op">-&gt;</span>x <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> node<span class="op">-&gt;</span>y <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span><span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%d</span><span class="st">, </span><span class="sc">%d</span><span class="st">, S)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> node<span class="op">-&gt;</span>x <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> node<span class="op">-&gt;</span>y <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span><span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%d</span><span class="st">, </span><span class="sc">%d</span><span class="st">, W)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> node<span class="op">-&gt;</span>x <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> node<span class="op">-&gt;</span>y <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span><span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;(</span><span class="sc">%d</span><span class="st">, </span><span class="sc">%d</span><span class="st">, N)</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">,</span> node<span class="op">-&gt;</span>x <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> node<span class="op">-&gt;</span>y <span class="op">+</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>        <span class="cf">default</span><span class="op">:</span></span><span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>        node <span class="op">=</span> node<span class="op">-&gt;</span>next<span class="op">;</span></span><span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>主函数的调用</strong></p><div class="sourceCode" id="cb14"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a>    Stack stack<span class="op">;</span></span><span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;1:递归求解迷宫通路</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;2:非递归求解迷宫通路</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;3:不走迷宫了</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> switch_on <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;输入序号：&quot;</span><span class="op">);</span></span><span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>    scanf_s<span class="op">(</span><span class="st">&quot;</span><span class="sc">%d</span><span class="st">&quot;</span><span class="op">,</span> <span class="op">&amp;</span>switch_on<span class="op">);</span></span><span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">switch</span> <span class="op">(</span>switch_on<span class="op">)</span></span><span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#123;</span></span><span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">1</span><span class="op">:</span></span><span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 使用递归求解迷宫通路</span></span><span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>        initStack<span class="op">(&amp;</span>stack<span class="op">);</span></span><span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>solveMazeRecursive<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="op">&amp;</span>stack<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a>            printMaze<span class="op">(&amp;</span>stack<span class="op">);</span></span><span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;迷宫没有通路。</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span><span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">2</span><span class="op">:</span></span><span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a>        initStack<span class="op">(&amp;</span>stack<span class="op">);</span></span><span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 使用非递归求解迷宫通路</span></span><span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>solveMazeIterative<span class="op">(&amp;</span>stack<span class="op">))</span> <span class="op">&#123;</span></span><span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>            printMaze<span class="op">(&amp;</span>stack<span class="op">);</span></span><span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>            printf<span class="op">(</span><span class="st">&quot;迷宫没有通路。</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span><span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">case</span> <span class="dv">3</span><span class="op">:</span></span><span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">default</span><span class="op">:</span>printf<span class="op">(</span><span class="st">&quot;请输入正确的序号&quot;</span><span class="op">);</span></span><span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">break</span><span class="op">;</span></span><span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h2 id="查找算法比较">查找算法比较</h2><h4 id="问题描述-2">问题描述</h4><ol type="1"><li><p>对以下6种常用的内部排序算法进行比较：顺序查找，折半查找，分块查找，插值查找，斐波那契查找，二叉树查找。</p></li><li><p>待查找表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-2">程序代码</h4><p><strong>顺序查找</strong></p><div class="sourceCode" id="cb15"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> sequentialSearch<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">;</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>i<span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>折半查找（二分查找）</strong></p><div class="sourceCode" id="cb16"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> binarySearch<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb16-3"><a href="#cb16-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> low <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb16-4"><a href="#cb16-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> high <span class="op">=</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb16-5"><a href="#cb16-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>low <span class="op">&lt;=</span> high<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb16-6"><a href="#cb16-6" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb16-7"><a href="#cb16-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> mid <span class="op">=</span> <span class="op">(</span>low <span class="op">+</span> high<span class="op">)</span> <span class="op">/</span> <span class="dv">2</span><span class="op">;</span></span><span id="cb16-8"><a href="#cb16-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>mid<span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb16-9"><a href="#cb16-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb16-10"><a href="#cb16-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb16-11"><a href="#cb16-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>mid<span class="op">]</span> <span class="op">&lt;</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb16-12"><a href="#cb16-12" aria-hidden="true" tabindex="-1"></a>            low <span class="op">=</span> mid <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb16-13"><a href="#cb16-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb16-14"><a href="#cb16-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb16-15"><a href="#cb16-15" aria-hidden="true" tabindex="-1"></a>            high <span class="op">=</span> mid <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb16-16"><a href="#cb16-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb16-17"><a href="#cb16-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb16-18"><a href="#cb16-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb16-19"><a href="#cb16-19" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>分块查找</strong></p><div class="sourceCode" id="cb17"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> blockSearch<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> blockSizes<span class="op">[],</span> <span class="dt">int</span> blockNum<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">,</span> j<span class="op">;</span></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> blockNum<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>blockSizes<span class="op">[</span>i<span class="op">]</span> <span class="op">&gt;=</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span><span class="op">;</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>i <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> blockSize <span class="op">=</span> <span class="dv">20</span><span class="op">;</span></span><span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> start <span class="op">=</span> i <span class="op">*</span> blockSize <span class="op">-</span> blockSize<span class="op">;</span></span><span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> end <span class="op">=</span> i <span class="op">*</span> blockSize<span class="op">;</span></span><span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> start<span class="op">;</span> j <span class="op">&lt;</span> end<span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>j<span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>插值查找</strong></p><blockquote><p>改进的二分查找算法，它通过对数组进行估算，试图根据查找键的值在数组中的分布情况来预测该键可能出现的位置。公式<code>int pos = low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low])</code>用于计算估算的位置。</p></blockquote><div class="sourceCode" id="cb18"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> interSearch<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> low <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> high <span class="op">=</span> size <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>low <span class="op">&lt;=</span> high <span class="op">&amp;&amp;</span> key <span class="op">&gt;=</span> arr<span class="op">[</span>low<span class="op">]</span> <span class="op">&amp;&amp;</span> key <span class="op">&lt;=</span> arr<span class="op">[</span>high<span class="op">])</span> <span class="op">&#123;</span></span><span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>low <span class="op">==</span> high<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>low<span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> pos <span class="op">=</span> low <span class="op">+</span> <span class="op">((</span>key <span class="op">-</span> arr<span class="op">[</span>low<span class="op">])</span> <span class="op">*</span> <span class="op">(</span>high <span class="op">-</span> low<span class="op">))</span> <span class="op">/</span> <span class="op">(</span>arr<span class="op">[</span>high<span class="op">]</span> <span class="op">-</span> arr<span class="op">[</span>low<span class="op">]);</span></span><span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>pos<span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>pos<span class="op">]</span> <span class="op">&lt;</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a>            low <span class="op">=</span> pos <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>            high <span class="op">=</span> pos <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>斐波那契查找</strong></p><div class="sourceCode" id="cb19"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> fibonacciSearch<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span>  <span class="co">// 记录比较次数的变量</span></span><span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> fib2 <span class="op">=</span> <span class="dv">0</span><span class="op">;</span>  <span class="co">// 第一个斐波那契数</span></span><span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> fib1 <span class="op">=</span> <span class="dv">1</span><span class="op">;</span>  <span class="co">// 第二个斐波那契数</span></span><span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> fib <span class="op">=</span> fib1 <span class="op">+</span> fib2<span class="op">;</span>  <span class="co">// 当前斐波那契数</span></span><span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 找到大于等于数组大小的最小斐波那契数</span></span><span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>fib <span class="op">&lt;</span> size<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a>        fib2 <span class="op">=</span> fib1<span class="op">;</span></span><span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>        fib1 <span class="op">=</span> fib<span class="op">;</span></span><span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>        fib <span class="op">=</span> fib1 <span class="op">+</span> fib2<span class="op">;</span></span><span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>     <span class="co">//用于确定待查找数组的起始位置，它随着迭代的进行不断更新，以便逼近目标元素的位置</span></span><span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> offset <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span>  <span class="co">// 用于索引的偏移值</span></span><span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 进行斐波那契查找</span></span><span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>fib <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> i <span class="op">=</span> <span class="op">(</span>offset <span class="op">+</span> fib2<span class="op">)</span> <span class="op">&lt;</span> <span class="op">(</span>size <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">?</span> <span class="op">(</span>offset <span class="op">+</span> fib2<span class="op">)</span> <span class="op">:</span> <span class="op">(</span>size <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>i<span class="op">]</span> <span class="op">&lt;</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 关键字比当前元素大，向下移动斐波那契数</span></span><span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>            fib <span class="op">=</span> fib1<span class="op">;</span></span><span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a>            fib1 <span class="op">=</span> fib2<span class="op">;</span></span><span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>            fib2 <span class="op">=</span> fib <span class="op">-</span> fib1<span class="op">;</span></span><span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>            offset <span class="op">=</span> i<span class="op">;</span></span><span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span> <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>i<span class="op">]</span> <span class="op">&gt;</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 关键字比当前元素小，进一步向下移动斐波那契数</span></span><span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a>            fib <span class="op">=</span> fib2<span class="op">;</span></span><span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a>            fib1 <span class="op">=</span> fib1 <span class="op">-</span> fib2<span class="op">;</span></span><span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>            fib2 <span class="op">=</span> fib <span class="op">-</span> fib1<span class="op">;</span></span><span id="cb19-33"><a href="#cb19-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span> <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb19-34"><a href="#cb19-34" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 关键字在索引 i 处找到</span></span><span id="cb19-35"><a href="#cb19-35" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb19-36"><a href="#cb19-36" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb19-37"><a href="#cb19-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb19-38"><a href="#cb19-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-39"><a href="#cb19-39" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 检查数组中最后一个元素（fib1 == 1）</span></span><span id="cb19-40"><a href="#cb19-40" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>fib1 <span class="op">==</span> <span class="dv">1</span> <span class="op">&amp;&amp;</span> arr<span class="op">[</span>offset <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb19-41"><a href="#cb19-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb19-42"><a href="#cb19-42" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb19-43"><a href="#cb19-43" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-44"><a href="#cb19-44" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 未在数组中找到关键字</span></span><span id="cb19-45"><a href="#cb19-45" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb19-46"><a href="#cb19-46" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>二叉树查找节点</strong></p><div class="sourceCode" id="cb20"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 二叉树节点</span></span><span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a><span class="kw">typedef</span> <span class="kw">struct</span> TreeNode <span class="op">&#123;</span></span><span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> value<span class="op">;</span></span><span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> TreeNode<span class="op">*</span> left<span class="op">;</span></span><span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> TreeNode<span class="op">*</span> right<span class="op">;</span></span><span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span> TreeNode<span class="op">;</span></span><span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a><span class="co">// 创建二叉树节点</span></span><span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a>TreeNode<span class="op">*</span> createNode<span class="op">(</span><span class="dt">int</span> value<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>    TreeNode<span class="op">*</span> node <span class="op">=</span> <span class="op">(</span>TreeNode<span class="op">*)</span>malloc<span class="op">(</span><span class="kw">sizeof</span><span class="op">(</span>TreeNode<span class="op">));</span></span><span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>value <span class="op">=</span> value<span class="op">;</span></span><span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>left <span class="op">=</span> NULL<span class="op">;</span></span><span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>    node<span class="op">-&gt;</span>right <span class="op">=</span> NULL<span class="op">;</span></span><span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> node<span class="op">;</span></span><span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a><span class="co">// 二叉树插入节点</span></span><span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>TreeNode<span class="op">*</span> insertNode<span class="op">(</span>TreeNode<span class="op">*</span> root<span class="op">,</span> <span class="dt">int</span> value<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>root <span class="op">==</span> NULL<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> createNode<span class="op">(</span>value<span class="op">);</span></span><span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>value <span class="op">&lt;</span> root<span class="op">-&gt;</span>value<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>left <span class="op">=</span> insertNode<span class="op">(</span>root<span class="op">-&gt;</span>left<span class="op">,</span> value<span class="op">);</span></span><span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>value <span class="op">&gt;</span> root<span class="op">-&gt;</span>value<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a>        root<span class="op">-&gt;</span>right <span class="op">=</span> insertNode<span class="op">(</span>root<span class="op">-&gt;</span>right<span class="op">,</span> value<span class="op">);</span></span><span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> root<span class="op">;</span></span><span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a><span class="co">// 二叉树查找节点</span></span><span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> searchNode<span class="op">(</span>TreeNode<span class="op">*</span> root<span class="op">,</span> <span class="dt">int</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(</span>root <span class="op">!=</span> NULL<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a>        comparisons<span class="op">++;</span></span><span id="cb20-37"><a href="#cb20-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-38"><a href="#cb20-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>root<span class="op">-&gt;</span>value <span class="op">==</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-39"><a href="#cb20-39" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb20-40"><a href="#cb20-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb20-41"><a href="#cb20-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>key <span class="op">&lt;</span> root<span class="op">-&gt;</span>value<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb20-42"><a href="#cb20-42" aria-hidden="true" tabindex="-1"></a>            root <span class="op">=</span> root<span class="op">-&gt;</span>left<span class="op">;</span></span><span id="cb20-43"><a href="#cb20-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb20-44"><a href="#cb20-44" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb20-45"><a href="#cb20-45" aria-hidden="true" tabindex="-1"></a>            root <span class="op">=</span> root<span class="op">-&gt;</span>right<span class="op">;</span></span><span id="cb20-46"><a href="#cb20-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb20-47"><a href="#cb20-47" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb20-48"><a href="#cb20-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-49"><a href="#cb20-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> comparisons<span class="op">;</span></span><span id="cb20-50"><a href="#cb20-50" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>生成顺序数据集</strong></p><div class="sourceCode" id="cb21"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> getSequen<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> i <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>主函数调用</strong></p><div class="sourceCode" id="cb22"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb22-1"><a href="#cb22-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span> <span class="op">&#123;</span></span><span id="cb22-2"><a href="#cb22-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 生成顺序数据集</span></span><span id="cb22-3"><a href="#cb22-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> dataset<span class="op">[</span><span class="dv">200</span><span class="op">];</span></span><span id="cb22-4"><a href="#cb22-4" aria-hidden="true" tabindex="-1"></a>    getSequen<span class="op">(</span>dataset<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb22-5"><a href="#cb22-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-6"><a href="#cb22-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 统计每种算法的比较次数</span></span><span id="cb22-7"><a href="#cb22-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> seqComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-8"><a href="#cb22-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> binComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-9"><a href="#cb22-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> blockComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-10"><a href="#cb22-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> inteComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-11"><a href="#cb22-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> fibComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-12"><a href="#cb22-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> binTreeComp <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-13"><a href="#cb22-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-14"><a href="#cb22-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 进行10次随机数的查找</span></span><span id="cb22-15"><a href="#cb22-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">;</span></span><span id="cb22-16"><a href="#cb22-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">10</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb22-17"><a href="#cb22-17" aria-hidden="true" tabindex="-1"></a>        srand<span class="op">(</span>time<span class="op">(</span>NULL<span class="op">));</span></span><span id="cb22-18"><a href="#cb22-18" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> key <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">200</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb22-19"><a href="#cb22-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-20"><a href="#cb22-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顺序查找</span></span><span id="cb22-21"><a href="#cb22-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> comparisons <span class="op">=</span> sequentialSearch<span class="op">(</span>dataset<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> key<span class="op">);</span></span><span id="cb22-22"><a href="#cb22-22" aria-hidden="true" tabindex="-1"></a>        seqComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-23"><a href="#cb22-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-24"><a href="#cb22-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 折半查找</span></span><span id="cb22-25"><a href="#cb22-25" aria-hidden="true" tabindex="-1"></a>        comparisons <span class="op">=</span> binarySearch<span class="op">(</span>dataset<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> key<span class="op">);</span></span><span id="cb22-26"><a href="#cb22-26" aria-hidden="true" tabindex="-1"></a>        binComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-27"><a href="#cb22-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-28"><a href="#cb22-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 分块查找</span></span><span id="cb22-29"><a href="#cb22-29" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> blockSizes<span class="op">[</span><span class="dv">10</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">20</span><span class="op">,</span> <span class="dv">40</span><span class="op">,</span> <span class="dv">60</span><span class="op">,</span> <span class="dv">80</span><span class="op">,</span> <span class="dv">100</span><span class="op">,</span> <span class="dv">120</span><span class="op">,</span> <span class="dv">140</span><span class="op">,</span> <span class="dv">160</span><span class="op">,</span> <span class="dv">180</span><span class="op">,</span> <span class="dv">200</span> <span class="op">&#125;;</span></span><span id="cb22-30"><a href="#cb22-30" aria-hidden="true" tabindex="-1"></a>        comparisons <span class="op">=</span> blockSearch<span class="op">(</span>dataset<span class="op">,</span> blockSizes<span class="op">,</span> <span class="dv">10</span><span class="op">,</span> key<span class="op">);</span></span><span id="cb22-31"><a href="#cb22-31" aria-hidden="true" tabindex="-1"></a>        blockComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-32"><a href="#cb22-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-33"><a href="#cb22-33" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 插值查找</span></span><span id="cb22-34"><a href="#cb22-34" aria-hidden="true" tabindex="-1"></a>        comparisons <span class="op">=</span> interSearch<span class="op">(</span>dataset<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> key<span class="op">);</span></span><span id="cb22-35"><a href="#cb22-35" aria-hidden="true" tabindex="-1"></a>        inteComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-36"><a href="#cb22-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-37"><a href="#cb22-37" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 斐波那契查找</span></span><span id="cb22-38"><a href="#cb22-38" aria-hidden="true" tabindex="-1"></a>        comparisons <span class="op">=</span> fibonacciSearch<span class="op">(</span>dataset<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> key<span class="op">);</span></span><span id="cb22-39"><a href="#cb22-39" aria-hidden="true" tabindex="-1"></a>        fibComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-40"><a href="#cb22-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-41"><a href="#cb22-41" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 二叉树查找</span></span><span id="cb22-42"><a href="#cb22-42" aria-hidden="true" tabindex="-1"></a>        TreeNode<span class="op">*</span> root <span class="op">=</span> NULL<span class="op">;</span></span><span id="cb22-43"><a href="#cb22-43" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> <span class="dv">200</span><span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb22-44"><a href="#cb22-44" aria-hidden="true" tabindex="-1"></a>            root <span class="op">=</span> insertNode<span class="op">(</span>root<span class="op">,</span> dataset<span class="op">[</span>j<span class="op">]);</span></span><span id="cb22-45"><a href="#cb22-45" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb22-46"><a href="#cb22-46" aria-hidden="true" tabindex="-1"></a>        comparisons <span class="op">=</span> searchNode<span class="op">(</span>root<span class="op">,</span> key<span class="op">);</span></span><span id="cb22-47"><a href="#cb22-47" aria-hidden="true" tabindex="-1"></a>        binTreeComp <span class="op">+=</span> comparisons<span class="op">;</span></span><span id="cb22-48"><a href="#cb22-48" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb22-49"><a href="#cb22-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-50"><a href="#cb22-50" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 计算平均比较次数</span></span><span id="cb22-51"><a href="#cb22-51" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgSequential <span class="op">=</span> seqComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-52"><a href="#cb22-52" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgBinary <span class="op">=</span> binComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-53"><a href="#cb22-53" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgBlock <span class="op">=</span> blockComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-54"><a href="#cb22-54" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgInterpolation <span class="op">=</span> inteComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-55"><a href="#cb22-55" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgFibonacci <span class="op">=</span> fibComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-56"><a href="#cb22-56" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> avgBinaryTree <span class="op">=</span> binTreeComp <span class="op">/</span> <span class="fl">10.0</span><span class="op">;</span></span><span id="cb22-57"><a href="#cb22-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-58"><a href="#cb22-58" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 打印结果</span></span><span id="cb22-59"><a href="#cb22-59" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;顺序查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgSequential<span class="op">);</span></span><span id="cb22-60"><a href="#cb22-60" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;折半查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgBinary<span class="op">);</span></span><span id="cb22-61"><a href="#cb22-61" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;分块查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgBlock<span class="op">);</span></span><span id="cb22-62"><a href="#cb22-62" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;插值查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgInterpolation<span class="op">);</span></span><span id="cb22-63"><a href="#cb22-63" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;斐波那契查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgFibonacci<span class="op">);</span></span><span id="cb22-64"><a href="#cb22-64" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;二叉树查找平均比较次数：</span><span class="sc">%.2f\n</span><span class="st">&quot;</span><span class="op">,</span> avgBinaryTree<span class="op">);</span></span><span id="cb22-65"><a href="#cb22-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb22-66"><a href="#cb22-66" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb22-67"><a href="#cb22-67" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><h2 id="内部排序算法比较">内部排序算法比较</h2><h4 id="问题描述-3">问题描述</h4><ol type="1"><li><p>对以下6种常用的内部排序算法进行比较：冒泡排序，直接插入排序，简单选择排序，快速排序，希尔排序，堆排序。</p></li><li><p>待排序表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数和关键字的移动次数（关键字交换计为3次移动）。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-3">程序代码</h4><p><strong>冒泡排序</strong></p><div class="sourceCode" id="cb23"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb23-1"><a href="#cb23-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> bubbleSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb23-2"><a href="#cb23-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">,</span> j<span class="op">;</span></span><span id="cb23-3"><a href="#cb23-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb23-4"><a href="#cb23-4" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> n <span class="op">-</span> i <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb23-5"><a href="#cb23-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb23-6"><a href="#cb23-6" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>j<span class="op">]</span> <span class="op">&gt;</span> arr<span class="op">[</span>j <span class="op">+</span> <span class="dv">1</span><span class="op">])</span> <span class="op">&#123;</span></span><span id="cb23-7"><a href="#cb23-7" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>j<span class="op">];</span></span><span id="cb23-8"><a href="#cb23-8" aria-hidden="true" tabindex="-1"></a>                arr<span class="op">[</span>j<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>j <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span><span id="cb23-9"><a href="#cb23-9" aria-hidden="true" tabindex="-1"></a>                arr<span class="op">[</span>j <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb23-10"><a href="#cb23-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span><span id="cb23-11"><a href="#cb23-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb23-12"><a href="#cb23-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb23-13"><a href="#cb23-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb23-14"><a href="#cb23-14" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>直接插入排序</strong></p><blockquote><p>待排序的数组分为已排序和未排序两部分。初始时，将数组的第一个元素视为已排序部分，其余元素为未排序部分。然后，依次从未排序部分取出一个元素，插入到已排序部分的正确位置，使得已排序部分仍然保持有序。</p></blockquote><div class="sourceCode" id="cb24"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb24-1"><a href="#cb24-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> insertionSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb24-2"><a href="#cb24-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">,</span> j<span class="op">;</span></span><span id="cb24-3"><a href="#cb24-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb24-4"><a href="#cb24-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> key <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span> <span class="co">// 当前要插入的元素</span></span><span id="cb24-5"><a href="#cb24-5" aria-hidden="true" tabindex="-1"></a>        j <span class="op">=</span> i <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// 从当前元素的前一个元素开始比较</span></span><span id="cb24-6"><a href="#cb24-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>moves<span class="op">)++;</span></span><span id="cb24-7"><a href="#cb24-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(</span>j <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> arr<span class="op">[</span>j<span class="op">]</span> <span class="op">&gt;</span> key<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb24-8"><a href="#cb24-8" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>j <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>j<span class="op">];</span> <span class="co">// 将大于当前元素的元素后移</span></span><span id="cb24-9"><a href="#cb24-9" aria-hidden="true" tabindex="-1"></a>            j <span class="op">=</span> j <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// 继续向前比较</span></span><span id="cb24-10"><a href="#cb24-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb24-11"><a href="#cb24-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">2</span><span class="op">;</span></span><span id="cb24-12"><a href="#cb24-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb24-13"><a href="#cb24-13" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>j <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> key<span class="op">;</span> <span class="co">// 插入当前元素到正确的位置</span></span><span id="cb24-14"><a href="#cb24-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>moves<span class="op">)++;</span></span><span id="cb24-15"><a href="#cb24-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb24-16"><a href="#cb24-16" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>简单选择排序</strong></p><blockquote><p>算法每次从未排序的部分选择最小的元素，并将其放到已排序部分的末尾。</p><p><code>i</code> 控制已排序部分的末尾位置，初始值为 0。min_idx存储未排序部分的最小元素的索引。</p><p>内层循环从 <code>i+1</code>开始遍历未排序部分，找到最小元素的索引。</p><p>如果当前元素比已记录的最小元素小，则更新最小元素的索引。比较过程中。</p><p>外层循环中，将找到的最小元素与已排序部分的末尾元素进行交换。。这样每一次外层循环都会将未排序部分的最小元素放到已排序部分的末尾。</p></blockquote><div class="sourceCode" id="cb25"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb25-1"><a href="#cb25-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> selectionSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb25-2"><a href="#cb25-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">,</span> j<span class="op">,</span> min_idx<span class="op">;</span></span><span id="cb25-3"><a href="#cb25-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> n <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb25-4"><a href="#cb25-4" aria-hidden="true" tabindex="-1"></a>        min_idx <span class="op">=</span> i<span class="op">;</span> <span class="co">// 假设当前位置为最小值的索引</span></span><span id="cb25-5"><a href="#cb25-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> i <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> j <span class="op">&lt;</span> n<span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb25-6"><a href="#cb25-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb25-7"><a href="#cb25-7" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>j<span class="op">]</span> <span class="op">&lt;</span> arr<span class="op">[</span>min_idx<span class="op">])</span> <span class="op">&#123;</span></span><span id="cb25-8"><a href="#cb25-8" aria-hidden="true" tabindex="-1"></a>                min_idx <span class="op">=</span> j<span class="op">;</span> <span class="co">// 更新最小值的索引</span></span><span id="cb25-9"><a href="#cb25-9" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb25-10"><a href="#cb25-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb25-11"><a href="#cb25-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>min_idx<span class="op">];</span></span><span id="cb25-12"><a href="#cb25-12" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>min_idx<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span></span><span id="cb25-13"><a href="#cb25-13" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb25-14"><a href="#cb25-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span> <span class="co">// 交换最小值和当前位置的元素，并增加移动计数</span></span><span id="cb25-15"><a href="#cb25-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb25-16"><a href="#cb25-16" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>快速排序</strong></p><blockquote><p>基于分治的思想，通过将<strong>数组分割为较小的子数组，然后递归地对子数组进行排序</strong>，最终将整个数组排序完成。</p><ol type="1"><li>选择一个基准元素（pivot），通常可以选择数组的最后一个元素作为基准。</li><li>设置两个指针 <code>i</code> 和<code>j</code>，初始时分别指向数组的第一个元素和最后一个元素。</li><li>从左边开始，找到第一个大于等于基准元素的元素，记为<code>arr[i]</code>。从右边开始，找到第一个小于等于基准元素的元素，记为<code>arr[j]</code>。</li><li>如果 <code>i</code> 小于 <code>j</code>，交换 <code>arr[i]</code> 和<code>arr[j]</code>。</li><li>重复步骤 3 和步骤 4，直到 <code>i</code> 不再小于<code>j</code>。</li><li>将基准元素 <code>arr[high]</code>（初始选择的最后一个元素）与<code>arr[i]</code>（当前 <code>i</code>指向的元素）交换位置，将基准元素放置在最终的位置上。</li><li>现在，基准元素左边的元素都小于它，右边的元素都大于它。</li><li>递归地对基准元素左边的子数组（<code>arr[low]</code> 到<code>arr[i-1]</code>）和右边的子数组（<code>arr[i+1]</code> 到<code>arr[high]</code>）进行快速排序。</li><li>重复上述步骤，直到每个子数组的大小为 1 或者为空。</li></ol><p>快速排序的核心操作是分区（partition）和递归排序。分区操作根据基准元素将数组划分为两个部分，其中一部分的元素都小于基准元素，另一部分的元素都大于基准元素。递归排序对分区后的子数组进行递归调用，直到数组被完全排序</p></blockquote><div class="sourceCode" id="cb26"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb26-1"><a href="#cb26-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> partition<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> low<span class="op">,</span> <span class="dt">int</span> high<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb26-2"><a href="#cb26-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> pivot <span class="op">=</span> arr<span class="op">[</span>high<span class="op">];</span> <span class="co">// 选择最后一个元素作为基准值</span></span><span id="cb26-3"><a href="#cb26-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i <span class="op">=</span> low <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb26-4"><a href="#cb26-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> j<span class="op">;</span></span><span id="cb26-5"><a href="#cb26-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> low<span class="op">;</span> j <span class="op">&lt;=</span> high <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> j<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb26-6"><a href="#cb26-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb26-7"><a href="#cb26-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>j<span class="op">]</span> <span class="op">&lt;</span> pivot<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb26-8"><a href="#cb26-8" aria-hidden="true" tabindex="-1"></a>            i<span class="op">++;</span></span><span id="cb26-9"><a href="#cb26-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 交换 arr[i] 和 arr[j]</span></span><span id="cb26-10"><a href="#cb26-10" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span></span><span id="cb26-11"><a href="#cb26-11" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>j<span class="op">];</span></span><span id="cb26-12"><a href="#cb26-12" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>j<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb26-13"><a href="#cb26-13" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span><span id="cb26-14"><a href="#cb26-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb26-15"><a href="#cb26-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb26-16"><a href="#cb26-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 将基准值放置到正确的位置</span></span><span id="cb26-17"><a href="#cb26-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">];</span></span><span id="cb26-18"><a href="#cb26-18" aria-hidden="true" tabindex="-1"></a>    arr<span class="op">[</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>high<span class="op">];</span></span><span id="cb26-19"><a href="#cb26-19" aria-hidden="true" tabindex="-1"></a>    arr<span class="op">[</span>high<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb26-20"><a href="#cb26-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span><span id="cb26-21"><a href="#cb26-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="op">(</span>i <span class="op">+</span> <span class="dv">1</span><span class="op">);</span> <span class="co">// 返回基准值的索引</span></span><span id="cb26-22"><a href="#cb26-22" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb26-23"><a href="#cb26-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb26-24"><a href="#cb26-24" aria-hidden="true" tabindex="-1"></a><span class="co">// 快速排序算法</span></span><span id="cb26-25"><a href="#cb26-25" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> quickSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> low<span class="op">,</span> <span class="dt">int</span> high<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb26-26"><a href="#cb26-26" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>low <span class="op">&lt;</span> high<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb26-27"><a href="#cb26-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 找到基准值的索引</span></span><span id="cb26-28"><a href="#cb26-28" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> pivot <span class="op">=</span> partition<span class="op">(</span>arr<span class="op">,</span> low<span class="op">,</span> high<span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb26-29"><a href="#cb26-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 递归地对基准元素左边的子数组进行排序</span></span><span id="cb26-30"><a href="#cb26-30" aria-hidden="true" tabindex="-1"></a>        quickSort<span class="op">(</span>arr<span class="op">,</span> low<span class="op">,</span> pivot <span class="op">-</span> <span class="dv">1</span><span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb26-31"><a href="#cb26-31" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 递归地对基准元素右边的子数组进行排序</span></span><span id="cb26-32"><a href="#cb26-32" aria-hidden="true" tabindex="-1"></a>        quickSort<span class="op">(</span>arr<span class="op">,</span> pivot <span class="op">+</span> <span class="dv">1</span><span class="op">,</span> high<span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb26-33"><a href="#cb26-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb26-34"><a href="#cb26-34" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>希尔排序</strong></p><blockquote><p>是插入排序的一种改进算法，通过将待排序的数组按一定间隔分组，<strong>对每个分组进行插入排序</strong>，然后逐渐缩小间隔，最终完成整个数组的排序。</p></blockquote><div class="sourceCode" id="cb27"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb27-1"><a href="#cb27-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> shellSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb27-2"><a href="#cb27-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> gap<span class="op">,</span> i<span class="op">,</span> j<span class="op">;</span></span><span id="cb27-3"><a href="#cb27-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb27-4"><a href="#cb27-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 使用希尔增量，初始间隔为数组长度的一半，逐渐缩小间隔</span></span><span id="cb27-5"><a href="#cb27-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>gap <span class="op">=</span> n <span class="op">/</span> <span class="dv">2</span><span class="op">;</span> gap <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span> gap <span class="op">/=</span> <span class="dv">2</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb27-6"><a href="#cb27-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 对每个分组进行插入排序</span></span><span id="cb27-7"><a href="#cb27-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> gap<span class="op">;</span> i <span class="op">&lt;</span> n<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb27-8"><a href="#cb27-8" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span></span><span id="cb27-9"><a href="#cb27-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb27-10"><a href="#cb27-10" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 在当前分组内进行插入排序</span></span><span id="cb27-11"><a href="#cb27-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">for</span> <span class="op">(</span>j <span class="op">=</span> i<span class="op">;</span> j <span class="op">&gt;=</span> gap <span class="op">&amp;&amp;</span> arr<span class="op">[</span>j <span class="op">-</span> gap<span class="op">]</span> <span class="op">&gt;</span> temp<span class="op">;</span> j <span class="op">-=</span> gap<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb27-12"><a href="#cb27-12" aria-hidden="true" tabindex="-1"></a>                arr<span class="op">[</span>j<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>j <span class="op">-</span> gap<span class="op">];</span></span><span id="cb27-13"><a href="#cb27-13" aria-hidden="true" tabindex="-1"></a>                <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb27-14"><a href="#cb27-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">(*</span>moves<span class="op">)++;</span></span><span id="cb27-15"><a href="#cb27-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">&#125;</span></span><span id="cb27-16"><a href="#cb27-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb27-17"><a href="#cb27-17" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>j<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb27-18"><a href="#cb27-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">(*</span>moves<span class="op">)++;</span></span><span id="cb27-19"><a href="#cb27-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb27-20"><a href="#cb27-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb27-21"><a href="#cb27-21" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>堆排序</strong></p><blockquote><p>堆排序通过构建最大堆和逐步调整堆实现排序</p></blockquote><div class="sourceCode" id="cb28"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb28-1"><a href="#cb28-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> heapify<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span> i<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb28-2"><a href="#cb28-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> largest <span class="op">=</span> i<span class="op">;</span></span><span id="cb28-3"><a href="#cb28-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> l <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> i <span class="op">+</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb28-4"><a href="#cb28-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> r <span class="op">=</span> <span class="dv">2</span> <span class="op">*</span> i <span class="op">+</span> <span class="dv">2</span><span class="op">;</span></span><span id="cb28-5"><a href="#cb28-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-6"><a href="#cb28-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 比较左子节点和根节点的值，找出较大的节点</span></span><span id="cb28-7"><a href="#cb28-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>l <span class="op">&lt;</span> n<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb28-8"><a href="#cb28-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb28-9"><a href="#cb28-9" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>l<span class="op">]</span> <span class="op">&gt;</span> arr<span class="op">[</span>largest<span class="op">])</span> <span class="op">&#123;</span></span><span id="cb28-10"><a href="#cb28-10" aria-hidden="true" tabindex="-1"></a>            largest <span class="op">=</span> l<span class="op">;</span></span><span id="cb28-11"><a href="#cb28-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb28-12"><a href="#cb28-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb28-13"><a href="#cb28-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-14"><a href="#cb28-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 比较右子节点和当前最大节点的值，找出最大的节点</span></span><span id="cb28-15"><a href="#cb28-15" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>r <span class="op">&lt;</span> n<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb28-16"><a href="#cb28-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>comparisons<span class="op">)++;</span></span><span id="cb28-17"><a href="#cb28-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>arr<span class="op">[</span>r<span class="op">]</span> <span class="op">&gt;</span> arr<span class="op">[</span>largest<span class="op">])</span> <span class="op">&#123;</span></span><span id="cb28-18"><a href="#cb28-18" aria-hidden="true" tabindex="-1"></a>            largest <span class="op">=</span> r<span class="op">;</span></span><span id="cb28-19"><a href="#cb28-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb28-20"><a href="#cb28-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb28-21"><a href="#cb28-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-22"><a href="#cb28-22" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 如果最大节点不是当前节点，进行交换并继续调整子树</span></span><span id="cb28-23"><a href="#cb28-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>largest <span class="op">!=</span> i<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb28-24"><a href="#cb28-24" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span></span><span id="cb28-25"><a href="#cb28-25" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>largest<span class="op">];</span></span><span id="cb28-26"><a href="#cb28-26" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>largest<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb28-27"><a href="#cb28-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span><span id="cb28-28"><a href="#cb28-28" aria-hidden="true" tabindex="-1"></a>        heapify<span class="op">(</span>arr<span class="op">,</span> n<span class="op">,</span> largest<span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb28-29"><a href="#cb28-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb28-30"><a href="#cb28-30" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb28-31"><a href="#cb28-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-32"><a href="#cb28-32" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> heapSort<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> n<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> comparisons<span class="op">,</span> <span class="dt">int</span><span class="op">*</span> moves<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb28-33"><a href="#cb28-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> i<span class="op">;</span></span><span id="cb28-34"><a href="#cb28-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-35"><a href="#cb28-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 构建初始最大堆</span></span><span id="cb28-36"><a href="#cb28-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> n <span class="op">/</span> <span class="dv">2</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">;</span> i<span class="op">--)</span> <span class="op">&#123;</span></span><span id="cb28-37"><a href="#cb28-37" aria-hidden="true" tabindex="-1"></a>        heapify<span class="op">(</span>arr<span class="op">,</span> n<span class="op">,</span> i<span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb28-38"><a href="#cb28-38" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb28-39"><a href="#cb28-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb28-40"><a href="#cb28-40" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 逐步将最大元素移到数组末尾并调整堆</span></span><span id="cb28-41"><a href="#cb28-41" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span>i <span class="op">=</span> n <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span> i<span class="op">--)</span> <span class="op">&#123;</span></span><span id="cb28-42"><a href="#cb28-42" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> temp <span class="op">=</span> arr<span class="op">[</span><span class="dv">0</span><span class="op">];</span></span><span id="cb28-43"><a href="#cb28-43" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i<span class="op">];</span></span><span id="cb28-44"><a href="#cb28-44" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> temp<span class="op">;</span></span><span id="cb28-45"><a href="#cb28-45" aria-hidden="true" tabindex="-1"></a>        <span class="op">(*</span>moves<span class="op">)</span> <span class="op">+=</span> <span class="dv">3</span><span class="op">;</span></span><span id="cb28-46"><a href="#cb28-46" aria-hidden="true" tabindex="-1"></a>        heapify<span class="op">(</span>arr<span class="op">,</span> i<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> comparisons<span class="op">,</span> moves<span class="op">);</span></span><span id="cb28-47"><a href="#cb28-47" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb28-48"><a href="#cb28-48" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>生成不同的随机数</strong></p><div class="sourceCode" id="cb29"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb29-1"><a href="#cb29-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 生成大体上升序的随机数</span></span><span id="cb29-2"><a href="#cb29-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> getAscRandom<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb29-3"><a href="#cb29-3" aria-hidden="true" tabindex="-1"></a>    srand<span class="op">(</span>time<span class="op">(</span>NULL<span class="op">));</span></span><span id="cb29-4"><a href="#cb29-4" aria-hidden="true" tabindex="-1"></a>    arr<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">100</span><span class="op">;</span> <span class="co">// 随机生成第一个数</span></span><span id="cb29-5"><a href="#cb29-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb29-6"><a href="#cb29-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> range <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">10</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// 生成随机的增加范围</span></span><span id="cb29-7"><a href="#cb29-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="dv">10</span> <span class="op">&lt;</span> <span class="dv">3</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb29-8"><a href="#cb29-8" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">-</span> range<span class="op">;</span> <span class="co">// 基于前一个数减少范围得到当前数</span></span><span id="cb29-9"><a href="#cb29-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb29-10"><a href="#cb29-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb29-11"><a href="#cb29-11" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">+</span> range<span class="op">;</span> <span class="co">// 基于前一个数增加范围得到当前数</span></span><span id="cb29-12"><a href="#cb29-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb29-13"><a href="#cb29-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb29-14"><a href="#cb29-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb29-15"><a href="#cb29-15" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><div class="sourceCode" id="cb30"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb30-1"><a href="#cb30-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-2"><a href="#cb30-2" aria-hidden="true" tabindex="-1"></a><span class="co">// 生成大体上降序的随机数</span></span><span id="cb30-3"><a href="#cb30-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> getDescRandom<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb30-4"><a href="#cb30-4" aria-hidden="true" tabindex="-1"></a>    srand<span class="op">(</span>time<span class="op">(</span>NULL<span class="op">));</span></span><span id="cb30-5"><a href="#cb30-5" aria-hidden="true" tabindex="-1"></a>    arr<span class="op">[</span><span class="dv">0</span><span class="op">]</span> <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">100</span><span class="op">;</span> <span class="co">// 随机生成第一个数</span></span><span id="cb30-6"><a href="#cb30-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb30-7"><a href="#cb30-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> range <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">10</span> <span class="op">+</span> <span class="dv">1</span><span class="op">;</span> <span class="co">// 生成随机的增加范围</span></span><span id="cb30-8"><a href="#cb30-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="dv">10</span> <span class="op">&gt;</span> <span class="dv">3</span><span class="op">)</span> <span class="op">&#123;</span></span><span id="cb30-9"><a href="#cb30-9" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">-</span> range<span class="op">;</span> <span class="co">// 基于前一个数减少范围得到当前数</span></span><span id="cb30-10"><a href="#cb30-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb30-11"><a href="#cb30-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="op">&#123;</span></span><span id="cb30-12"><a href="#cb30-12" aria-hidden="true" tabindex="-1"></a>            arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> arr<span class="op">[</span>i <span class="op">-</span> <span class="dv">1</span><span class="op">]</span> <span class="op">+</span> range<span class="op">;</span> <span class="co">// 基于前一个数增加范围得到当前数</span></span><span id="cb30-13"><a href="#cb30-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">&#125;</span></span><span id="cb30-14"><a href="#cb30-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb30-15"><a href="#cb30-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb30-16"><a href="#cb30-16" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><div class="sourceCode" id="cb31"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb31-1"><a href="#cb31-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 生成随机数</span></span><span id="cb31-2"><a href="#cb31-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> getRandom<span class="op">(</span><span class="dt">int</span> arr<span class="op">[],</span> <span class="dt">int</span> size<span class="op">)</span> <span class="op">&#123;</span></span><span id="cb31-3"><a href="#cb31-3" aria-hidden="true" tabindex="-1"></a>    srand<span class="op">(</span>time<span class="op">(</span>NULL<span class="op">));</span></span><span id="cb31-4"><a href="#cb31-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> size<span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb31-5"><a href="#cb31-5" aria-hidden="true" tabindex="-1"></a>        arr<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> rand<span class="op">()</span> <span class="op">%</span> <span class="dv">500</span><span class="op">;</span></span><span id="cb31-6"><a href="#cb31-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb31-7"><a href="#cb31-7" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>针对不同的随机数编写不同的比较次数和关键字的移动次数的统计方法</strong></p><div class="sourceCode" id="cb32"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb32-1"><a href="#cb32-1" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_Random<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span></span><span id="cb32-2"><a href="#cb32-2" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-3"><a href="#cb32-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-4"><a href="#cb32-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-5"><a href="#cb32-5" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-6"><a href="#cb32-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-7"><a href="#cb32-7" aria-hidden="true" tabindex="-1"></a>        getRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-8"><a href="#cb32-8" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-9"><a href="#cb32-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-10"><a href="#cb32-10" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons<span class="op">/</span><span class="dv">5</span><span class="op">);</span></span><span id="cb32-11"><a href="#cb32-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves<span class="op">/</span><span class="dv">5</span><span class="op">);</span></span><span id="cb32-12"><a href="#cb32-12" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb32-13"><a href="#cb32-13" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_q_Random<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span><span class="co">//因为快速排序的参数传输和其他函数不同，额外编写的。</span></span><span id="cb32-14"><a href="#cb32-14" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-15"><a href="#cb32-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-16"><a href="#cb32-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-17"><a href="#cb32-17" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-18"><a href="#cb32-18" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-19"><a href="#cb32-19" aria-hidden="true" tabindex="-1"></a>        getRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-20"><a href="#cb32-20" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">0</span><span class="op">,</span><span class="dv">199</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-21"><a href="#cb32-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-22"><a href="#cb32-22" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-23"><a href="#cb32-23" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-24"><a href="#cb32-24" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb32-25"><a href="#cb32-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb32-26"><a href="#cb32-26" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_AscRandom<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span></span><span id="cb32-27"><a href="#cb32-27" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-28"><a href="#cb32-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-29"><a href="#cb32-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-30"><a href="#cb32-30" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-31"><a href="#cb32-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-32"><a href="#cb32-32" aria-hidden="true" tabindex="-1"></a>        getAscRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-33"><a href="#cb32-33" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-34"><a href="#cb32-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-35"><a href="#cb32-35" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-36"><a href="#cb32-36" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-37"><a href="#cb32-37" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb32-38"><a href="#cb32-38" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_q_AscRandom<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span></span><span id="cb32-39"><a href="#cb32-39" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-40"><a href="#cb32-40" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-41"><a href="#cb32-41" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-42"><a href="#cb32-42" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-43"><a href="#cb32-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-44"><a href="#cb32-44" aria-hidden="true" tabindex="-1"></a>        getAscRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-45"><a href="#cb32-45" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">199</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-46"><a href="#cb32-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-47"><a href="#cb32-47" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-48"><a href="#cb32-48" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-49"><a href="#cb32-49" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb32-50"><a href="#cb32-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb32-51"><a href="#cb32-51" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_DescRandom<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span></span><span id="cb32-52"><a href="#cb32-52" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-53"><a href="#cb32-53" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-54"><a href="#cb32-54" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-55"><a href="#cb32-55" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-56"><a href="#cb32-56" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-57"><a href="#cb32-57" aria-hidden="true" tabindex="-1"></a>        getRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-58"><a href="#cb32-58" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-59"><a href="#cb32-59" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-60"><a href="#cb32-60" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-61"><a href="#cb32-61" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-62"><a href="#cb32-62" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span><span id="cb32-63"><a href="#cb32-63" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> comp_q_DescRandom<span class="op">(</span><span class="dt">void</span><span class="op">(*</span>searchFunction<span class="op">)())</span></span><span id="cb32-64"><a href="#cb32-64" aria-hidden="true" tabindex="-1"></a><span class="op">&#123;</span></span><span id="cb32-65"><a href="#cb32-65" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> input_data<span class="op">[</span><span class="dv">200</span><span class="op">]</span> <span class="op">=</span> <span class="op">&#123;</span> <span class="dv">0</span> <span class="op">&#125;;</span></span><span id="cb32-66"><a href="#cb32-66" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> comparisons<span class="op">,</span> moves<span class="op">;</span></span><span id="cb32-67"><a href="#cb32-67" aria-hidden="true" tabindex="-1"></a>    comparisons <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> moves <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb32-68"><a href="#cb32-68" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">5</span><span class="op">;</span> i<span class="op">++)</span> <span class="op">&#123;</span></span><span id="cb32-69"><a href="#cb32-69" aria-hidden="true" tabindex="-1"></a>        getRandom<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">200</span><span class="op">);</span></span><span id="cb32-70"><a href="#cb32-70" aria-hidden="true" tabindex="-1"></a>        searchFunction<span class="op">(</span>input_data<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">199</span><span class="op">,</span> <span class="op">&amp;</span>comparisons<span class="op">,</span> <span class="op">&amp;</span>moves<span class="op">);</span></span><span id="cb32-71"><a href="#cb32-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">&#125;</span></span><span id="cb32-72"><a href="#cb32-72" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;比较次数: </span><span class="sc">%d\n</span><span class="st">&quot;</span><span class="op">,</span> comparisons <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-73"><a href="#cb32-73" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;移动次数: </span><span class="sc">%d\n\n</span><span class="st">&quot;</span><span class="op">,</span> moves <span class="op">/</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb32-74"><a href="#cb32-74" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>主函数实现</strong></p><blockquote><p>主要为程序的调用</p></blockquote><div class="sourceCode" id="cb33"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb33-1"><a href="#cb33-1" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()&#123;</span></span><span id="cb33-2"><a href="#cb33-2" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;数据集为随机数据：</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-3"><a href="#cb33-3" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;冒泡排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-4"><a href="#cb33-4" aria-hidden="true" tabindex="-1"></a>    comp_Random<span class="op">(</span>bubbleSort<span class="op">);</span></span><span id="cb33-5"><a href="#cb33-5" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;直接插入排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-6"><a href="#cb33-6" aria-hidden="true" tabindex="-1"></a>    comp_Random<span class="op">(</span>insertionSort<span class="op">);</span></span><span id="cb33-7"><a href="#cb33-7" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;简单选择排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-8"><a href="#cb33-8" aria-hidden="true" tabindex="-1"></a>    comp_Random<span class="op">(</span>selectionSort<span class="op">);</span></span><span id="cb33-9"><a href="#cb33-9" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;快速排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-10"><a href="#cb33-10" aria-hidden="true" tabindex="-1"></a>    comp_q_Random<span class="op">(</span>quickSort<span class="op">);</span></span><span id="cb33-11"><a href="#cb33-11" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;希尔排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-12"><a href="#cb33-12" aria-hidden="true" tabindex="-1"></a>    comp_Random<span class="op">(</span>shellSort<span class="op">);</span></span><span id="cb33-13"><a href="#cb33-13" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;堆排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-14"><a href="#cb33-14" aria-hidden="true" tabindex="-1"></a>    comp_Random<span class="op">(</span>heapSort<span class="op">);</span></span><span id="cb33-15"><a href="#cb33-15" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-16"><a href="#cb33-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb33-17"><a href="#cb33-17" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;数据集为大体上升序的随机数：</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-18"><a href="#cb33-18" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;冒泡排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-19"><a href="#cb33-19" aria-hidden="true" tabindex="-1"></a>    comp_AscRandom<span class="op">(</span>bubbleSort<span class="op">);</span></span><span id="cb33-20"><a href="#cb33-20" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;直接插入排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-21"><a href="#cb33-21" aria-hidden="true" tabindex="-1"></a>    comp_AscRandom<span class="op">(</span>insertionSort<span class="op">);</span></span><span id="cb33-22"><a href="#cb33-22" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;简单选择排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-23"><a href="#cb33-23" aria-hidden="true" tabindex="-1"></a>    comp_AscRandom<span class="op">(</span>selectionSort<span class="op">);</span></span><span id="cb33-24"><a href="#cb33-24" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;快速排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-25"><a href="#cb33-25" aria-hidden="true" tabindex="-1"></a>    comp_q_AscRandom<span class="op">(</span>quickSort<span class="op">);</span></span><span id="cb33-26"><a href="#cb33-26" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;希尔排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-27"><a href="#cb33-27" aria-hidden="true" tabindex="-1"></a>    comp_AscRandom<span class="op">(</span>shellSort<span class="op">);</span></span><span id="cb33-28"><a href="#cb33-28" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;堆排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-29"><a href="#cb33-29" aria-hidden="true" tabindex="-1"></a>    comp_AscRandom<span class="op">(</span>heapSort<span class="op">);</span></span><span id="cb33-30"><a href="#cb33-30" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-31"><a href="#cb33-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb33-32"><a href="#cb33-32" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;数据集为大体上降序的随机数：</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-33"><a href="#cb33-33" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;冒泡排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-34"><a href="#cb33-34" aria-hidden="true" tabindex="-1"></a>    comp_DescRandom<span class="op">(</span>bubbleSort<span class="op">);</span></span><span id="cb33-35"><a href="#cb33-35" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;直接插入排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-36"><a href="#cb33-36" aria-hidden="true" tabindex="-1"></a>    comp_DescRandom<span class="op">(</span>insertionSort<span class="op">);</span></span><span id="cb33-37"><a href="#cb33-37" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;简单选择排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-38"><a href="#cb33-38" aria-hidden="true" tabindex="-1"></a>    comp_DescRandom<span class="op">(</span>selectionSort<span class="op">);</span></span><span id="cb33-39"><a href="#cb33-39" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;快速排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-40"><a href="#cb33-40" aria-hidden="true" tabindex="-1"></a>    comp_q_DescRandom<span class="op">(</span>quickSort<span class="op">);</span></span><span id="cb33-41"><a href="#cb33-41" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;希尔排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-42"><a href="#cb33-42" aria-hidden="true" tabindex="-1"></a>    comp_DescRandom<span class="op">(</span>shellSort<span class="op">);</span></span><span id="cb33-43"><a href="#cb33-43" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;堆排序:</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-44"><a href="#cb33-44" aria-hidden="true" tabindex="-1"></a>    comp_DescRandom<span class="op">(</span>heapSort<span class="op">);</span></span><span id="cb33-45"><a href="#cb33-45" aria-hidden="true" tabindex="-1"></a>    printf<span class="op">(</span><span class="st">&quot;</span><span class="sc">\n</span><span class="st">&quot;</span><span class="op">);</span></span><span id="cb33-46"><a href="#cb33-46" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb33-47"><a href="#cb33-47" aria-hidden="true" tabindex="-1"></a><span class="op">&#125;</span></span></code></pre></div><p><strong>在数据集大小为200的情况下：</strong></p><ol type="1"><li>冒泡排序（Bubble Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于小规模数据排序</strong></li><li>比较次数：最好情况为0，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>直接插入排序（Insertion Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于基本有序的数据排序</strong></li><li>比较次数：最好情况为199，最坏情况为19900</li><li>移动次数：最好情况为199，最坏情况为59700</li></ul></li><li>简单选择排序（Selection Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于数据量较小的排序</strong></li><li>比较次数：最好情况为19900，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>快速排序（Quick Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(logn)~O(n)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1526，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>平均时间复杂度：取决于增量序列的选择</li><li>最坏时间复杂度：取决于增量序列的选择</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于中等规模数据排序</strong></li><li>比较次数：最好情况为1247，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>堆排序（Heap Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(nlogn)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1296，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li></ol><p><strong>不同数据集的影响</strong></p><ol type="1"><li>冒泡排序（Bubble Sort）：<ul><li>随机数据：由于每次比较只交换相邻元素，随机数据的冒泡排序性能较差，需要较多的比较和交换操作，波动较大。</li><li>大体上升序的随机数：冒泡排序在大体上升序的随机数上性能较好，因为大部分元素已经有序，只需要少量的比较和交换操作，波动较小。</li><li>大体下降序的随机数：冒泡排序在大体下降序的随机数上性能较差，需要较多的比较和交换操作来逆转递减序列，波动较大。</li></ul></li><li>插入排序（Insertion Sort）：<ul><li>随机数据：插入排序在随机数据上的性能较好，因为每个元素都与前面有序的部分进行比较，插入到正确的位置，波动较小。</li><li>大体上升序的随机数：插入排序在大体上升序的随机数上性能较好，只需要少量的比较操作就可以找到正确位置，波动较小。</li><li>大体下降序的随机数：插入排序在大体下降序的随机数上性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>快速排序（Quick Sort）：<ul><li>随机数据：快速排序在随机数据上的性能通常较好，它通过选择一个基准值并分区来排序，波动较小。</li><li>大体上升序的随机数：快速排序在大体上升序的随机数上的性能可能会略好一些，因为它能快速划分已经有序的部分，波动较小。</li><li>大体下降序的随机数：快速排序在大体下降序的随机数上的性能较差，需要较多的比较和划分操作，波动较大。</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>随机数据：希尔排序在随机数据上的性能通常较好，它通过将数组分成多个子序列进行插入排序，逐渐缩小子序列的间隔，最终完成排序，波动较小。</li><li>大体上升序的随机数：希尔排序在大体上升序的随机数上的性能较好，由于大部分元素已经有序，插入排序的次数会减少，波动较小。</li><li>大体下降序的随机数：希尔排序在大体下降序的随机数上的性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>堆排序（Heap Sort）：<ul><li>随机数据：堆排序在随机数据上的性能通常较好，它通过构建最大堆（或最小堆）来进行排序，具有较好的稳定性和较少的波动。</li><li>大体上升序的随机数：堆排序在大体上升序的随机数上的性能较好，最大堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li><li>大体下降序的随机数：堆排序在大体下降序的随机数上的性能较好，最小堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实习内容&quot;&gt;实习内容&lt;/h1&gt;
&lt;h2 id=&quot;一马踏棋盘&quot;&gt;一、马踏棋盘&lt;/h2&gt;
&lt;h4 id=&quot;问题描述&quot;&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将马随机放在国际象棋的8×8棋盘[0～7][0～7]的某个方格中，马按走棋规则进行移</summary>
      
    
    
    
    <category term="课程" scheme="https://youyouhangyong.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="数据结构" scheme="https://youyouhangyong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
