<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>悠攸涵泳</title>
  
  
  <link href="https://youyouhangyong.github.io/atom.xml" rel="self"/>
  
  <link href="https://youyouhangyong.github.io/"/>
  <updated>2024-08-22T10:56:17.160Z</updated>
  <id>https://youyouhangyong.github.io/</id>
  
  <author>
    <name>youyouhangyong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>创建一个3D模型在自己博客里</title>
    <link href="https://youyouhangyong.github.io/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/"/>
    <id>https://youyouhangyong.github.io/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/</id>
    <published>2024-08-22T08:19:17.000Z</published>
    <updated>2024-08-22T10:56:17.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个3D模型在自己博客里"><a href="#创建一个3D模型在自己博客里" class="headerlink" title="创建一个3D模型在自己博客里"></a>创建一个3D模型在自己博客里</h2><p>最近在美化博客的时候，发现许多博客都有一个Live2d的二次元角色在博客页面，还会跟着鼠标动，有些还会互动。</p><p>像这样</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/mx1.png" alt="mx1"></p><p>这样的</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/mx2.png" alt="mx2"></p><p>虽然我知道Hexo有技术支持实现这样的功能，实现起来也很简单。</p><p>但是我更喜欢像在Minecraft主页实现的小人这样效果：</p><p> <img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/mx3.png" alt="mx3"></p><p>由于需要将3D模型展示在自己的博客里，于是便开始寻找解决方案，经过一番搜索，发现了一个比较方便的方案，那就是使用[Three.js](<a href="https://threejs.org/examples/">three.js examples (threejs.org)</a>)。里面有非常多、看起来非常NB的示例，都是用了<strong>Three.js</strong>。</p><h3 id="Three-js"><a href="#Three-js" class="headerlink" title="Three.js"></a>Three.js</h3><p>Three.js是一个基于WebGL的JavaScript库，它可以帮助我们轻松地创建3D场景、模型、动画等。我们可以使用Three.js来创建一个3D模型，并将其展示在自己的博客里。</p><h3 id="获得3D模型"><a href="#获得3D模型" class="headerlink" title="获得3D模型"></a>获得3D模型</h3><hr><p>首先第一步肯定是拿到模型，说到模型，我是基本没有建模过的，但是搞到一个Minecraft里面的人物模型还是非常简单的。</p><p>我也是查了好多资料，才发现居然有专门针对Minecraft建模的软件：<strong>Blockbench</strong>。下载链接：<a href="https://www.blockbench.net/downloads">Downloads - Blockbench</a></p><p>打开软件，选择左侧的Minecraft Skin,然后选择Create New Model</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/bz1.png"></p><p>最后选择一下你的Minecraft 人物的皮肤贴图，直接点击Confiem。</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/bz2.png"></p><p>然后我们就看到我们的模型已经建好了，是不是非常快！</p><p>如果你是双层皮肤，那么你可能需要点击一下右下角的的小眼睛，他把你外面的皮肤隐藏掉了。</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/bz3.png"></p><p>最后我们，调整一下模型的动作，改为立正姿势，方便我们以后给模型加动作，然后就可以直接保存模型了（记得保存为glTF格式）。</p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/bz4.png"></p><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/bz5.png"></p><p>就这样模型问题就解决了，我们得到了一个glTF格式的模型文件。</p><h3 id="在博客中展示3D模型"><a href="#在博客中展示3D模型" class="headerlink" title="在博客中展示3D模型"></a>在博客中展示3D模型</h3><hr><h4 id="设置模型的放置位置"><a href="#设置模型的放置位置" class="headerlink" title="设置模型的放置位置"></a>设置模型的放置位置</h4><p>接下来，我们需要在博客中展示3D模型。我们可以使用Three.js来加载和渲染3D模型。</p><p>首先在我们博客里找个地方放我们的模型：</p><p>我使用的是<code>hexo-theme-butterfly-dev</code>这个主题，我们在主题文件夹下找到<code>footer.pug</code>文件，添加一下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 在footer中插入Three.js渲染容器</span><br><span class="line">#threejs-container(style=&quot;position: fixed; bottom: 10px; left: 10px; width: 250px; height: 600px; z-index: 1000;&quot;)</span><br><span class="line">// CSS 在屏幕宽度小于810px是隐藏#threejs-container所展示的内容</span><br><span class="line">style.</span><br><span class="line">  @media only screen and (max-width: 810px) &#123;</span><br><span class="line">    #threejs-container &#123;</span><br><span class="line">      display: none;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>#threejs-container</code> 渲染容器的 <code>div</code> 元素</p><ul><li><code>position: fixed;</code>：将容器固定在页面的指定位置，不随页面滚动而移动。</li><li><code>bottom: 10px; left: 10px;</code>：将容器固定在距离页面底部 10px、左侧 10px 的位置。</li><li><code>width: 250px; height: 600px;</code>：设置容器的宽度为 250px，高度为 600px。</li><li><code>z-index: 1000;</code>：设置容器的 z 轴层级，确保容器显示在页面的前面，不被其他元素遮挡。</li></ul></li><li><p><code>style.</code> 块定义了一些 CSS 样式，用于处理不同屏幕宽度下的显示效果：</p><ul><li><code>@media only screen and (max-width: 810px) &#123; ... &#125;</code>：表示当屏幕的宽度小于等于 810px 时，隐藏 <code>#threejs-container</code> 元素，使其不显示在页面上。</li></ul></li></ol><p>这样我们的放置模型的位置就定下来了，在页面的左下角，位于顶层，不随页面滚动。</p><h4 id="使用Threejs加载模型"><a href="#使用Threejs加载模型" class="headerlink" title="使用Threejs加载模型"></a>使用Threejs加载模型</h4><p>我们编写一个js代码，名字就叫<code>threejs-model.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明全局变量</span></span><br><span class="line"><span class="keyword">let</span> model, mixer, head, body, rightArm, leftArm, rightLeg, leftLeg;</span><br><span class="line"><span class="keyword">const</span> clock = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Clock</span>();</span><br><span class="line"><span class="keyword">let</span> mouseX = <span class="number">0</span>, mouseY = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取容器</span></span><br><span class="line">    <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;threejs-container&#x27;</span>); <span class="comment">//获取加载模型的渲染窗口</span></span><br><span class="line">    <span class="keyword">if</span> (!container) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Element with ID &#x27;threejs-container&#x27; not found.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置场景、相机和渲染器</span></span><br><span class="line">    <span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, container.<span class="property">clientWidth</span> / container.<span class="property">clientHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>);</span><br><span class="line">    camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建渲染器并启用 alpha 透明度</span></span><br><span class="line">    <span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>(&#123; <span class="attr">antialias</span>: <span class="literal">true</span>, <span class="attr">alpha</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">    renderer.<span class="title function_">setSize</span>(container.<span class="property">clientWidth</span>, container.<span class="property">clientHeight</span>);</span><br><span class="line">    renderer.<span class="title function_">setClearColor</span>(<span class="number">0xffffff</span>,<span class="number">0</span>); <span class="comment">// 设置背景为透明</span></span><br><span class="line">    container.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加环境光</span></span><br><span class="line">    <span class="keyword">const</span> ambientLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AmbientLight</span>(<span class="number">0xffffff</span>, <span class="number">0.5</span>);</span><br><span class="line">    scene.<span class="title function_">add</span>(ambientLight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加半球光</span></span><br><span class="line">    <span class="keyword">const</span> hemisphereLight = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">HemisphereLight</span>(<span class="number">0xffffff</span>, <span class="number">0x444444</span>, <span class="number">1</span>);</span><br><span class="line">    hemisphereLight.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    scene.<span class="title function_">add</span>(hemisphereLight);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载模型</span></span><br><span class="line">    <span class="keyword">const</span> loader = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">GLTFLoader</span>();</span><br><span class="line">    loader.<span class="title function_">load</span>(<span class="string">&#x27;/models/model.gltf&#x27;</span>, <span class="keyword">function</span>(<span class="params">gltf</span>) &#123; <span class="comment">//加载模型</span></span><br><span class="line">        model = gltf.<span class="property">scene</span>;</span><br><span class="line">        <span class="comment">//根据具体需求调整模型位置</span></span><br><span class="line">        model.<span class="property">rotation</span>.<span class="property">y</span> = <span class="title class_">Math</span>.<span class="property">PI</span>; <span class="comment">// 使模型旋转180度，面向相机</span></span><br><span class="line">        model.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0</span>, -<span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 将模型向下移动1个单位，使头部显示出来</span></span><br><span class="line">        scene.<span class="title function_">add</span>(model);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取各部位节点</span></span><br><span class="line">        head = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;Head&#x27;</span>);</span><br><span class="line">        body = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;Body&#x27;</span>);</span><br><span class="line">        rightArm = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;RightArm&#x27;</span>);</span><br><span class="line">        leftArm = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;LeftArm&#x27;</span>);</span><br><span class="line">        rightLeg = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;RightLeg&#x27;</span>);</span><br><span class="line">        leftLeg = model.<span class="title function_">getObjectByName</span>(<span class="string">&#x27;LeftLeg&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动画混合器</span></span><br><span class="line">        mixer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AnimationMixer</span>(model);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手臂和腿的摆动动画</span></span><br><span class="line">        <span class="keyword">const</span> rightArmRotationKF = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">QuaternionKeyframeTrack</span>(<span class="string">&#x27;RightArm.quaternion&#x27;</span>, [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>], [</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftArmRotationKF = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">QuaternionKeyframeTrack</span>(<span class="string">&#x27;LeftArm.quaternion&#x27;</span>, [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>], [</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> rightLegRotationKF = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">QuaternionKeyframeTrack</span>(<span class="string">&#x27;RightLeg.quaternion&#x27;</span>, [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>], [</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> leftLegRotationKF = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">QuaternionKeyframeTrack</span>(<span class="string">&#x27;LeftLeg.quaternion&#x27;</span>, [<span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>], [</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(-<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>(),</span><br><span class="line">            ...<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Quaternion</span>().<span class="title function_">setFromEuler</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Euler</span>(<span class="number">0.3</span>, <span class="number">0</span>, <span class="number">0</span>)).<span class="title function_">toArray</span>()</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建动画剪辑</span></span><br><span class="line">        <span class="keyword">const</span> clip = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">AnimationClip</span>(<span class="string">&#x27;walk&#x27;</span>, <span class="number">1</span>, [</span><br><span class="line">            rightArmRotationKF, leftArmRotationKF,</span><br><span class="line">            rightLegRotationKF, leftLegRotationKF</span><br><span class="line">        ]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 应用并播放动画</span></span><br><span class="line">        <span class="keyword">const</span> action = mixer.<span class="title function_">clipAction</span>(clip);</span><br><span class="line">        action.<span class="title function_">setLoop</span>(<span class="variable constant_">THREE</span>.<span class="property">LoopRepeat</span>);</span><br><span class="line">        action.<span class="title function_">play</span>();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听鼠标移动事件</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onDocumentMouseMove, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 动画循环</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">animate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(animate);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mixer) &#123;</span><br><span class="line">            mixer.<span class="title function_">update</span>(clock.<span class="title function_">getDelta</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 动态调整头部和身体部分的旋转</span></span><br><span class="line">        <span class="keyword">if</span> (head) &#123;</span><br><span class="line">            head.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.3</span>; <span class="comment">// 头部更大幅度左右旋转</span></span><br><span class="line">            head.<span class="property">rotation</span>.<span class="property">x</span> = mouseY * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.1</span>; <span class="comment">// 头部轻微上下旋转</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (body) &#123;</span><br><span class="line">            body.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.1</span>; <span class="comment">// 身体轻微左右旋转</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightArm &amp;&amp; leftArm) &#123;</span><br><span class="line">            rightArm.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.05</span>; <span class="comment">// 右臂轻微左右旋转</span></span><br><span class="line">            leftArm.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.05</span>; <span class="comment">// 左臂轻微左右旋转</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (rightLeg &amp;&amp; leftLeg) &#123;</span><br><span class="line">            rightLeg.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.05</span>; <span class="comment">// 右腿轻微左右旋转</span></span><br><span class="line">            leftLeg.<span class="property">rotation</span>.<span class="property">y</span> = mouseX * <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="number">0.05</span>; <span class="comment">// 左腿轻微左右旋转</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        renderer.<span class="title function_">render</span>(scene, camera);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">animate</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鼠标移动事件处理函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">onDocumentMouseMove</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    mouseX = (event.<span class="property">clientX</span> / <span class="variable language_">window</span>.<span class="property">innerWidth</span>) * <span class="number">2</span> - <span class="number">1</span>;</span><br><span class="line">    mouseY = -(event.<span class="property">clientY</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>) * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待 DOM 完全加载</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ok，到这里基本就完成了。</p><h4 id="导入必要文件"><a href="#导入必要文件" class="headerlink" title="导入必要文件"></a>导入必要文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loader.<span class="title function_">load</span>(<span class="string">&#x27;/models/model.gltf&#x27;</span>, <span class="keyword">function</span>(<span class="params">gltf</span>) &#123; <span class="comment">//加载模型</span></span><br></pre></td></tr></table></figure><p>现在我们根据上面代码创建一个文件夹：</p><p>在博客的根目录下的 <code>/source/models/model.gltf</code> 添加model.gltf模型文件</p><p>在博客的根目录下的<code>/source/static/js/threejs-model.js</code>创建js文件添加上面的js代码</p><p>在主题的<code>_config,yml</code>文件中引用threejs的CND和我们自己编写js代码:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src=&quot;https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js&quot;&gt;&lt;/script&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">async</span> <span class="string">data-pjax</span> <span class="string">src=&quot;/static/js/threejs-model.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="查看效果"><a href="#查看效果" class="headerlink" title="查看效果"></a>查看效果</h4><p>我们直接一个三连</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/2024/08/22/%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E6%A8%A1%E5%9E%8B%E5%9C%A8%E8%87%AA%E5%B7%B1%E5%8D%9A%E5%AE%A2%E9%87%8C/jg.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;创建一个3D模型在自己博客里&quot;&gt;&lt;a href=&quot;#创建一个3D模型在自己博客里&quot; class=&quot;headerlink&quot; title=&quot;创建一个3D模型在自己博客里&quot;&gt;&lt;/a&gt;创建一个3D模型在自己博客里&lt;/h2&gt;&lt;p&gt;最近在美化博客的时候，发现许多博客都有一个L</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://youyouhangyong.github.io/tags/Hexo/"/>
    
    <category term="博客" scheme="https://youyouhangyong.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="模型" scheme="https://youyouhangyong.github.io/tags/%E6%A8%A1%E5%9E%8B/"/>
    
    <category term="Minecraft" scheme="https://youyouhangyong.github.io/tags/Minecraft/"/>
    
  </entry>
  
  <entry>
    <title>Perlin噪声</title>
    <link href="https://youyouhangyong.github.io/2024/08/21/Perlin%E5%99%AA%E5%A3%B0/"/>
    <id>https://youyouhangyong.github.io/2024/08/21/Perlin%E5%99%AA%E5%A3%B0/</id>
    <published>2024-08-21T11:52:00.000Z</published>
    <updated>2024-08-22T06:28:21.558Z</updated>
    
    <content type="html"><![CDATA[<h3 id="perlin噪声">Perlin噪声</h3><h4 id="引言">引言</h4><p>在计算机图形学中，Perlin噪声是一种非常重要的算法，它被广泛用于生成自然现象，如云朵、地形、火焰等。它的发明者KenPerlin在1983年首次提出了这一算法，并在1985年因这项工作获得了奥斯卡科学技术奖。</p><p><ahref="https://mrl.cs.nyu.edu/~perlin/doc/oscar.html">原始实现获得奥斯卡科学技术奖</a></p><p>Perlin噪声之所以受欢迎，是因为它能生成看似随机但具有连续性和平滑性的噪声，这使得生成的图形更自然。</p><h4 id="perlin噪声的历史">Perlin噪声的历史</h4><p>KenPerlin发明Perlin噪声的初衷是为了解决传统伪随机噪声在计算机图形学中产生的不自然感。传统噪声函数往往会在图像中产生尖锐的、不连续的过渡，导致图像看起来不够真实。为了解决这个问题，Perlin提出了一种可以生成“渐进式噪声”的方法，这种噪声在空间上是连续的，过渡平滑，可以很好地模拟自然现象。</p><p>Perlin噪声的最初版本是基于一维的，之后扩展到了二维和三维。在1985年，这一算法被应用于电影《创：战纪》的特效制作中，用于生成云朵、烟雾等特效。KenPerlin因此获得了图形学界的广泛认可，并在1985年获得奥斯卡科学技术奖。</p><h4 id="perlin噪声的原理">Perlin噪声的原理</h4><p>Perlin噪声的核心思想是通过在空间中的各个点上生成一组伪随机梯度，并通过插值来平滑过渡。这种方法使得噪声在整个空间中呈现出连续变化的趋势，而不是像传统噪声那样在各个点之间出现剧烈的变化。</p><p>具体来说，Perlin噪声生成过程可以分为以下几个步骤：</p><ol type="1"><li><p><strong>网格划分</strong>：将整个空间划分成一个个小网格。在每个网格的顶点上分配一个随机的梯度向量。</p></li><li><p><strong>计算相对位置</strong>：对于任意一个输入点，找到它所在的网格，并计算该点相对于网格顶点的偏移量。</p></li><li><p><strong>梯度点积</strong>：使用前面生成的随机梯度向量与偏移量进行点积运算，生成每个顶点的贡献值。</p></li><li><p><strong>平滑插值</strong>：使用插值函数对各个顶点的贡献值进行平滑插值，得到最终的噪声值。</p><p>在 Perlin 噪声中，网格点（gridpoint）是噪声函数定义的固定点，这些点在一个规则的网格上排列。网格通常是一个二维或三维的结构，每个维度上等距分布。Perlin噪声会为每个网格点分配一个随机的梯度向量，这些梯度向量用于计算噪声值在该点附近的变化。</p><p>当输入位置位于两个网格点之间时，Perlin噪声函数会使用这些梯度向量和插值函数来平滑地计算该位置的噪声值。这种通过网格点生成的平滑噪声广泛用于生成自然的纹理、地形等。</p></li></ol><p>我们使用Python来可视化展示Perlin 噪声的生成过程：</p><p>首先我们进行网格划分，并为每个网格点分配随机梯度向量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">perlin_noise_visualization</span>(<span class="params">size=<span class="number">5</span>, resolution=<span class="number">100</span></span>):</span><br><span class="line">    <span class="comment"># 步骤1: 创建网格</span></span><br><span class="line">    grid_points = np.linspace(<span class="number">0</span>, size, resolution)</span><br><span class="line">    x, y = np.meshgrid(grid_points, grid_points)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤2:定义网格点</span></span><br><span class="line">    x0 = (x // <span class="number">1</span>).astype(<span class="built_in">int</span>)</span><br><span class="line">    y0 = (y // <span class="number">1</span>).astype(<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤3: 计算单位方格内各点的相对位置</span></span><br><span class="line">    x_rel = x - x0</span><br><span class="line">    y_rel = y - y0</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤4:为每个网格点分配随机梯度向量</span></span><br><span class="line">    angles = np.random.rand(resolution + <span class="number">1</span>, resolution + <span class="number">1</span>) * <span class="number">2</span> * np.pi  <span class="comment"># 每个网格点生成一个0到2π之间的随机角度</span></span><br><span class="line">    gradients_x = np.cos(angles)  <span class="comment"># 计算该角度的x分量。</span></span><br><span class="line">    gradients_y = np.sin(angles)  <span class="comment"># 计算该角度的y分量。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可视化网格和梯度向量</span></span><br><span class="line">    fig, ax = plt.subplots(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    ax.quiver(x0, y0, gradients_x[:-<span class="number">1</span>, :-<span class="number">1</span>], gradients_y[:-<span class="number">1</span>, :-<span class="number">1</span>], color=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    ax.set_title(<span class="string">&quot;Grid Points and Gradient Vectors&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><figure><img src="GridPointsandGradientVectors.png"alt="GridPointsandGradientVectors" /><figcaption aria-hidden="true">GridPointsandGradientVectors</figcaption></figure><hr /><p>然后计算梯度向量与距离向量的点积。这个点积就是表示输入点相对于网格点的影响程度。</p><p>数学上，点积的原理是将两个向量的关系投影到梯度向量的方向上。具体来说：</p><ul><li>梯度向量代表了噪声在该网格点的变化方向。</li><li>距离向量表示输入点与网格点的相对位置。</li><li>当两向量平行时，点积最大，表明输入点位于梯度变化的主方向上；当两向量垂直时，点积为零，表明输入点对噪声的影响最小。这个点积的结果用于加权插值，形成平滑的噪声值。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤5:计算梯度向量与距离向量的点积</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dot_grid_gradient</span>(<span class="params">ix, iy, x, y</span>):  <span class="comment"># dx 和 dy 分别表示输入点 (x, y) 与网格点 (ix, iy) 的水平和垂直距离。</span></span><br><span class="line">        dx = x - ix</span><br><span class="line">        dy = y - iy</span><br><span class="line">        gradient = np.array([gradients_x[iy, ix], gradients_y[iy, ix]])  <span class="comment"># 获取梯度向量</span></span><br><span class="line">        <span class="keyword">return</span> dx * gradient[<span class="number">0</span>] + dy * gradient[<span class="number">1</span>]  <span class="comment"># 计算距离向量与梯度向量的点积。</span></span><br><span class="line"></span><br><span class="line">    n00 = dot_grid_gradient(x0, y0, x, y)</span><br><span class="line">    n10 = dot_grid_gradient(x0 + <span class="number">1</span>, y0, x, y)</span><br><span class="line">    n01 = dot_grid_gradient(x0, y0 + <span class="number">1</span>, x, y)</span><br><span class="line">    n11 = dot_grid_gradient(x0 + <span class="number">1</span>, y0 + <span class="number">1</span>, x, y)</span><br><span class="line">  <span class="comment"># n00、n10、n01 和 n11 代表的是在四个相邻的网格点处，梯度向量与输入点的距离向量的点积结果</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;n00: (0,0) Grid Point Contribution&quot;</span>)</span><br><span class="line">    plt.imshow(n00, cmap=cm.viridis, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;n10: (1,0) Grid Point Contribution&quot;</span>)</span><br><span class="line">    plt.imshow(n10, cmap=cm.viridis, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;n01: (0,1) Grid Point Contribution&quot;</span>)</span><br><span class="line">    plt.imshow(n01, cmap=cm.viridis, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">    plt.title(<span class="string">&quot;n11: (1,1) Grid Point Contribution&quot;</span>)</span><br><span class="line">    plt.imshow(n11, cmap=cm.viridis, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line"></span><br><span class="line">    plt.suptitle(<span class="string">&quot;Perlin Noise Without Interpolation&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>随后我们直接绘制<code>n00</code>、<code>n10</code>、<code>n01</code>和 <code>n11</code> 的图像的结果：</p><figure><img src="PerlinNoiseWithoutInterpolation.png"alt="PerlinNoiseWithoutInterpolation" /><figcaptionaria-hidden="true">PerlinNoiseWithoutInterpolation</figcaption></figure><p>由于未进行插值处理，图像中的噪声看起来是块状的，并且在不同区域之间存在明显的断层和不连续的变化。这是因为在每个网格点之间的值没有进行平滑过渡，同时也直接反映了噪声在这些点上的随机性。</p><hr /><p>最后进行插值操作:</p><p>在Perlin噪声的生成中，<code>fade(t)</code>函数用于平滑插值。具体来说，它对 <code>t</code>值进行处理，使得噪声在网格点之间的过渡更加平滑。</p><p>数学上，<code>fade(t)</code> 是一个三次方平滑函数，其公式为：</p><p><span class="math display">\[f(t) = t^3 \times (t \times (6t - 15) +10)\]</span></p><p>这个函数被应用于插值计算中，通过对两个噪声值之间的插值来平滑噪声。</p><p>首先，计算出 <code>x</code> 和 <code>y</code> 的相对位置(<code>u</code> 和 <code>v</code>) 然后使用 <code>fade(u)</code> 和<code>fade(v)</code> 来插值生成平滑的噪声值。</p><p><strong>u = fade(x_rel)</strong> <strong>v = fade(y_rel)</strong></p><p>在水平方向的线性插值中，nx0 和 nx1 分别对n00和n10、n01和n11插值：</p><p><span class="math display">\[ nx0=(1−u)⋅n00+u⋅n10\]</span></p><p><span class="math display">\[nx1=(1−u)⋅n01+u⋅n11 \]</span></p><p>其中，<code>u</code> 是相对位置 <code>x_rel</code> 经过<code>fade</code> 函数平滑后的结果。这两个公式分别对 <code>n00</code> 与<code>n10</code>，<code>n01</code> 与 <code>n11</code>进行线性插值，从而在水平方向上计算出两个新的插值结果 <code>nx0</code> 和<code>nx1</code>。</p><p>在垂直方向进行线性插值，计算最终的噪声值 <code>perlin_value</code>:</p><p><span class="math display">\[ value=(1−v)⋅nx0+v⋅nx1\]</span></p><p>其中，<code>v</code> 是相对位置 <code>y_rel</code> 经过<code>fade</code> 函数平滑后的结果。这个公式在垂直方向上对<code>nx0</code> 和 <code>nx1</code> 进行线性插值，从而计算出最终的Perlin 噪声值 <code>perlin_value</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 步骤6 插值</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">fade</span>(<span class="params">t</span>): <span class="comment"># fade函数将线性插值转换为更平滑的插值，通过使用三次函数来平滑过渡。</span></span><br><span class="line">        <span class="keyword">return</span> t * t * t * (t * (t * <span class="number">6</span> - <span class="number">15</span>) + <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    u = fade(x_rel)</span><br><span class="line">    v = fade(y_rel)</span><br><span class="line">    <span class="comment"># 水平插值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 首先在水平方向进行线性插值：nx0 和 nx1 分别对n00和n10、n01和n11插值。</span></span><br><span class="line">    <span class="comment"># 公式为：nx0 = (1 - u) * n00 + u * n10，nx1 = (1 - u) * n01 + u * n11，其中u是x_rel经过fade后的结果。</span></span><br><span class="line">    nx0 = (<span class="number">1</span> - u) * n00 + u * n10</span><br><span class="line">    nx1 = (<span class="number">1</span> - u) * n01 + u * n11</span><br><span class="line">    <span class="comment"># 垂直插值 得到最终的噪声值perlin_value</span></span><br><span class="line">    perlin_value = (<span class="number">1</span> - v) * nx0 + v * nx1</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 步骤7: 展示</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">    plt.imshow(perlin_value, cmap=cm.viridis, origin=<span class="string">&#x27;upper&#x27;</span>)</span><br><span class="line">    plt.colorbar()</span><br><span class="line">    plt.title(<span class="string">&quot;Perlin Noise Visualization&quot;</span>)</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>噪声值如何在二维平面上形成平滑的过渡和复杂的纹理:</p><figure><img src="PerlinNoiseVisualization.png"alt="PerlinNoiseVisualization" /><figcaption aria-hidden="true">PerlinNoiseVisualization</figcaption></figure><hr /><h3 id="数学背景">数学背景</h3><h4 id="fade-函数的数学推导"><code>fade</code> 函数的数学推导</h4><p><code>fade</code>函数是Perlin噪声中用于平滑插值的关键部分。它通过一个三次多项式对插值点进行平滑处理，以避免简单线性插值带来的突变。函数的公式为：</p><p>$ f(t) = t^3 (t (6t - 15) + 10) $</p><p>这个公式的推导可以从以下几个方面理解：</p><ol type="1"><li><p><strong>立方插值</strong>： 函数 $t^3$用于生成一个立方曲线，这种曲线在插值的起始和结束处表现得比较平滑。立方插值相比线性插值能更好地避免在插值范围内的突变。</p></li><li><p><strong>二次多项式调整</strong>： <span class="math inline">\(( t\times (6t - 15) + 10 )\)</span>部分是一个二次多项式，用于调整插值曲线的形状，使得过渡更加平滑。具体来说，这个多项式在( t = 0 ) 和 ( t = 1 ) 处具有平滑的导数，避免了尖锐的转折。</p></li><li><p><strong>平滑过渡</strong>：通过结合立方插值和二次多项式，<code>fade</code> 函数在 ( t ) 的变化范围[0, 1]内提供了一个平滑的过渡。这样可以确保在网格点之间的过渡是连续且自然的，避免了简单线性插值可能带来的硬边缘和突兀变化。</p></li></ol><h4 id="梯度计算的原理">梯度计算的原理</h4><p>在Perlin噪声中，梯度计算是生成噪声的关键步骤。梯度向量用于描述噪声在每个网格点的变化方向。这些梯度向量的计算和使用原理如下：</p><ol type="1"><li><p><strong>随机梯度向量</strong>：每个网格点上分配一个随机梯度向量。这个梯度向量的方向决定了噪声在该点的变化方向。梯度向量的选择通常是随机的，以确保噪声的随机性和多样性。</p></li><li><p><strong>点积计算</strong>：对于输入点来说，梯度向量与距离向量的点积计算用于确定该点相对于网格点的噪声值。这种计算方式将输入点的位置投影到梯度向量的方向上，从而生成噪声值。</p></li><li><p><strong>影响程度</strong>：点积的结果表示输入点对噪声值的影响程度。当距离向量与梯度向量平行时，点积最大，表明该点对噪声的贡献最大；当两者垂直时，点积为零，说明该点对噪声的影响最小。</p></li></ol><p>这种计算方法使得噪声在网格点之间过渡平滑，并能够生成自然的纹理和图案。</p><p>参考文章：</p><p><ahref="https://adrianb.io/2014/08/09/perlinnoise.html">了解柏林噪声</a></p>]]></content>
    
    
    <summary type="html">Perlin噪声是一种用于生成自然现象的算法，它被广泛用于生成自然现象，如云朵、地形、火焰等。</summary>
    
    
    
    <category term="算法" scheme="https://youyouhangyong.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="https://youyouhangyong.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="图形学" scheme="https://youyouhangyong.github.io/tags/%E5%9B%BE%E5%BD%A2%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>使用Unity创建一个类似MC的游戏场景（一）</title>
    <link href="https://youyouhangyong.github.io/2024/08/13/%E4%BD%BF%E7%94%A8Unity%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCMC%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2024/08/13/%E4%BD%BF%E7%94%A8Unity%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B1%BB%E4%BC%BCMC%E7%9A%84%E6%B8%B8%E6%88%8F%E5%9C%BA%E6%99%AF%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2024-08-13T11:58:37.000Z</published>
    <updated>2024-08-17T03:01:41.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>使用Unity来制作一个类似Minecraft的游戏场景。这个系列的文章将记录我制作这个游戏场景的过程。</p><p>我们首先将建立一个<ahref="https://zh.wikipedia.org/zh-cn/體素">体素</a>引擎，用于生成游戏中的区块（chunk）</p><h2 id="准备工作">准备工作</h2><p>首先，我们需要准备一些工具和资源。</p><p>在这个系列的文章中，我们将使用Unity2020.3.48f1c1版本，以及一些免费的资源。</p><p>贴图资源<a href="https://www.kenney.nl/assets/voxel-pack">Voxel Pack·Kenney</a>的原始地址<a href="/download/使用Unity创建一个类似MC的游戏场景（一）/贴图资源.unitypackage" download>点此下载贴图包</a></p><h3 id="导入贴图包">导入贴图包</h3><p>点击</p><p>资源-&gt;导入包-&gt;自定义包</p><p>选择下载的unity资源包进行导入</p><p><img src="导入贴图包.png" /></p><h3 id="编写代码">编写代码</h3><p>首先在我们Untiy的<strong>Assets</strong>文件夹下创建一个**_Scripts**文件夹，用于存储我们的所有代码。</p><p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Assets</span><br><span class="line">-- _Scripts //代码</span><br><span class="line">-- _Textures //贴图</span><br><span class="line">-- Scense //场景</span><br></pre></td></tr></table></figure></p><h4 id="定义方块类型">定义方块类型</h4><p>在**_Scripts<strong>下创建</strong>BlockType.cs**脚本，用于定义游戏中的方块类型。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义了游戏中使用到的不同方块类型。</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> BlockType</span><br><span class="line">&#123;</span><br><span class="line">    Nothing,                 <span class="comment">// 表示无方块或空方块</span></span><br><span class="line">    Air,                     <span class="comment">// 表示空气方块，没有物理碰撞和渲染的透明方块。</span></span><br><span class="line">    Grass_Dirt,              <span class="comment">// 表示带草皮的泥土方块</span></span><br><span class="line">    Dirt,                    <span class="comment">// 表示泥土方块</span></span><br><span class="line">    Grass_Stone,             <span class="comment">// 表示带草皮的石头方块</span></span><br><span class="line">    Stone,                   <span class="comment">// 表示普通的石头方块</span></span><br><span class="line">    TreeTrunk,               <span class="comment">// 表示树干方块</span></span><br><span class="line">    TreeLeafesTransparent,   <span class="comment">// 表示透明的树叶方块，用于生成树木的叶子部分，允许部分光线透过</span></span><br><span class="line">    TreeLeafsSolid,          <span class="comment">// 表示不透明的树叶方块</span></span><br><span class="line">    Water,                   <span class="comment">// 表示水方块</span></span><br><span class="line">    Sand                     <span class="comment">// 表示沙子方块</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然定义了这么多类型的方块，但是暂时不会全部用到。</p><hr /><h4 id="定义区块基础信息">定义区块基础信息</h4><p>在**_Scripts<strong>下创建</strong>ChunkData.cs**脚本，用于定义游戏中的区块信息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于管理和存储一个区块（Chunk）中的所有方块数据，以及区块的相关信息。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChunkData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 存储区块中的所有方块类型，每个元素对应一个方块。</span></span><br><span class="line">    <span class="keyword">public</span> BlockType[] blocks;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区块的水平大小（X和Z方向），是一个正方形的尺寸(16*16)。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> chunkSize = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区块的垂直高度（Y方向），决定了区块的高度范围。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> chunkHeight = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对应的世界对象引用，用于访问世界相关的信息或功能，World目前还没创建。</span></span><br><span class="line">    <span class="keyword">public</span> World worldReference;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区块在整个世界中的位置，使用三维整数向量表示。</span></span><br><span class="line">    <span class="keyword">public</span> Vector3Int worldPosition;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标记区块是否被玩家修改过，用于判断是否保存区块信息，这在卸载区块的时候非常有用。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> modifiedByThePlayer = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化一个新的ChunkData对象，并为其分配方块数组。</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// chunkSize区块的水平大小</span></span><br><span class="line">    <span class="comment">// chunkHeight区块的垂直高度</span></span><br><span class="line">    <span class="comment">// world引用的世界对象</span></span><br><span class="line">    <span class="comment">// worldPosition区块在世界中的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChunkData</span>(<span class="params"><span class="built_in">int</span> chunkSize, <span class="built_in">int</span> chunkHeight, World world, Vector3Int worldPosition</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 初始化区块的大小、高度和位置</span></span><br><span class="line">        <span class="keyword">this</span>.chunkHeight = chunkHeight;</span><br><span class="line">        <span class="keyword">this</span>.chunkSize = chunkSize;</span><br><span class="line">        <span class="keyword">this</span>.worldReference = world;</span><br><span class="line">        <span class="keyword">this</span>.worldPosition = worldPosition;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为该区块分配存储方块类型的数组，大小为chunkSize * chunkHeight * chunkSize</span></span><br><span class="line">        blocks = <span class="keyword">new</span> BlockType[chunkSize * chunkHeight * chunkSize];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写完代码我们发现World并没有创建，为了暂时解决报错，我们在<code>_Scripts</code>下创建<code>World.cs</code>脚本。</p><p>这样报错就解决了。</p><hr /><h4 id="meshdata数据类">MeshData数据类</h4><p>在**_Scripts<strong>下创建</strong>MeshData.cs**脚本用于存储和管理一个区块的网格数据。</p><p>包括用于渲染的顶点、三角形和UV坐标，以及用于物理碰撞的独立碰撞体网格数据。还有水网格的独立管理。</p><p>在游戏中，<code>Mesh</code> 是所有 3D 对象的基础。通过调整<code>Mesh</code>的顶点和三角形，可以创建各种形状的物体。<code>Mesh</code> 数据可以通过Unity 的渲染系统显示在屏幕上，并且可以通过物理系统进行碰撞检测。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于存储和管理一个区块的网格数据，包括顶点、三角形和UV坐标，</span></span><br><span class="line"><span class="comment">// 以及用于碰撞检测的独立网格数据。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MeshData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 用于存储网格的顶点信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Vector3&gt; vertices = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储网格的三角形索引信息，每三个索引构成一个三角形</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; triangles = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储网格的UV坐标，用于纹理映射</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Vector2&gt; uv = <span class="keyword">new</span> List&lt;Vector2&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储网格的碰撞体顶点信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Vector3&gt; colliderVertices = <span class="keyword">new</span> List&lt;Vector3&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储网格的碰撞体三角形索引信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">int</span>&gt; colliderTriangles = <span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储水网格的数据。</span></span><br><span class="line">    <span class="keyword">public</span> MeshData waterMesh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标识是否是主网格数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isMainMesh = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数，用于初始化MeshData对象，如果是主网格，会同时初始化水网格数据。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MeshData</span>(<span class="params"><span class="built_in">bool</span> isMainMesh</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.isMainMesh = isMainMesh;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果是主网格，初始化水网格数据</span></span><br><span class="line">        <span class="keyword">if</span> (isMainMesh)</span><br><span class="line">        &#123;</span><br><span class="line">            waterMesh = <span class="keyword">new</span> MeshData(<span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个顶点到网格数据，并根据需要将顶点添加到碰撞体数据中。</span></span><br><span class="line">    <span class="comment">// vertex 要添加的顶点坐标</span></span><br><span class="line">    <span class="comment">// vertexGeneratesCollider 是否为碰撞体生成顶点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddVertex</span>(<span class="params">Vector3 vertex, <span class="built_in">bool</span> vertexGeneratesCollider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        vertices.Add(vertex);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要生成碰撞体，将顶点添加到碰撞体顶点列表中</span></span><br><span class="line">        <span class="keyword">if</span> (vertexGeneratesCollider)</span><br><span class="line">        &#123;</span><br><span class="line">            colliderVertices.Add(vertex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个四边形（一个面）的三角形索引到网格数据，并根据需要将三角形添加到碰撞体数据中。</span></span><br><span class="line">    <span class="comment">// quadGeneratesCollider 是否为碰撞体生成三角形</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddQuadTriangles</span>(<span class="params"><span class="built_in">bool</span> quadGeneratesCollider</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 添加四边形的两个三角形到主网格</span></span><br><span class="line">        <span class="comment">// 第一个三角形：顶点 0 -&gt; 1 -&gt; 2</span></span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">4</span>);<span class="comment">//4-4</span></span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">3</span>);<span class="comment">//4-3</span></span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">2</span>);<span class="comment">//4-2</span></span><br><span class="line"><span class="comment">// 第二个三角形：顶点 0 -&gt; 2 -&gt; 3</span></span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">4</span>);</span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">2</span>);</span><br><span class="line">        triangles.Add(vertices.Count - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果需要生成碰撞体，将四边形的两个三角形添加到碰撞体数据中</span></span><br><span class="line">        <span class="keyword">if</span> (quadGeneratesCollider)</span><br><span class="line">        &#123;</span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">4</span>);</span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">3</span>);</span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">4</span>);</span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">2</span>);</span><br><span class="line">            colliderTriangles.Add(colliderVertices.Count - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>AddQuadTriangles方法所构成的面：</p><p><img src="Snipaste_2024-08-15_10-45-38.png" /></p><p>此外，我们的三角形是顺时针绘制出的，这将决定面的法线方向。法线方向又将决定绘制的面，从那个方向是可见的。</p><p>所以说绘制的顺序很重要。</p><h6 id="mash是什么">Mash是什么</h6><p>我们在<code>Unity</code>场景中，所有能被渲染出来的物体都会带有网格Mash。</p><p><img src="Mash示例.png" /></p><p>从概念上讲，网格是图形硬件用来绘制复杂内容的构造。</p><p>它至少包含一组定义<code>3D</code>空间中点的<code>顶点</code>，以及一组连接这些点的<code>三角形</code>，实际上还包含法线、顶点颜色纹理坐标（uv）等信息，这些三角形构成了网格所代表的任何表面。</p><p>所以创建一个<code>Mesh</code>，就是<code>new</code>一个<code>Mesh</code>，给它塞入顶点坐标、UV坐标和三角形序列即可。再复杂的网格也可以通过这些步骤创建出来~</p><h4 id="chunkrenderer类">ChunkRenderer类</h4><p>接下来我们将区块的数据转化为网格数据，然后渲染成3D对象。</p><p>在<code>_Scripts</code>下创建<code>ChunkRenderer.cs</code>用于渲染和更新区块。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> System.Linq;</span><br><span class="line"><span class="keyword">using</span> UnityEditor;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该脚本需要附加在包含 MeshFilter、MeshRenderer 和 MeshCollider 组件的 GameObject 上</span></span><br><span class="line">[<span class="meta">RequireComponent(typeof(MeshFilter))</span>]</span><br><span class="line">[<span class="meta">RequireComponent(typeof(MeshRenderer))</span>]</span><br><span class="line">[<span class="meta">RequireComponent(typeof(MeshCollider))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ChunkRenderer</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 私有字段，用于存储对 MeshFilter、MeshCollider 组件和 Mesh 的引用</span></span><br><span class="line">    MeshFilter meshFilter;</span><br><span class="line">    MeshCollider meshCollider;</span><br><span class="line">    Mesh mesh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 控制是否在编辑器中显示Gizmo</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> showGizmo = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 公开的属性，用于获取当前区块的数据</span></span><br><span class="line">    <span class="keyword">public</span> ChunkData ChunkData &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反映区块是否被玩家修改过</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> ModifiedByThePlayer</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> ChunkData.modifiedByThePlayer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            ChunkData.modifiedByThePlayer = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在脚本被激活时调用，初始化 MeshFilter、MeshCollider 和 Mesh</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        meshFilter = GetComponent&lt;MeshFilter&gt;();</span><br><span class="line">        meshCollider = GetComponent&lt;MeshCollider&gt;();</span><br><span class="line">        mesh = meshFilter.mesh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化区块数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InitializeChunk</span>(<span class="params">ChunkData data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.ChunkData = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染区块的网格数据</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">RenderMesh</span>(<span class="params">MeshData meshData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清空当前网格数据</span></span><br><span class="line">        mesh.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置子网格数量为2，用于区分普通网格和水面网格</span></span><br><span class="line">        mesh.subMeshCount = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将普通网格和水面网格的顶点数据合并后赋值给 mesh</span></span><br><span class="line">        mesh.vertices = meshData.vertices.Concat(meshData.waterMesh.vertices).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第一个子网格的三角形数据</span></span><br><span class="line">        mesh.SetTriangles(meshData.triangles.ToArray(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置第二个子网格（水面网格）的三角形数据，顶点索引需要加上普通网格的顶点数量</span></span><br><span class="line">        mesh.SetTriangles(meshData.waterMesh.triangles.Select(val =&gt; val + meshData.vertices.Count).ToArray(), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 合并普通网格和水面网格的UV数据并赋值给 mesh</span></span><br><span class="line">        mesh.uv = meshData.uv.Concat(meshData.waterMesh.uv).ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新计算法线，使光照效果正确</span></span><br><span class="line">        mesh.RecalculateNormals();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空当前的碰撞网格，并创建一个新的碰撞网格</span></span><br><span class="line">        meshCollider.sharedMesh = <span class="literal">null</span>;</span><br><span class="line">        Mesh collisionMesh = <span class="keyword">new</span> Mesh();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置碰撞网格的顶点和三角形数据</span></span><br><span class="line">        collisionMesh.vertices = meshData.colliderVertices.ToArray();</span><br><span class="line">        collisionMesh.triangles = meshData.colliderTriangles.ToArray();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 重新计算法线，确保碰撞检测准确</span></span><br><span class="line">        collisionMesh.RecalculateNormals();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将新创建的碰撞网格赋值给 meshCollider</span></span><br><span class="line">        meshCollider.sharedMesh = collisionMesh;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新区块的渲染，获取区块的网格数据并渲染</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateChunk</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        RenderMesh(Chunk.GetChunkMeshData(ChunkData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用传入的 MeshData 更新区块的渲染</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">UpdateChunk</span>(<span class="params">MeshData data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RenderMesh(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> UNITY_EDITOR</span></span><br><span class="line">    <span class="comment">// 在编辑器中绘制Gizmo，用于可视化区块边界</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">OnDrawGizmos</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (showGizmo)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 仅在游戏运行时绘制Gizmo，并且确保区块数据不为空</span></span><br><span class="line">            <span class="keyword">if</span> (Application.isPlaying &amp;&amp; ChunkData != <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 如果当前GameObject被选中，Gizmo颜色为绿色，否则为紫色</span></span><br><span class="line">                <span class="keyword">if</span> (Selection.activeObject == gameObject)</span><br><span class="line">                    Gizmos.color = <span class="keyword">new</span> Color(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.4f</span>); <span class="comment">// 绿色</span></span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    Gizmos.color = <span class="keyword">new</span> Color(<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.4f</span>); <span class="comment">// 紫色</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 绘制一个表示区块边界的立方体</span></span><br><span class="line">                Gizmos.DrawCube(</span><br><span class="line">                    transform.position + <span class="keyword">new</span> Vector3(ChunkData.chunkSize / <span class="number">2f</span>, ChunkData.chunkHeight / <span class="number">2f</span>, ChunkData.chunkSize / <span class="number">2f</span>),</span><br><span class="line">                    <span class="keyword">new</span> Vector3(ChunkData.chunkSize, ChunkData.chunkHeight, ChunkData.chunkSize)</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在 Unity 中，<code>MeshFilter</code>、<code>MeshRenderer</code> 和<code>MeshCollider</code> 是与 3D对象的渲染和物理交互密切相关的组件。</p><p><code>MeshFilter</code> 提供了对象的几何数据。</p><p><code>MeshRenderer</code>负责将几何数据渲染到屏幕上，使其在游戏中可见。</p><p><code>MeshCollider</code>使用几何数据来进行物理碰撞检测，使对象能够与其他物理对象互动。</p><p>OK，我们发现Chunk目前还在报红</p><p>我们可以在<code>_Scripts</code>下创建<code>Chunk.cs</code>,并添加一下内容，暂时解决报错。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Chunk</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> MeshData <span class="title">GetChunkMeshData</span>(<span class="params">ChunkData chunkData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="chunk">Chunk</h4><p>检查一下我们的代码，应该有以下几个文件：</p><p><img src="Snipaste_2024-08-15_12-25-12.png" /></p><p>现在新建一个名为<code>Chunk</code>的空对象，并将<strong><code>ChunkRenderer.cs</code>附加到该对象上</strong>。</p><p>如图，依次添加材质，并将Chunk设置为预设体。</p><p><img src="Snipaste_2024-08-15_12-38-59.png" /></p><h5 id="chunk类">Chunk类</h5><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Chunk</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 遍历 ChunkData 中的每个块，并对每个块执行指定的操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LoopThroughTheBlocks</span>(<span class="params">ChunkData chunkData, Action&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; actionToPerform</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历 chunkData.blocks 数组的每个索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> index = <span class="number">0</span>; index &lt; chunkData.blocks.Length; index++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 根据索引获取块在 Chunk 中的三维坐标位置</span></span><br><span class="line">            <span class="keyword">var</span> position = GetPostitionFromIndex(chunkData, index);</span><br><span class="line">            <span class="comment">// 对该坐标位置执行传入的操作 actionToPerform</span></span><br><span class="line">            actionToPerform(position.x, position.y, position.z);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据索引计算块在 Chunk 中的三维坐标位置</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Vector3Int <span class="title">GetPostitionFromIndex</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> index</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算 x 坐标</span></span><br><span class="line">        <span class="built_in">int</span> x = index % chunkData.chunkSize;</span><br><span class="line">        <span class="comment">// 计算 y 坐标</span></span><br><span class="line">        <span class="built_in">int</span> y = (index / chunkData.chunkSize) % chunkData.chunkHeight;</span><br><span class="line">        <span class="comment">// 计算 z 坐标</span></span><br><span class="line">        <span class="built_in">int</span> z = index / (chunkData.chunkSize * chunkData.chunkHeight);</span><br><span class="line">        <span class="comment">// 返回三维坐标</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3Int(x, y, z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查给定的轴坐标是否在 Chunk 的范围内</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InRange</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> axisCoordinate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果轴坐标在范围外，返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (axisCoordinate &lt; <span class="number">0</span> || axisCoordinate &gt;= chunkData.chunkSize)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在范围内，返回 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查给定的 y 坐标是否在 Chunk 高度范围内</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">bool</span> <span class="title">InRangeHeight</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> ycoordinate</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果 y 坐标在范围外，返回 false</span></span><br><span class="line">        <span class="keyword">if</span> (ycoordinate &lt; <span class="number">0</span> || ycoordinate &gt;= chunkData.chunkHeight)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在范围内，返回 true</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 Chunk 内部坐标获取对应的块类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockType <span class="title">GetBlockFromChunkCoordinates</span>(<span class="params">ChunkData chunkData, Vector3Int chunkCoordinates</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> GetBlockFromChunkCoordinates(chunkData, chunkCoordinates.x, chunkCoordinates.y, chunkCoordinates.z);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 x, y, z 坐标获取对应的块类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockType <span class="title">GetBlockFromChunkCoordinates</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果坐标在 Chunk 范围内</span></span><br><span class="line">        <span class="keyword">if</span> (InRange(chunkData, x) &amp;&amp; InRangeHeight(chunkData, y) &amp;&amp; InRange(chunkData, z))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算索引并返回块类型</span></span><br><span class="line">            <span class="built_in">int</span> index = GetIndexFromPosition(chunkData, x, y, z);</span><br><span class="line">            <span class="keyword">return</span> chunkData.blocks[index];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果不在范围内，抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在 Chunk 内部坐标设置块类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SetBlock</span>(<span class="params">ChunkData chunkData, Vector3Int localPosition, BlockType block</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果坐标在 Chunk 范围内</span></span><br><span class="line">        <span class="keyword">if</span> (InRange(chunkData, localPosition.x) &amp;&amp; InRangeHeight(chunkData, localPosition.y) &amp;&amp; InRange(chunkData, localPosition.z))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算索引并设置块类型</span></span><br><span class="line">            <span class="built_in">int</span> index = GetIndexFromPosition(chunkData, localPosition.x, localPosition.y, localPosition.z);</span><br><span class="line">            chunkData.blocks[index] = block;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果不在范围内，抛出异常</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Need to ask World for appropriate chunk&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据 x, y, z 坐标计算块在 Chunk 中的索引</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">int</span> <span class="title">GetIndexFromPosition</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算索引值</span></span><br><span class="line">        <span class="keyword">return</span> x + chunkData.chunkSize * y + chunkData.chunkSize * chunkData.chunkHeight * z;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将世界坐标转换为 Chunk 内部坐标</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3Int <span class="title">GetBlockInChunkCoordinates</span>(<span class="params">ChunkData chunkData, Vector3Int pos</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Vector3Int</span><br><span class="line">        &#123;</span><br><span class="line">            x = pos.x - chunkData.worldPosition.x,</span><br><span class="line">            y = pos.y - chunkData.worldPosition.y,</span><br><span class="line">            z = pos.z - chunkData.worldPosition.z</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成 Chunk 的 Mesh 数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MeshData <span class="title">GetChunkMeshData</span>(<span class="params">ChunkData chunkData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        MeshData meshData = <span class="keyword">new</span> MeshData(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 目前为空实现，后续可以在此添加生成 Mesh 数据的逻辑</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meshData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="blockdataso">BlockDataSO</h4><p>创建一个ScriptableObject类，用于存储和管理块的纹理和碰撞相关数据。</p><p>通过 <code>textureDataList</code> 可以保存多个块的纹理信息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [CreateAssetMenu] 允许在 Unity 编辑器中创建此类的实例作为资产</span></span><br><span class="line">[<span class="meta">CreateAssetMenu(fileName = <span class="string">&quot;Block Data&quot;</span>, menuName = <span class="string">&quot;Data/Block Data&quot;</span>)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BlockDataSO</span> : <span class="title">ScriptableObject</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 存储纹理的 X 轴和 Y 轴的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> textureSizeX, textureSizeY;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 存储每种块类型的纹理数据的列表</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;TextureData&gt; textureDataList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [Serializable] 使类可序列化，这样它可以在 Unity 编辑器中显示和保存</span></span><br><span class="line">[<span class="meta">Serializable</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TextureData</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 该纹理数据对应的块类型</span></span><br><span class="line">    <span class="keyword">public</span> BlockType blockType;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义块的不同面（上、下、侧面）的纹理坐标</span></span><br><span class="line">    <span class="keyword">public</span> Vector2Int up, down, side;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指示块是否为实心块，默认值为 true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> isSolid = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指示是否为块生成碰撞器，默认值为 true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> generatesCollider = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后我们新建一个BlockData给每个方块设置贴图：</p><p><a href="/download/使用Unity创建一个类似MC的游戏场景（一）/Block Data Imported.unitypackage" download>点此下载BlockData Imported</a></p><p><img src="Snipaste_2024-08-15_14-10-15.png" /></p><p>Up、Down、Side就分别对应了方块的上面，下面和侧面的贴图在下面这张图片上的位置坐标。</p><h4 id="blockdatamanager">BlockDataManager</h4><p>负责管理和访问块的纹理数据。通过该类，可以在整个游戏中方便地获取和使用块的纹理信息。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BlockDataManager</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义纹理偏移量，用于防止纹理边缘出现不明显的缝隙</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> textureOffset = <span class="number">0.001f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义纹理的 X 轴和 Y 轴的大小</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">float</span> tileSizeX, tileSizeY;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 字典，用于将每种块类型映射到对应的纹理数据</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Dictionary&lt;BlockType, TextureData&gt; blockTextureDataDictionary = <span class="keyword">new</span> Dictionary&lt;BlockType, TextureData&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引用包含块纹理数据的 ScriptableObject</span></span><br><span class="line">    <span class="keyword">public</span> BlockDataSO textureData;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在脚本挂载的 GameObject 启动时调用</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Awake</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历 ScriptableObject 中的纹理数据列表</span></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> item <span class="keyword">in</span> textureData.textureDataList)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 如果字典中不包含此块类型的数据，则添加到字典中</span></span><br><span class="line">            <span class="keyword">if</span> (blockTextureDataDictionary.ContainsKey(item.blockType) == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                blockTextureDataDictionary.Add(item.blockType, item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 ScriptableObject 中的纹理大小赋值给静态变量，以便全局访问</span></span><br><span class="line">        tileSizeX = textureData.textureSizeX;</span><br><span class="line">        tileSizeY = textureData.textureSizeY;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>然后再Unity中创建BlockDataManager添加BlockDataManager.cs脚本，并将贴图数据赋予TextureData。</p><p><img src="Snipaste_2024-08-15_14-27-06.png" /></p><h4 id="direction">Direction</h4><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义块的方向</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">enum</span> Direction</span><br><span class="line">&#123;</span><br><span class="line">    forward,    <span class="comment">// z+ 方向（前）</span></span><br><span class="line">    right,      <span class="comment">// x+ 方向（右）</span></span><br><span class="line">    backwards,  <span class="comment">// z- 方向（后）</span></span><br><span class="line">    left,       <span class="comment">// x- 方向（左）</span></span><br><span class="line">    up,         <span class="comment">// y+ 方向（上）</span></span><br><span class="line">    down        <span class="comment">// y- 方向（下）</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>Direction</code> 枚举</strong>:用于表示方块在三维空间中的方向。这在处理方块的相对方向或在三维空间中进行方向操作时非常有用。</p><h4 id="directionextensions">DirectionExtensions</h4><p>为 <code>Direction</code> 枚举提供了额外的功能：将方向转换为对应的<code>Vector3Int</code>。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方向枚举的扩展方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">DirectionExtensions</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 扩展方法：根据方向枚举值获取对应的三维向量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector3Int <span class="title">GetVector</span>(<span class="params"><span class="keyword">this</span> Direction direction</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//根据方向返回对应的三维向量</span></span><br><span class="line">        <span class="keyword">return</span> direction <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            Direction.up =&gt; Vector3Int.up,              <span class="comment">// 返回 (0, 1, 0) 对应的向量，表示向上的方向</span></span><br><span class="line">            Direction.down =&gt; Vector3Int.down,          <span class="comment">// 返回 (0, -1, 0) 对应的向量，表示向下的方向</span></span><br><span class="line">            Direction.right =&gt; Vector3Int.right,        <span class="comment">// 返回 (1, 0, 0) 对应的向量，表示向右的方向</span></span><br><span class="line">            Direction.left =&gt; Vector3Int.left,          <span class="comment">// 返回 (-1, 0, 0) 对应的向量，表示向左的方向</span></span><br><span class="line">            Direction.foreward =&gt; Vector3Int.forward,   <span class="comment">// 返回 (0, 0, 1) 对应的向量，表示向前的方向</span></span><br><span class="line">            Direction.backwards =&gt; Vector3Int.back,     <span class="comment">// 返回 (0, 0, -1) 对应的向量，表示向后的方向</span></span><br><span class="line">            _ =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Invalid input direction&quot;</span>) <span class="comment">// 如果方向无效，抛出异常</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="blockhelper">BlockHelper</h4><p>根据块的类型和相邻块的类型，生成块的网格数据。</p><p>负责为体素生成正确的几何形状和纹理坐标，并确定哪些面应该被渲染。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">BlockHelper</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 定义了一个包含所有可能方向的数组，用于遍历块的六个面</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Direction[] directions =</span><br><span class="line">    &#123;</span><br><span class="line">        Direction.backwards, <span class="comment">// -z 方向</span></span><br><span class="line">        Direction.down,      <span class="comment">// -y 方向</span></span><br><span class="line">        Direction.foreward,  <span class="comment">// +z 方向</span></span><br><span class="line">        Direction.left,      <span class="comment">// -x 方向</span></span><br><span class="line">        Direction.right,     <span class="comment">// +x 方向</span></span><br><span class="line">        Direction.up         <span class="comment">// +y 方向</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据块的类型生成块的网格数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MeshData <span class="title">GetMeshData</span>(<span class="params">ChunkData chunk, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z, MeshData meshData, BlockType blockType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 如果块是空气或者什么都没有，则直接返回现有的网格数据</span></span><br><span class="line">        <span class="keyword">if</span> (blockType == BlockType.Air || blockType == BlockType.Nothing)</span><br><span class="line">            <span class="keyword">return</span> meshData;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历所有方向，检查该方向是否需要渲染面</span></span><br><span class="line">        <span class="keyword">foreach</span> (Direction direction <span class="keyword">in</span> directions)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 计算相邻块的坐标</span></span><br><span class="line">            <span class="keyword">var</span> neighbourBlockCoordinates = <span class="keyword">new</span> Vector3Int(x, y, z) + direction.GetVector();</span><br><span class="line">            <span class="comment">// 获取相邻块的类型</span></span><br><span class="line">            <span class="keyword">var</span> neighbourBlockType = Chunk.GetBlockFromChunkCoordinates(chunk, neighbourBlockCoordinates);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果相邻块存在且不为固体，则生成对应的面</span></span><br><span class="line">            <span class="keyword">if</span> (neighbourBlockType != BlockType.Nothing &amp;&amp; BlockDataManager.blockTextureDataDictionary[neighbourBlockType].isSolid == <span class="literal">false</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 特殊处理水块类型</span></span><br><span class="line">                <span class="keyword">if</span> (blockType == BlockType.Water)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 仅当相邻块是空气时，才为水块生成面</span></span><br><span class="line">                    <span class="keyword">if</span> (neighbourBlockType == BlockType.Air)</span><br><span class="line">                        meshData.waterMesh = GetFaceDataIn(direction, chunk, x, y, z, meshData.waterMesh, blockType);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="comment">// 生成普通块的面</span></span><br><span class="line">                    meshData = GetFaceDataIn(direction, chunk, x, y, z, meshData, blockType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meshData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为指定方向的块面生成网格数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MeshData <span class="title">GetFaceDataIn</span>(<span class="params">Direction direction, ChunkData chunk, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z, MeshData meshData, BlockType blockType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 获取面对应的顶点</span></span><br><span class="line">        GetFaceVertices(direction, x, y, z, meshData, blockType);</span><br><span class="line">        <span class="comment">// 添加四边形的三角形数据</span></span><br><span class="line">        meshData.AddQuadTriangles(BlockDataManager.blockTextureDataDictionary[blockType].generatesCollider);</span><br><span class="line">        <span class="comment">// 添加UV坐标</span></span><br><span class="line">        meshData.uv.AddRange(FaceUVs(direction, blockType));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meshData;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据方向获取面对应的顶点，并添加到网格数据中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">GetFaceVertices</span>(<span class="params">Direction direction, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z, MeshData meshData, BlockType blockType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> generatesCollider = BlockDataManager.blockTextureDataDictionary[blockType].generatesCollider;</span><br><span class="line">        <span class="comment">// 根据方向添加面对应的顶点坐标</span></span><br><span class="line">        <span class="keyword">switch</span> (direction)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> Direction.backwards: <span class="comment">// -z 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Direction.foreward: <span class="comment">// +z 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Direction.left: <span class="comment">// -x 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> Direction.right: <span class="comment">// +x 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Direction.down: <span class="comment">// -y 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y - <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> Direction.up: <span class="comment">// +y 方向的面</span></span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z + <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x + <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                meshData.AddVertex(<span class="keyword">new</span> Vector3(x - <span class="number">0.5f</span>, y + <span class="number">0.5f</span>, z - <span class="number">0.5f</span>), generatesCollider);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取面对应的UV坐标，确定纹理的显示位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2[] <span class="title">FaceUVs</span>(<span class="params">Direction direction, BlockType blockType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Vector2[] UVs = <span class="keyword">new</span> Vector2[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">var</span> tilePos = TexturePosition(direction, blockType);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据方向和块类型确定纹理的位置，并生成UV坐标</span></span><br><span class="line">        UVs[<span class="number">0</span>] = <span class="keyword">new</span> Vector2(BlockDataManager.tileSizeX * tilePos.x + BlockDataManager.tileSizeX - BlockDataManager.textureOffset,</span><br><span class="line">            BlockDataManager.tileSizeY * tilePos.y + BlockDataManager.textureOffset);</span><br><span class="line"></span><br><span class="line">        UVs[<span class="number">1</span>] = <span class="keyword">new</span> Vector2(BlockDataManager.tileSizeX * tilePos.x + BlockDataManager.tileSizeX - BlockDataManager.textureOffset,</span><br><span class="line">            BlockDataManager.tileSizeY * tilePos.y + BlockDataManager.tileSizeY - BlockDataManager.textureOffset);</span><br><span class="line"></span><br><span class="line">        UVs[<span class="number">2</span>] = <span class="keyword">new</span> Vector2(BlockDataManager.tileSizeX * tilePos.x + BlockDataManager.textureOffset,</span><br><span class="line">            BlockDataManager.tileSizeY * tilePos.y + BlockDataManager.tileSizeY - BlockDataManager.textureOffset);</span><br><span class="line"></span><br><span class="line">        UVs[<span class="number">3</span>] = <span class="keyword">new</span> Vector2(BlockDataManager.tileSizeX * tilePos.x + BlockDataManager.textureOffset,</span><br><span class="line">            BlockDataManager.tileSizeY * tilePos.y + BlockDataManager.textureOffset);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UVs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据方向和块类型确定纹理在图集中对应的位置</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Vector2Int <span class="title">TexturePosition</span>(<span class="params">Direction direction, BlockType blockType</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> direction <span class="keyword">switch</span></span><br><span class="line">        &#123;</span><br><span class="line">            Direction.up =&gt; BlockDataManager.blockTextureDataDictionary[blockType].up,   <span class="comment">// 向上方向的纹理</span></span><br><span class="line">            Direction.down =&gt; BlockDataManager.blockTextureDataDictionary[blockType].down, <span class="comment">// 向下方向的纹理</span></span><br><span class="line">            _ =&gt; BlockDataManager.blockTextureDataDictionary[blockType].side  <span class="comment">// 其他方向的纹理</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="world">World</h4><p>通过 <code>GenerateWorld</code>方法，可以一次性生成整个地图，并将每个区块对象添加到场景中。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">World</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 世界生成相关的参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> mapSizeInChunks = <span class="number">6</span>;  <span class="comment">// 世界地图由多少个区块组成（每行每列区块数）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> chunkSize = <span class="number">16</span>,       <span class="comment">// 每个区块的大小（x和z方向）</span></span><br><span class="line">               chunkHeight = <span class="number">100</span>;    <span class="comment">// 每个区块的高度（y方向）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> waterThreshold = <span class="number">50</span>;  <span class="comment">// 水的高度阈值（低于这个值的是水）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">float</span> noiseScale = <span class="number">0.03f</span>; <span class="comment">// 噪声缩放比例，用于生成地形的高度</span></span><br><span class="line">    <span class="keyword">public</span> GameObject chunkPrefab;   <span class="comment">// 区块的预制件，用于实例化区块对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用于存储区块数据和区块渲染器的字典</span></span><br><span class="line">    Dictionary&lt;Vector3Int, ChunkData&gt; chunkDataDictionary = <span class="keyword">new</span> Dictionary&lt;Vector3Int, ChunkData&gt;();</span><br><span class="line">    Dictionary&lt;Vector3Int, ChunkRenderer&gt; chunkDictionary = <span class="keyword">new</span> Dictionary&lt;Vector3Int, ChunkRenderer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成世界的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">GenerateWorld</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 清空字典和销毁已有的区块对象</span></span><br><span class="line">        chunkDataDictionary.Clear();</span><br><span class="line">        <span class="keyword">foreach</span> (ChunkRenderer chunk <span class="keyword">in</span> chunkDictionary.Values)</span><br><span class="line">        &#123;</span><br><span class="line">            Destroy(chunk.gameObject);</span><br><span class="line">        &#125;</span><br><span class="line">        chunkDictionary.Clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历每个区块的位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; mapSizeInChunks; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> z = <span class="number">0</span>; z &lt; mapSizeInChunks; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 创建区块数据对象</span></span><br><span class="line">                ChunkData data = <span class="keyword">new</span> ChunkData(chunkSize, chunkHeight, <span class="keyword">this</span>, <span class="keyword">new</span> Vector3Int(x * chunkSize, <span class="number">0</span>, z * chunkSize));</span><br><span class="line">                <span class="comment">// 生成区块中的体素（方块）</span></span><br><span class="line">                GenerateVoxels(data);</span><br><span class="line">                <span class="comment">// 将生成的区块数据存入字典</span></span><br><span class="line">                chunkDataDictionary.Add(data.worldPosition, data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成区块的网格并创建区块对象</span></span><br><span class="line">        <span class="keyword">foreach</span> (ChunkData data <span class="keyword">in</span> chunkDataDictionary.Values)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 获取区块的网格数据</span></span><br><span class="line">            MeshData meshData = Chunk.GetChunkMeshData(data);</span><br><span class="line">            <span class="comment">// 实例化区块对象</span></span><br><span class="line">            GameObject chunkObject = Instantiate(chunkPrefab, data.worldPosition, Quaternion.identity);</span><br><span class="line">            <span class="comment">// 获取区块渲染器组件</span></span><br><span class="line">            ChunkRenderer chunkRenderer = chunkObject.GetComponent&lt;ChunkRenderer&gt;();</span><br><span class="line">            <span class="comment">// 将区块渲染器存入字典</span></span><br><span class="line">            chunkDictionary.Add(data.worldPosition, chunkRenderer);</span><br><span class="line">            <span class="comment">// 初始化区块数据</span></span><br><span class="line">            chunkRenderer.InitializeChunk(data);</span><br><span class="line">            <span class="comment">// 更新区块的网格</span></span><br><span class="line">            chunkRenderer.UpdateChunk(meshData);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成区块中的体素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GenerateVoxels</span>(<span class="params">ChunkData data</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 遍历区块的每个位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> x = <span class="number">0</span>; x &lt; data.chunkSize; x++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> z = <span class="number">0</span>; z &lt; data.chunkSize; z++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 使用Perlin噪声生成地形高度</span></span><br><span class="line">                <span class="built_in">float</span> noiseValue = Mathf.PerlinNoise((data.worldPosition.x + x) * noiseScale, (data.worldPosition.z + z) * noiseScale);</span><br><span class="line">                <span class="built_in">int</span> groundPosition = Mathf.RoundToInt(noiseValue * chunkHeight);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 遍历区块的高度，设置每个体素的类型</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="built_in">int</span> y = <span class="number">0</span>; y &lt; chunkHeight; y++)</span><br><span class="line">                &#123;</span><br><span class="line">                    BlockType voxelType = BlockType.Dirt;  <span class="comment">// 默认块类型为土块</span></span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (y &gt; groundPosition)  <span class="comment">// 如果当前y值高于地面高度</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (y &lt; waterThreshold)  <span class="comment">// 如果y值低于水阈值，则为水</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            voxelType = BlockType.Water;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span>  <span class="comment">// 否则为空气</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            voxelType = BlockType.Air;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (y == groundPosition &amp;&amp; y &lt; waterThreshold)  <span class="comment">// 如果y值等于地面高度且低于水阈值，则为沙</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        voxelType = BlockType.Sand;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (y == groundPosition)  <span class="comment">// 否则如果y值等于地面高度，则为草块</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        voxelType = BlockType.Grass_Dirt;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 设置该位置的体素类型</span></span><br><span class="line">                    Chunk.SetBlock(data, <span class="keyword">new</span> Vector3Int(x, y, z), voxelType);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong><code>GenerateWorld</code> 方法</strong>:</p><ul><li>负责生成整个世界。它先清空已有的数据和区块对象，然后为每个区块生成体素数据，并实例化对应的区块对象。每个区块数据都存储在<code>chunkDataDictionary</code> 中，而对应的渲染器则存储在<code>chunkDictionary</code> 中。</li></ul><p><strong><code>GenerateVoxels</code> 方法</strong>:</p><ul><li>生成每个区块中的体素数据。通过 <code>Perlin</code>噪声生成地形的高度，并根据高度和水阈值确定每个体素的类型（如土块、草块、沙块、水、空气等）。</li></ul><p><strong><code>chunkDataDictionary</code> 和<code>chunkDictionary</code></strong>:</p><ul><li>前者存储生成的区块数据，后者存储生成的区块渲染器对象。这些字典方便管理和访问生成的世界数据和区块对象。</li></ul><p><strong><code>PerlinNoise</code></strong>:</p><ul><li>使用 <code>Perlin</code>噪声生成的地形高度模拟了自然地形的起伏，生成逼真的地形效果。</li></ul><h4 id="完善chunk">完善Chunk</h4><p>在上面的代码中使用了GetChunkMeshData方法，如果你还记得该方法的实现，你会发现实现并不完整。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取区块的网格数据</span></span><br><span class="line">MeshData meshData = Chunk.GetChunkMeshData(data);</span><br></pre></td></tr></table></figure><p>现在我们来完善它：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MeshData <span class="title">GetChunkMeshData</span>(<span class="params">ChunkData chunkData</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">     <span class="comment">// 创建一个新的 MeshData 对象，用于存储生成的网格数据。</span></span><br><span class="line">        MeshData meshData = <span class="keyword">new</span> MeshData(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 遍历块数据中的所有块，并为每个块生成网格数据。</span></span><br><span class="line">       <span class="comment">// 这里使用了一个委托，传递给 LoopThroughTheBlocks 方法，在遍历每个块时调用。</span></span><br><span class="line">LoopThroughTheBlocks(chunkData, (x, y, z) =&gt; meshData = </span><br><span class="line">          <span class="comment">// 获取当前块的类型，并根据块的类型生成网格数据。</span></span><br><span class="line">          lockHelper.GetMeshData(chunkData, x, y, z, meshData, </span><br><span class="line">          <span class="comment">// 调用 BlockHelper.GetMeshData 生成网格数据，并将其存储在 meshData 对象中。</span></span><br><span class="line">          chunkData.blocks[GetIndexFromPosition(chunkData, x, y, z)]));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> meshData;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后，还有`<code>GetBlockFromChunkCoordinates</code>没有实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> // 获取相邻块的类型</span><br><span class="line">var neighbourBlockType = Chunk.GetBlockFromChunkCoordinates(chunk, neighbourBlockCoordinates);</span><br></pre></td></tr></table></figure><p>我们进继续在Chunk类中完善：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BlockType <span class="title">GetBlockFromChunkCoordinates</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">    <span class="comment">// 检查给定的块坐标是否在当前 Chunk 的范围内</span></span><br><span class="line">        <span class="keyword">if</span> (InRange(chunkData, x) &amp;&amp; InRangeHeight(chunkData, y) &amp;&amp; InRange(chunkData, z))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">int</span> index = GetIndexFromPosition(chunkData, x, y, z);</span><br><span class="line">            <span class="keyword">return</span> chunkData.blocks[index];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果不在范围内，则向世界对象请求获取该块类型</span></span><br><span class="line">        <span class="keyword">return</span> chunkData.worldReference.GetBlockFromChunkCoordinates(chunkData, chunkData.worldPosition.x + x, chunkData.worldPosition.y + y, chunkData.worldPosition.z + z);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="完善world">完善World</h4><p>继续实现上面代码中的`<code>GetBlockFromChunkCoordinates</code>方法</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> BlockType <span class="title">GetBlockFromChunkCoordinates</span>(<span class="params">ChunkData chunkData, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 计算指定块坐标对应的 Chunk 的世界位置</span></span><br><span class="line">    Vector3Int pos = Chunk.ChunkPositionFromBlockCoords(<span class="keyword">this</span>, x, y, z);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用于存储查找到的 ChunkData</span></span><br><span class="line">    ChunkData containerChunk = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从字典中查找包含指定块坐标的 Chunk</span></span><br><span class="line">    chunkDataDictionary.TryGetValue(pos, <span class="keyword">out</span> containerChunk);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果未找到对应的 Chunk，返回 BlockType.Nothing 表示无块</span></span><br><span class="line">    <span class="keyword">if</span> (containerChunk == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> BlockType.Nothing;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将块的世界坐标转换为 Chunk 内部的局部坐标</span></span><br><span class="line">    Vector3Int blockInChunkCoordinates = Chunk.GetBlockInChunkCoordinates(containerChunk, <span class="keyword">new</span> Vector3Int(x, y, z));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回该块的类型</span></span><br><span class="line">    <span class="keyword">return</span> Chunk.GetBlockFromChunkCoordinates(containerChunk, blockInChunkCoordinates);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="完善chunk-1">完善Chunk</h4><p>最后实现完成最后一段代码：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> Vector3Int <span class="title">ChunkPositionFromBlockCoords</span>(<span class="params">World world, <span class="built_in">int</span> x, <span class="built_in">int</span> y, <span class="built_in">int</span> z</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建一个新的 Vector3Int 对象，用于存储 Chunk 的世界位置</span></span><br><span class="line">    Vector3Int pos = <span class="keyword">new</span> Vector3Int</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 计算给定 x 坐标所在的 Chunk 的世界位置</span></span><br><span class="line">        x = Mathf.FloorToInt(x / (<span class="built_in">float</span>)world.chunkSize) * world.chunkSize,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算给定 y 坐标所在的 Chunk 的世界位置</span></span><br><span class="line">        y = Mathf.FloorToInt(y / (<span class="built_in">float</span>)world.chunkHeight) * world.chunkHeight,</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 计算给定 z 坐标所在的 Chunk 的世界位置</span></span><br><span class="line">        z = Mathf.FloorToInt(z / (<span class="built_in">float</span>)world.chunkSize) * world.chunkSize</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 返回计算得到的 Chunk 世界位置</span></span><br><span class="line">    <span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="运行一下">运行一下</h3><p>最后，我们创建一个名为World的空对象，并添加<code>World</code>脚本,</p><p>设置Chunk Prefab 添加Chunk 预设体。</p><p><img src="Snipaste_2024-08-15_15-33-56.png" /></p><p>然后创建一个按钮。如下图所示，添加一个点击事件。</p><p><img src="Snipaste_2024-08-15_15-36-07.png" /></p><p>点击运行，再次点击按钮，你应该在游戏运行窗口看到以下画面：</p><p><img src="Snipaste_2024-08-15_15-38-16.png" /></p><p>下一步我们将生成更大更复杂的地形。</p><h2 id="下面有请chatgpt做总结">下面有请ChatGPT做总结</h2><h3 id="类与调用关系概述">类与调用关系概述</h3><p>在项目中定义了多个核心类和脚本，这些类和脚本共同协作以实现 Minecraft风格的体素世界生成与渲染。以下是每个类的作用及其相互之间的调用关系。</p><h4 id="blockdataimported">1. <strong>BlockDataImported</strong></h4><ul><li><strong>作用</strong>:这个类或结构体通常用于加载和管理从外部资源（如 JSON文件或其他数据格式）导入的方块数据。它是数据的输入来源。</li><li><strong>调用关系</strong>: 通过 <code>BlockDataManager</code>进行管理，并将数据加载到游戏内。</li></ul><h4 id="blockdatamanager-1">2. <strong>BlockDataManager</strong></h4><ul><li><strong>作用</strong>:管理所有方块的数据，包括每个方块的纹理信息、碰撞检测、是否是固体等属性。它使用<code>BlockDataSO</code> 来存储这些数据。</li><li><strong>调用关系</strong>: 被<code>BlockHelper</code>、<code>Chunk</code>等类调用，用于获取特定方块的数据，比如纹理、是否生成碰撞体等。</li></ul><h4 id="blockdataso-1">3. <strong>BlockDataSO</strong></h4><ul><li><strong>作用</strong>: ScriptableObject 用于在 Unity编辑器中管理和配置方块数据，允许设计师在编辑器中直观地配置方块属性。</li><li><strong>调用关系</strong>: 被 <code>BlockDataManager</code>使用以统一管理方块数据。</li></ul><h4 id="blockhelper-1">4. <strong>BlockHelper</strong></h4><ul><li><strong>作用</strong>:提供与方块相关的辅助方法，例如获取方块的网格数据、计算相邻方块的位置、生成特定方向的面、计算UV 坐标等。</li><li><strong>调用关系</strong>: 被 <code>Chunk</code>类调用，用于生成每个块的网格数据。</li></ul><h4 id="blocktype">5. <strong>BlockType</strong></h4><ul><li><strong>作用</strong>:枚举（enum）或类，用于定义游戏中所有可用的方块类型，如空气、草地、石头、水等。</li><li><strong>调用关系</strong>: 通过 <code>Chunk</code> 和<code>BlockHelper</code>被大量使用，定义每个块的类型，并决定其外观和行为。</li></ul><h4 id="chunk-1">6. <strong>Chunk</strong></h4><ul><li><strong>作用</strong>:表示世界中的一个区块，包含一个块的集合，管理区块内的块数据，生成并返回区块的网格数据。</li><li><strong>调用关系</strong>: 负责调用 <code>BlockHelper</code>生成区块的网格数据，并与 <code>ChunkRenderer</code> 协作渲染区块。</li></ul><h4 id="chunkdata">7. <strong>ChunkData</strong></h4><ul><li><strong>作用</strong>:存储特定区块的所有数据，包括每个块的类型、位置、以及区块的世界位置等。</li><li><strong>调用关系</strong>: <code>Chunk</code> 使用<code>ChunkData</code> 来访问和修改区块的具体数据。<code>World</code>类生成世界时，也使用 <code>ChunkData</code> 来管理每个区块的数据。</li></ul><h4 id="chunkrenderer">8. <strong>ChunkRenderer</strong></h4><ul><li><strong>作用</strong>: 负责渲染区块，管理区块的 Mesh组件，将生成的网格数据应用到 Unity 的 Mesh 上以进行渲染。</li><li><strong>调用关系</strong>: <code>World</code> 生成世界时，会实例化<code>ChunkRenderer</code>，并使用它来显示生成的区块。</li></ul><h4 id="direction-1">9. <strong>Direction</strong></h4><ul><li><strong>作用</strong>:枚举类，用于定义可能的方向，如上、下、左、右、前、后，表示方块的六个面。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code> 和<code>Chunk</code> 使用，用于确定方块的方向并生成相应的面。</li></ul><h4 id="directionextensions-1">10.<strong>DirectionExtensions</strong></h4><ul><li><strong>作用</strong>: 提供扩展方法，用于从 <code>Direction</code>枚举中获取方向向量，帮助确定方块在某个方向上的相邻方块位置。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code>调用，用于计算相邻方块的位置。</li></ul><h4 id="meshdata">11. <strong>MeshData</strong></h4><ul><li><strong>作用</strong>: 存储生成的网格数据，包括顶点、三角形、UV坐标等，最终用于构建区块的 Mesh。</li><li><strong>调用关系</strong>: 被 <code>BlockHelper</code> 和<code>Chunk</code> 使用，生成方块和区块的网格数据。</li></ul><h4 id="world-1">12. <strong>World</strong></h4><ul><li><strong>作用</strong>:管理整个体素世界的生成、维护和渲染，生成多个区块，并组织它们形成完整的世界。</li><li><strong>调用关系</strong>: 生成并管理 <code>Chunk</code> 和<code>ChunkRenderer</code>，负责大规模的世界生成逻辑，并与<code>BlockDataManager</code>、<code>ChunkData</code>协作处理方块和区块的数据。</li></ul><h3 id="调用关系图概念化">调用关系图（概念化）</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">                     +-------------------+</span><br><span class="line">                     | BlockDataImported |</span><br><span class="line">                     +-------------------+</span><br><span class="line">                              |</span><br><span class="line">                     +-------------------+</span><br><span class="line">                     |  BlockDataManager  |</span><br><span class="line">                     +-------------------+</span><br><span class="line">                     /           \</span><br><span class="line">      +-------------+             +-----------------+</span><br><span class="line">      | BlockDataSO |             |  BlockDataHelper|</span><br><span class="line">      +-------------+             +-----------------+</span><br><span class="line">                                      |</span><br><span class="line">                                  +-------+</span><br><span class="line">                                  | BlockType |</span><br><span class="line">                                  +-------+</span><br><span class="line">                                     |</span><br><span class="line">         +--------------------------------------------+</span><br><span class="line">         |                                            |</span><br><span class="line">    +--------+                                   +--------+</span><br><span class="line">    | Chunk  |                                   | World  |</span><br><span class="line">    +--------+                                   +--------+</span><br><span class="line">       |                                            |</span><br><span class="line">+-------------+                                  +-------------+</span><br><span class="line">| ChunkData   |                                  | ChunkRenderer|</span><br><span class="line">+-------------+                                  +-------------+</span><br><span class="line">       |</span><br><span class="line">   +----------+</span><br><span class="line">   | MeshData |</span><br><span class="line">   +----------+</span><br></pre></td></tr></table></figure><h3 id="section"></h3><p>这些类和脚本的设计紧密合作以实现体素世界的生成和渲染。在这个系统中，<code>World</code>类负责管理整个世界的生成和维护；<code>Chunk</code> 和<code>ChunkData</code> 管理区块的数据与生成；<code>BlockHelper</code> 和<code>MeshData</code> 则负责具体的网格数据生成和处理；而<code>BlockDataManager</code> 和 <code>BlockType</code>则集中管理方块的具体属性和行为。每个类各司其职，共同协作构建一个复杂且可扩展的体素世界系统。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;使用Unity来制作一个类似Minecraft的游戏场景。这个系列的文章将记录我制作这个游戏场景的过程。&lt;/p&gt;
&lt;p&gt;我们首先将建立一个&lt;a
href=&quot;https://zh.wikipedia.org/zh-cn/體素&quot;&gt;体</summary>
      
    
    
    
    <category term="游戏开发" scheme="https://youyouhangyong.github.io/categories/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Minecraft" scheme="https://youyouhangyong.github.io/tags/Minecraft/"/>
    
    <category term="Unity" scheme="https://youyouhangyong.github.io/tags/Unity/"/>
    
    <category term="游戏开发" scheme="https://youyouhangyong.github.io/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>图像表示和图像增强（二）</title>
    <link href="https://youyouhangyong.github.io/2023/07/29/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2023/07/29/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2023-07-29T05:44:48.000Z</published>
    <updated>2023-07-29T05:48:51.540Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像处理二">图像处理（二）</h2><h3 id="滤波">滤波</h3><p>滤波是一种常见的信号处理技术，用于去除信号中的噪声、平滑信号、增强信号特征等。在图像处理中，滤波器（也称为卷积核或内核）在图像上滑动，对图像的每个像素点进行加权求和，从而得到输出图像的像素值。滤波可以根据滤波器的设计和权重分布，实现不同的效果。</p><p>给出以下图片：<img src="yuan.png" alt="yuan" /></p><p><strong>进行三种滤波的演示：</strong></p><p><strong>使用OpenCV库进行图像处理操作</strong></p><h4 id="均值滤波">1. 均值滤波：</h4><p>均值滤波是一种线性平滑滤波方法，它<strong>用周围像素的平均值来替代当前像素值</strong>。均值滤波对图像中的噪声有较好的去除效果，同时能够一定程度上平滑图像。由于简单易实现，均值滤波通常用于实时应用或较低要求的去噪处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均值滤波</span></span><br><span class="line">blurred_image = cv2.blur(image, (<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和均值滤波后的图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, image)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Blurred Image (Mean)&#x27;</span>, blurred_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="Mean.png" alt="Mean" /><figcaption aria-hidden="true">Mean</figcaption></figure><h4 id="中值滤波">2. 中值滤波：</h4><p>中值滤波是一种非线性滤波方法，它<strong>用周围像素值的中值来替代当前像素值</strong>。中值滤波对图像中的椒盐噪声（即黑白点噪声）有较好的去噪效果，因为它能够有效地去除极端值（噪点），而不受滤波器大小的影响。中值滤波常用于去除椒盐噪声或其他噪声类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 中值滤波</span></span><br><span class="line">median_blurred_image = cv2.medianBlur(image, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和中值滤波后的图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, image)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Blurred Image (Median)&#x27;</span>, median_blurred_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="Median.png" alt="Median" /><figcaption aria-hidden="true">Median</figcaption></figure><h4 id="高斯滤波">3. 高斯滤波：</h4><p>高斯滤波是一种<strong>基于高斯函数的加权平滑滤波方法</strong>。它用<strong>高斯函数的权重加权平均周围像素值来替代当前像素值</strong>。高斯滤波相比于均值滤波在平滑图像的同时，更加<strong>注重保留图像的边缘信息</strong>，因为权重与距离中心像素的距离成正比，<strong>距离越近的像素有更大的权重</strong>。高斯滤波通常用于平滑图像并去除高斯噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 高斯滤波</span></span><br><span class="line">gaussian_blurred_image = cv2.GaussianBlur(image, (<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和高斯滤波后的图像</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;Original Image&#x27;</span>, image)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;Blurred Image (Gaussian)&#x27;</span>, gaussian_blurred_image)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="Gaussian.png" alt="Gaussian" /><figcaption aria-hidden="true">Gaussian</figcaption></figure><p>在实际应用中，选择合适的滤波方式取决于图像处理的具体需求和噪声特点。均值滤波对于轻度噪声和平滑效果较好的图像适用；中值滤波对于椒盐噪声较多的图像较为有效；高斯滤波则适用于平滑图像同时保留边缘信息的情况。通常，这三种滤波方式可以相互结合使用，以达到更好的图像处理效果。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图像处理二&quot;&gt;图像处理（二）&lt;/h2&gt;
&lt;h3 id=&quot;滤波&quot;&gt;滤波&lt;/h3&gt;
&lt;p&gt;滤波是一种常见的信号处理技术，用于去除信号中的噪声、平滑信号、增强信号特征等。在图像处理中，滤波器（也称为卷积核或内核）在图像上滑动，对图像的每个像素点进行加权求和，从而得到</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>图像表示和图像增强（一）</title>
    <link href="https://youyouhangyong.github.io/2023/07/25/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://youyouhangyong.github.io/2023/07/25/%E5%9B%BE%E5%83%8F%E8%A1%A8%E7%A4%BA%E5%92%8C%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2023-07-25T03:43:08.000Z</published>
    <updated>2023-07-25T06:19:31.457Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像表示">图像表示</h2><p>图像表示与获取主要包括:</p><ol type="1"><li>图像的数字化表示</li></ol><ul><li>图像是连续的信号,需要通过采样和量化过程变为数字化的离散信号。</li><li>采样间隔(Sample spacing)决定了图像的分辨率和包含的信息量。</li><li>量化表决定了图像的灰度级数(比特数)。</li></ul><ol start="2" type="1"><li>颜色模式</li></ol><ul><li>RGB色彩模式:颜色通过红绿蓝三个颜色通道的组合表示。</li><li>灰度图像:只有灰度一个通道,表示图像的亮度信息。</li></ul><ol start="3" type="1"><li>图像获取</li></ol><ul><li>摄像机、图像传感器采集光线信息,转换为图像信号。</li><li>医学成像(CT、MRI等)通过非光学方法获取图像。</li></ul><ol start="4" type="1"><li>图像文件格式</li></ol><ul><li>JPEG:有损压缩格式,文件大小较小。</li><li>PNG:无损压缩格式,保留更多细节质量。</li><li>TIFF:灵活的位图图像格式。</li></ul><ol start="5" type="1"><li>图像存储</li></ol><ul><li>像素网格存储:行序和列序存储。</li><li>数据压缩:提高存储效率。</li></ul><p>图像从连续信号到数字化表示的过程,不同的颜色模式、文件格式,以及如何有效存储图像数据。这些构成了数字图像处理的基础。</p><h2 id="图像增强">图像增强</h2><p>图像增强主要包括以下几种方法:</p><h3 id="直方图均衡化">1. <strong>直方图均衡化</strong></h3><ul><li><p>改善图像的对比度,使得整个灰度范围都得到充分利用。</p></li><li><p>直方图均衡化后,容易区分不同部分的灰度差异。</p></li></ul><p>直方图均衡化(HistogramEqualization)是图像处理中常用的对比度增强技术,其目的是<strong>扩展图像的灰度范围</strong>,使图像灰度直方图尽可能均匀,<strong>从而增强图像的对比度</strong>。</p><p>具体做法是:</p><pre><code>  1. 计算图像的灰度直方图,即**统计每个灰度级个数**。  2. 计算每个灰度级的累积分布函数(CDF)。  3. 根据CDF,通过映射函数**将原始灰度级映射到新的灰度级**。这个映射函数使得新的灰度级数量在**0~255范围尽可能均匀**。  4. 根据映射函数转换每个像素的灰度值,生成直方图均衡化后的图像。</code></pre><p>直方图均衡化后,原来灰度分布范围小的区域会被拉伸到0~255全部范围,从而增强对比度。这对于亮度分布很局限的图像来说可以有效提高清晰度和可识别性。但它也可能导致图像增益过大出现反转。所以需针对不同图像谨慎使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;image.jpg&#x27;</span>)  <span class="comment"># 读取彩色图像</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将彩色图像转换为灰度图像</span></span><br><span class="line">img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 灰度图像进行直方图均衡化</span></span><br><span class="line">hist, bins = np.histogram(img_gray.flatten(), <span class="number">256</span>, [<span class="number">0</span>, <span class="number">256</span>])</span><br><span class="line">cdf = hist.cumsum()</span><br><span class="line">cdf_m = cdf * hist.<span class="built_in">max</span>() / cdf.<span class="built_in">max</span>()</span><br><span class="line"></span><br><span class="line">img_eq = np.interp(img_gray.flatten(), bins[:-<span class="number">1</span>], cdf_m)</span><br><span class="line">img_eq = img_eq.reshape(img_gray.shape)</span><br><span class="line"></span><br><span class="line">plt.imshow(img, cmap=<span class="string">&#x27;gray&#x27;</span>)  <span class="comment"># 原图彩色</span></span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(img_gray, cmap=<span class="string">&#x27;gray&#x27;</span>)  <span class="comment"># 原图-&gt;灰色图片</span></span><br><span class="line">plt.show()</span><br><span class="line">plt.imshow(img_eq, cmap=<span class="string">&#x27;gray&#x27;</span>)  <span class="comment"># 灰色图片-&gt;直方图均衡化</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><table><colgroup><col style="width: 33%" /><col style="width: 33%" /><col style="width: 33%" /></colgroup><thead><tr class="header"><th>原图</th><th>灰度图</th><th>直方图均衡化后的灰度图</th></tr></thead><tbody><tr class="odd"><td><img src="image-20230725114526717.png"alt="image-20230725114526717" /></td><td><img src="image-20230725114544412.png"alt="image-20230725114544412" /></td><td><img src="image-20230725114551233.png"alt="image-20230725114551233" /></td></tr></tbody></table><p>直方图均衡化在图像处理中的典型应用包括:</p><ol type="1"><li><p><strong>对比度增强</strong>：直方图均衡化可以有效拉伸图像的动态范围,增加图像对比度,使得图像细节更加明显。这对于低对比度的图像来说尤为重要。</p></li><li><p><strong>医学成像</strong>：在X射线、CT等医学图像分析中,使用直方图均衡化可以增加图像不同组织之间的对比度,更容易识别和诊断。</p></li><li><p><strong>夜视及卫星图像处理</strong>：由于拍摄条件受限,这些图像常常整体对比度很弱。使用均衡化可以增强显示效果。</p></li><li><p><strong>影像监控</strong>：在监控摄像中均衡化可以提高视频质量,更准确识别人或物体。</p></li><li><p><strong>人脸识别</strong>：直方图均衡化可以减少照明变化对人脸识别的影响,提高识别准确率。</p></li></ol><p>总之,直方图均衡化在需要提高图像对比度和细节的场合有着广泛的应用。但也需要注意它可能带来<strong>图像增益过高</strong>的问题。</p><h3 id="灰度变换">2. 灰度变换</h3><p>灰度变换是通过对图像像素点的灰度值进行映射来调整图像的对比度和亮度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像</span></span><br><span class="line">image = cv2.imread(<span class="string">&#x27;input_image.jpg&#x27;</span>, cv2.IMREAD_GRAYSCALE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性灰度变换</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linear_grayscale_transform</span>(<span class="params">image, alpha, beta</span>):</span><br><span class="line">    <span class="comment"># 对每个像素应用线性变换</span></span><br><span class="line">    result = alpha * image + beta</span><br><span class="line">    <span class="comment"># 将灰度值限制在[0, 255]范围内</span></span><br><span class="line">    result = np.clip(result, <span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">    <span class="keyword">return</span> result.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非线性灰度变换（伽马变换）</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gamma_transform</span>(<span class="params">image, gamma</span>):</span><br><span class="line">    <span class="comment"># 对每个像素应用伽马变换</span></span><br><span class="line">    result = np.power(image / <span class="number">255.0</span>, gamma) * <span class="number">255.0</span></span><br><span class="line">    <span class="keyword">return</span> result.astype(np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置线性变换的参数</span></span><br><span class="line">alpha = <span class="number">1.5</span></span><br><span class="line">beta = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置伽马变换的参数</span></span><br><span class="line">gamma_value = <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用线性灰度变换</span></span><br><span class="line">linear_transformed_image = linear_grayscale_transform(image, alpha, beta)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用伽马变换</span></span><br><span class="line">gamma_transformed_image = gamma_transform(image, gamma_value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示原始图像和变换后的图像</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>)</span><br><span class="line">plt.imshow(image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Original Image&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>)</span><br><span class="line">plt.imshow(linear_transformed_image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Linear Grayscale Transform&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">plt.imshow(gamma_transformed_image, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Gamma Transform&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure><img src="image-20230725141320822.png" alt="image-20230725141320822" /><figcaption aria-hidden="true">image-20230725141320822</figcaption></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;图像表示&quot;&gt;图像表示&lt;/h2&gt;
&lt;p&gt;图像表示与获取主要包括:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;图像的数字化表示&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;图像是连续的信号,需要通过采样和量化过程变为数字化的离散信号。&lt;/li&gt;
&lt;li&gt;采</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>决策树</title>
    <link href="https://youyouhangyong.github.io/2023/07/22/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <id>https://youyouhangyong.github.io/2023/07/22/%E5%86%B3%E7%AD%96%E6%A0%91/</id>
    <published>2023-07-22T06:22:41.000Z</published>
    <updated>2023-07-25T03:39:47.970Z</updated>
    
    <content type="html"><![CDATA[<p>决策树是一种常见的监督学习方法,用于分类和回归。</p><p>主要思想:将数据递归地按特征分割,构建一个树形结构,表示输入和输出之间的映射关系。</p><p>特点:非参数化模型,可以处理数值和分类数据,易于理解和解释。</p><p>算法:常用ID3、C4.5、CART等,通过选取最优特征进行数据分割。</p><ol type="1"><li>分割标准:信息增益、GINI指数等,度量分割的好坏。</li><li>停止条件:没有特征可选或达到树的最大深度。</li><li>预测:从根节点开始,测试数据在树中传播,直到达叶节点获得预测。</li><li>剪枝:防止过拟合,后剪枝或预剪枝。</li><li>集成学习:决策树容易过拟合,通常使用随机森林、GBDT等集成学习方法。</li></ol><p>决策树通过递归分割构建树模型,易于理解和解释,是一种常用的基础分类与回归方法。</p><p>下面通过鸢尾花数据来进行一个简单的演示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.environ[<span class="string">&#x27;PATH&#x27;</span>] = os.pathsep + <span class="string">r&#x27;C:\Program Files (x86)\Graphviz2.38\bin&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> sklearn.datasets <span class="keyword">import</span> load_iris</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> tree</span><br><span class="line"><span class="keyword">import</span> graphviz</span><br><span class="line"></span><br><span class="line">iris = load_iris() <span class="comment"># 加载鸢尾花原始数据集</span></span><br><span class="line">X = iris.data[:, :<span class="number">2</span>]  <span class="comment"># 取前两个特征，已经分割好</span></span><br><span class="line">y = iris.target <span class="comment"># 将特征存储在变量X中，而目标值（类别）存储在变量y中</span></span><br><span class="line"></span><br><span class="line">clf = tree.DecisionTreeClassifier()</span><br><span class="line">clf = clf.fit(X, y)  <span class="comment"># 创建了一个决策树分类器并将数据 X 和对应的目标值y用于训练模型。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化决策树</span></span><br><span class="line">dot_data = tree.export_graphviz(clf, out_file=<span class="literal">None</span>)<span class="comment"># export_graphviz可以导出决策树的DOT图描述文件</span></span><br><span class="line">graph = graphviz.Source(dot_data)</span><br><span class="line">graph.render(<span class="string">&quot;Iris&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对新样本进行预测</span></span><br><span class="line"><span class="built_in">print</span>(clf.predict([[<span class="number">2.4</span>, <span class="number">2.05</span>]]))  <span class="comment"># [0]</span></span><br><span class="line"><span class="built_in">print</span>(clf.predict([[<span class="number">4.9</span>, <span class="number">2.05</span>]]))  <span class="comment"># [1]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol type="1"><li><p>iris原始数据集存在于scikit-learn数据集模块中,可以通过load_iris()直接导入使用。</p><ol type="1"><li>iris.data -150x4的NumPy数组,包含4个特征,分别是花萼长度、花萼宽度、花瓣长度、花瓣宽度，这里只取前了两个特征</li><li>iris.target -150x1的NumPy数组,包含每朵鸢尾花对应的类别,0/1/2代表Setosa/Versicolor/Virginica</li></ol></li><li><p>通过代码提取iris的数据特征和目标值进行训练,得到一个决策树分类器模型clf。</p></li><li><p>决策树模型clf包含了训练后的树结构,但此时树结构还没有可视化。</p></li><li><p>使用export_graphviz可以导出决策树的DOT图描述文件。</p></li><li><p>使用graphviz模块将DOT文件转换为图像格式,如PDF。</p></li><li><p>所以最终我们得到了可视化的决策树图像iris.pdf。</p></li></ol><div class="row">    <embed src="/pdf/Iris.pdf" width="100%" height="550" type="application/pdf"></div><p>在决策树的图示中:</p><p><strong>gini</strong>:表示该节点的基尼系数(Giniindex),它衡量了该节点的不纯度,值越小表示样本集合的纯度越高。</p><p><strong>samples</strong>:表示该节点包含的样本数量。</p><p><strong>value</strong>:表示该节点包含的不同类别的样本数目,是个数组。</p><p>例如在根节点的信息:</p><p>gini = 0.667</p><p>samples = 150</p><p>value = [50, 50, 50]</p><p>意义是:</p><p>基尼系数为0.667,表示根节点的不纯度较高。</p><p>总样本量为150,即包含全部的150朵鸢尾花。</p><p>值数组[50, 50, 50]表示共有3类,每类样本数量分别为50。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;决策树是一种常见的监督学习方法,用于分类和回归。&lt;/p&gt;
&lt;p&gt;主要思想:将数据递归地按特征分割,构建一个树形结构,表示输入和输出之间的映射关系。&lt;/p&gt;
&lt;p&gt;特点:非参数化模型,可以处理数值和分类数据,易于理解和解释。&lt;/p&gt;
&lt;p&gt;算法:常用ID3、C4.5、C</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>SVM</title>
    <link href="https://youyouhangyong.github.io/2023/07/20/SVM/"/>
    <id>https://youyouhangyong.github.io/2023/07/20/SVM/</id>
    <published>2023-07-20T04:37:32.000Z</published>
    <updated>2023-07-20T04:42:28.410Z</updated>
    
    <content type="html"><![CDATA[<p><strong>SVM(支持向量机)</strong>是一种常用的机器学习算法,<strong>主要用于分类问题</strong>,但是也可以扩展做回归任务。</p><p>SVM的主要思想是:</p><ol type="1"><li>将样本<strong>映射</strong>到高维空间中,<strong>转换为线性可分问题</strong>。</li><li>在高维空间中,存在很多分隔超平面可以将不同类样本完全分开。SVM试图找到这些超平面的最优解,即最大间隔超平面,这样可以获得最佳的分类GENERALIZATION（泛化）能力。</li><li>最大间隔超平面可以由支持向量决定,而支持向量就是离分隔超平面最近的样本点。</li><li>通过核函数,SVM可以隐式地实现高维映射,并建立优化问题求解最大间隔超平面,thus分类模型。</li></ol><p>SVM决策超平面的推导过程:</p><p>设训练样本为<span class="math inline">\(\{(x_1, y_1), (x_2, y_2),\cdots, (x_n, y_n)\}\)</span>,其中<span class="math inline">\(x_i \in\mathbb{R}^d\)</span>,<span class="math inline">\(y_i \in\{-1,+1\}\)</span>。</p><p>SVM的目标是找到一个分类超平面:</p><p><span class="math display">\[w^Tx + b = 0\]</span></p><p>将两类样本完全分开,且间隔尽可能大。</p><p>定义样本<spanclass="math inline">\(x_i\)</span>到超平面的函数间隔为:</p><p><span class="math display">\[d_i = \frac{|w^Tx_i +b|}{||w||}\]</span></p><p>则求最大间隔等价于最小化<spanclass="math inline">\(||w||\)</span>,满足约束:</p><p><span class="math display">\[y_i(w^Tx_i + b) \geq 1,i=1,2,\cdots,n\]</span></p><p>即解决以下优化问题:</p><p><span class="math display">\[\min\limits_{w,b}\frac{1}{2}||w||^2\]</span></p><p><span class="math display">\[\text{s.t. } y_i(w^Tx_i + b) \geq 1,i=1,2,\cdots,n\]</span></p><p>引入拉格朗日乘子<span class="math inline">\(\alpha_i \geq0\)</span>,构建拉格朗日函数:</p><p><span class="math display">\[L(w,b,\alpha) = \frac{1}{2}||w||^2 -\sum\limits_{i=1}^{n}{\alpha_i[y_i(w^Tx_i + b) - 1]}\]</span></p><p>对<span class="math inline">\(w,b\)</span>的偏导数等于0可得:</p><p><span class="math display">\[w = \sum\limits_{i=1}^{n}{\alpha_i y_ix_i}\]</span></p><p><span class="math display">\[\sum\limits_{i=1}^{n}{\alpha_i y_i} =0\]</span></p><p>将<span class="math inline">\(w\)</span>代回原问题,得到对偶问题:</p><p><span class="math display">\[\max\limits_{\alpha}\sum\limits_{i=1}^{n}{\alpha_i} -\frac{1}{2}\sum\limits_{i,j=1}^{n}{\alpha_i \alpha_j y_i y_j (x_i \cdotx_j)}\]</span></p><p><span class="math display">\[\text{s.t. } \alpha_i \geq 0,\sum\limits_{i=1}^{n}{\alpha_i y_i} = 0\]</span></p><p>求解得到<spanclass="math inline">\(\alpha\)</span>,则最大间隔超平面为:</p><p><span class="math display">\[w = \sum\limits_{i=1}^{n}{\alpha_i y_ix_i}\]</span> <span class="math display">\[b = \frac{1}{y_i} - w \cdotx_i, \text{对任一支持向量}i\]</span></p><p>将输入样本映射到高维特征空间。SVM试图在高维空间中找到一个最优分类超平面,以获得最佳的分类效果。</p><p>通过核函数实现了从低维到高维的隐式映射。常见的核函数有线性核、多项式核、Gauss核(RBF核)等。</p><p>通过求解对偶问题,只需要输入数据的内积,而输入数据的高维映射可以通过核函数实现。</p><p>这样就可以在低维输入空间构建最优分隔超平面,而实际上是在高维特征空间实现,从而处理非线性分类问题。</p><p>常见的GaussRBF核将输入映射到无穷维,可以看成在高维空间构建一个泛化能力最强的分类模型。</p><p>核技巧扩展了SVM的适用范围,使其不仅适用于线性可分问题,也可用于复杂的非线性分类问题。</p><p>通过选择不同的核函数,可以灵活地处理各种类型的数据集。</p><p>核技巧是SVM强大的原因之一,它寻求高维映射以求分类的最优解,却只需要计算低维数据的内积,thus有效实现了“维度灾难”的解决。</p><hr /><p>以下是一个在二维求解决策平面的代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成样本数据</span></span><br><span class="line">np.random.seed(<span class="number">0</span>)</span><br><span class="line">X = np.r_[np.random.randn(<span class="number">20</span>, <span class="number">2</span>) - [<span class="number">2</span>, <span class="number">2</span>], np.random.randn(<span class="number">20</span>, <span class="number">2</span>) + [<span class="number">2</span>, <span class="number">2</span>]]</span><br><span class="line">y = [<span class="number">0</span>] * <span class="number">20</span> + [<span class="number">1</span>] * <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合SVM模型</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制样本点</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, s=<span class="number">30</span>, cmap=plt.cm.Paired)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制决策边界</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">xlim = ax.get_xlim()</span><br><span class="line">ylim = ax.get_ylim()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网格采样点</span></span><br><span class="line">xx = np.linspace(xlim[<span class="number">0</span>], xlim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">yy = np.linspace(ylim[<span class="number">0</span>], ylim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">YY, XX = np.meshgrid(yy, xx)</span><br><span class="line">xy = np.vstack([XX.ravel(), YY.ravel()]).T</span><br><span class="line">Z = clf.decision_function(xy).reshape(XX.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制决策边界</span></span><br><span class="line">ax.contour(XX, YY, Z, colors=<span class="string">&#x27;k&#x27;</span>, levels=[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], alpha=<span class="number">0.5</span>, linestyles=[<span class="string">&#x27;--&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;--&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制支持向量</span></span><br><span class="line">ax.scatter(clf.support_vectors_[:, <span class="number">0</span>], clf.support_vectors_[:, <span class="number">1</span>], s=<span class="number">100</span>, linewidth=<span class="number">1</span>, facecolors=<span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">           edgecolors=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pC7xzjJ"><imgsrc="https://s1.ax1x.com/2023/07/20/pC7xzjJ.png"alt="pC7xzjJ.png" /></a></p><p>在这个例子中,我们先随机生成了两类二维样本数据,然后训练一个线性核SVM模型,并画出了决策边界。支持向量也被标记出来了。</p><hr /><p>同样可以求解非线性问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成一个环形分布的数据集</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">X = np.vstack((np.random.randn(<span class="number">150</span>, <span class="number">2</span>) + [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">               np.random.randn(<span class="number">150</span>, <span class="number">2</span>) - [<span class="number">1</span>, <span class="number">2</span>]))</span><br><span class="line">y = [<span class="number">0</span>] * <span class="number">150</span> + [<span class="number">1</span>] * <span class="number">150</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用RBF核的SVM</span></span><br><span class="line">clf = svm.SVC(kernel=<span class="string">&#x27;rbf&#x27;</span>)</span><br><span class="line">clf.fit(X, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制样本点</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=y, s=<span class="number">30</span>, cmap=plt.cm.Paired)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制决策边界</span></span><br><span class="line">ax = plt.gca()</span><br><span class="line">xlim = ax.get_xlim()</span><br><span class="line">ylim = ax.get_ylim()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建网格采样点</span></span><br><span class="line">xx, yy = np.meshgrid(np.linspace(xlim[<span class="number">0</span>], xlim[<span class="number">1</span>], <span class="number">200</span>),</span><br><span class="line">                     np.linspace(ylim[<span class="number">0</span>], ylim[<span class="number">1</span>], <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])</span><br><span class="line">Z = Z.reshape(xx.shape)</span><br><span class="line"></span><br><span class="line">ax.contourf(xx, yy, Z, alpha=<span class="number">0.75</span>, cmap=plt.cm.Paired)</span><br><span class="line">ax.set_xlim(xlim)</span><br><span class="line">ax.set_ylim(ylim)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pC7z14f"><imgsrc="https://s1.ax1x.com/2023/07/20/pC7z14f.png"alt="pC7z14f.png" /></a></p><p>通过构造一个环形分布的二维非线性数据,然后使用RBF核的SVM进行建模。可以看到SVM学会了一个非线性的决策边界将两类不同程度的区分开。</p><hr /><p>生成了200个样本的二维数据集,然后进行了三维可视化。通过升维操作,SVM可以学习到一个线性的决策面对这些点进行分类。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br><span class="line"><span class="keyword">from</span> sklearn.svm <span class="keyword">import</span> SVC</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成二维非线性可分数据集</span></span><br><span class="line">np.random.seed(<span class="number">100</span>)</span><br><span class="line">X1 = np.random.randn(<span class="number">100</span>, <span class="number">2</span>) + [<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">X2 = np.random.randn(<span class="number">100</span>, <span class="number">2</span>) - [<span class="number">2</span>, <span class="number">2</span>]</span><br><span class="line">X = np.vstack((X1, X2)).astype(np.float32)</span><br><span class="line">y = np.array([<span class="number">0</span>] * <span class="number">100</span> + [<span class="number">1</span>] * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升维到三维</span></span><br><span class="line">X_3d = np.hstack((X, (X[:, <span class="number">0</span>]**<span class="number">2</span> + X[:, <span class="number">1</span>]**<span class="number">2</span>)[:, <span class="literal">None</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三维可视化</span></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>, projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">ax.scatter(X_3d[:, <span class="number">0</span>], X_3d[:, <span class="number">1</span>], X_3d[:, <span class="number">2</span>], c=y, s=<span class="number">10</span>, cmap=plt.cm.Spectral)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在三维空间构建最大间隔超平面</span></span><br><span class="line">clf = SVC(kernel=<span class="string">&#x27;linear&#x27;</span>)</span><br><span class="line">clf.fit(X_3d, y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制三维决策平面</span></span><br><span class="line">x1_min, x1_max = X[:, <span class="number">0</span>].<span class="built_in">min</span>(), X[:, <span class="number">0</span>].<span class="built_in">max</span>()</span><br><span class="line">x2_min, x2_max = X[:, <span class="number">1</span>].<span class="built_in">min</span>(), X[:, <span class="number">1</span>].<span class="built_in">max</span>()</span><br><span class="line">x1, x2 = np.mgrid[x1_min:x1_max:<span class="number">200j</span>, x2_min:x2_max:<span class="number">200j</span>]</span><br><span class="line">x_grid = np.stack((x1.ravel(), x2.ravel(), x1.ravel() ** <span class="number">2</span> + x2.ravel() ** <span class="number">2</span>), axis=<span class="number">1</span>)</span><br><span class="line">y_hat = clf.decision_function(x_grid)</span><br><span class="line">y_grid = y_hat.reshape((<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">ax.plot_surface(x1, x2, y_grid, alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pCHSwsH"><imgsrc="https://s1.ax1x.com/2023/07/20/pCHSwsH.png"alt="pCHSwsH.png" /></a></p><p>SVM(支持向量机)的主要思想和实现方法可以概括如下:</p><ol type="1"><li><p>思想:SVM试图找到一个最优分类超平面,使不同类样本Reality隔的边界尽可能大,从而获得最佳的 GENERALIZATION能力。</p></li><li><p>实现:将样本映射到高维特征空间,转换为线性可分问题。在高维空间中求解最大间隔超平面作为决策面。</p></li><li><p>优化目标:构建约束优化问题,最小化||w||并满足分类约束。求解得到最优w和b确定超平面。</p></li><li><p>对偶问题:引入拉格朗日乘子α,将原问题转换为对偶问题,求解α即可得到最优超平面。</p></li><li><p>核技巧:通过核函数计算输入样本的内积,实现高维映射。常用核有线性核、多项式核、GaussRBF核等。</p></li><li><p>模型参数:主要就是支持向量及对应的α。决策函数只依赖支持向量。</p></li><li><p>实现方法:一般通过求解相应的凸二次规划问题获得最优α,然后求出w,b。常用SMO算法加速训练。</p></li><li><p>应用:可处理线性和非线性分类问题。还可以扩展到回归任务。</p></li></ol><p>SVM通过间隔最大化寻求最佳分类超平面,核技巧实现高维映射,是一种流行的分类与回归方法。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;SVM(支持向量机)&lt;/strong&gt;是一种常用的机器学习算法,&lt;strong&gt;主要用于分类问题&lt;/strong&gt;,但是也可以扩展做回归任务。&lt;/p&gt;
&lt;p&gt;SVM的主要思想是:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;将样本&lt;strong&gt;映射&lt;</summary>
      
    
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>逻辑回归</title>
    <link href="https://youyouhangyong.github.io/2023/07/18/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/"/>
    <id>https://youyouhangyong.github.io/2023/07/18/%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92/</id>
    <published>2023-07-18T05:37:28.000Z</published>
    <updated>2023-07-18T06:57:25.354Z</updated>
    
    <content type="html"><![CDATA[<p>逻辑回归本质上是一个<strong>分类模型</strong>,用于预测输入数据属于哪个类别的<strong>概率</strong>。其基本思想是:</p><ol type="1"><li>构建一个线性函数,输入是样本特征,输出是样例属于某类的对数概率。</li><li>将线性函数的输出通过sigmoid函数转换为概率值。</li><li>根据最大概率,对样本进行分类预测。</li><li>通过最大化似然估计或最小化交叉熵损失,训练线性模型的参数。</li></ol><p>具体实现原理:</p><p>假设逻辑回归为<strong>二分类</strong>,线性函数为:</p><p><span class="math display">\[z = w_1 x_1 + w_2 x_2 + ... + w_n x_n +b\]</span></p><p>其中:</p><ul><li><span class="math inline">\(z\)</span> - 模型的预测值</li><li><span class="math inline">\(x_1, x_2,...,x_n\)</span> - <spanclass="math inline">\(n\)</span>个特征变量</li><li><span class="math inline">\(w_1, w_2,...,w_n\)</span> - <spanclass="math inline">\(n\)</span>个特征变量对应的模型参数权重</li><li><span class="math inline">\(b\)</span> - 模型的偏置项</li></ul><p>将z代入sigmoid函数求概率:</p><p><span class="math display">\[p = \frac{1}{1+e^{-z}}\]</span></p><p>其中: p表示输入样本为正类的概率。</p><p>则逻辑回归的损失函数为负对数似然或交叉熵。</p><p>通过梯度下降算法训练w和b,最小化损失,完成模型。</p><p>预测时,计算新样本的概率p,如果p&gt;0.5则预测为正类,否则为负类。</p><p>在逻辑回归模型中,常用的损失函数有以下两种:</p><ol type="1"><li>对数损失(LogLoss):也称对数似然损失函数,定义为负的对数似然函数,表达式为:</li></ol><p><span class="math display">\[Loss = -\frac{1}{N}\sum_{i=1}^N\left[y_i\log(p_i) + (1-y_i)\log(1-p_i) \right]\]</span></p><p>其中:- <span class="math inline">\(N\)</span> - 样本数量</p><ul><li><span class="math inline">\(y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的真实标签,取值为0或1</li><li><span class="math inline">\(p_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测概率。求和是对所有样本进行遍历。</li></ul><ol type="1"><li>交叉熵损失(CrossEntropy):它扩展了对数损失到多分类问题,表达式为:</li></ol><p><span class="math display">\[Loss = -\frac{1}{N} \sum_{i=1}^{N}y_{i}\log(p_{i})\]</span></p><p>其中:- <span class="math inline">\(N\)</span> - 样本数量 - <spanclass="math inline">\(y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的one-hot编码标签向量 - <spanclass="math inline">\(p_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测概率向量</p><p><span class="math inline">\(y_i\)</span>是one-hot向量,只有对应真实类别的单个元素值为1。<spanclass="math inline">\(p_i\)</span> 是预测概率向量。</p><p><span class="math inline">\(y_i\log(p_i)\)</span>计算两个概率分布差异的交叉熵。</p><p>求和后取负号得到交叉熵损失。</p><p><strong>Sigmoid函数的介绍：</strong></p><p>Sigmoid函数将任意实数映射到(0, 1)区间内,表达为上述分数形式。</p><p>当输入<span class="math inline">\(z\)</span>趋近正无穷大时,<spanclass="math inline">\(e^{-z}\)</span>趋近0,分母趋近1,所以<spanclass="math inline">\(p\)</span>趋近1。</p><p>当输入<span class="math inline">\(z\)</span>趋近负无穷大时,<spanclass="math inline">\(e^{-z}\)</span>趋近无穷大,分母趋近无穷大,所以<spanclass="math inline">\(p\)</span>趋近0。</p><p>sigmoid函数的这个S形曲线图形,利用它可以将任意值映射到概率之间,所以常被用作神经网络中门限函数和逻辑回归中概率输出函数。</p><p><a href="https://imgse.com/i/pCTVfNd"><imgsrc="https://s1.ax1x.com/2023/07/18/pCTVfNd.png"alt="pCTVfNd.png" /></a></p><p>抽象的说：逻辑回归=线性回归+Sigmoid函数</p><p>构造两个聚类式的高斯分布数据,用于逻辑回归分类:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LogisticRegression</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">mean1 = [<span class="number">1</span>, <span class="number">1</span>]</span><br><span class="line">mean2 = [-<span class="number">1</span>, -<span class="number">1</span>]</span><br><span class="line">cov = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]] </span><br><span class="line"></span><br><span class="line">X1 = np.random.multivariate_normal(mean1, cov, <span class="number">100</span>)</span><br><span class="line">X2 = np.random.multivariate_normal(mean2, cov, <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">X = np.concatenate((X1, X2)) </span><br><span class="line">y = np.array([<span class="number">0</span>]*<span class="number">100</span> + [<span class="number">1</span>]*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练和预测</span></span><br><span class="line">clf = LogisticRegression()</span><br><span class="line">clf.fit(X, y) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出数据分布和决策边界</span></span><br><span class="line">plt.scatter(X[:,<span class="number">0</span>], X[:,<span class="number">1</span>], c=y)</span><br><span class="line">ax = plt.gca()  </span><br><span class="line">xlim = ax.get_xlim()</span><br><span class="line">ylim = ax.get_ylim()</span><br><span class="line">xx = np.linspace(xlim[<span class="number">0</span>], xlim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">yy = np.linspace(ylim[<span class="number">0</span>], ylim[<span class="number">1</span>], <span class="number">30</span>)</span><br><span class="line">YY, XX = np.meshgrid(yy, xx)</span><br><span class="line">xy = np.vstack([XX.ravel(), YY.ravel()]).T</span><br><span class="line">Z = clf.decision_function(xy).reshape(XX.shape)</span><br><span class="line">ax.contour(XX, YY, Z, colors=<span class="string">&#x27;k&#x27;</span>, levels=[-<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>], alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>这里构造了两个高斯分布,<strong>分别围绕(1,1)和(-1,-1)生成类0和类1的数据</strong>。可以看到逻辑回归学习到了一个合适的决策边界将两个类别尽量分开。</p><p><a href="https://imgse.com/i/pCTZXqO"><imgsrc="https://s1.ax1x.com/2023/07/18/pCTZXqO.png"alt="pCTZXqO.png" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逻辑回归本质上是一个&lt;strong&gt;分类模型&lt;/strong&gt;,用于预测输入数据属于哪个类别的&lt;strong&gt;概率&lt;/strong&gt;。其基本思想是:&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;构建一个线性函数,输入是样本特征,输出是样例属于某类的对数概率。&lt;/li&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>线性回归</title>
    <link href="https://youyouhangyong.github.io/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/"/>
    <id>https://youyouhangyong.github.io/2023/07/16/%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92/</id>
    <published>2023-07-16T07:48:31.000Z</published>
    <updated>2023-07-18T06:57:33.371Z</updated>
    
    <content type="html"><![CDATA[<p>线性回归是一种基础而且常用的机器学习算法，顾名思义是一个回归模型。</p><p>它的假设是，<strong>输出y可以被输入x以线性的方式预测</strong><code>y = wx + b</code>,</p><p>其中，w和b是模型要学习的参数。</p><p><strong>线性回归的目标是求解w和b</strong>，使得预测输出y与真实输出之间的误差最小。</p><p>线性回归的损失函数通常使用均方误差作为衡量指标:</p><p><strong><span class="math display">\[MSE = \frac{1}{n} \sum_{i=1}^{n}(Y_i - \hat{Y}_i)^2\]</span></strong></p><p>其中:</p><ul><li><span class="math inline">\(n\)</span> - 样本数量</li><li><span class="math inline">\(Y_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的真实值</li><li><span class="math inline">\(\hat{Y}_i\)</span> - 第<spanclass="math inline">\(i\)</span>个样本的预测值</li><li><span class="math inline">\(\sum\)</span> -求和符号,对所有样本求和解析:</li><li><span class="math inline">\((Y_i - \hat{Y}_i)\)</span> 表示第<spanclass="math inline">\(i\)</span>个样本的预测误差,即真实值与预测值之</li><li><span class="math inline">\((Y_i - \hat{Y}_i)^2\)</span>对预测误差进行平方,避免正负误差相抵消,误差可能为负也可能为正，取平方有一个特性，它惩罚更大的错误更多。</li><li><span class="math inline">\(\frac{1}{n}\)</span>求样本平均值,防止样本数量影响所以MSE是每个样本平方误差之和的平均值,反映了模型预测值与真实值的偏差程度。</li></ul><p>下面是一个简单的示例，搞明白线性回归是干什么的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成数据</span></span><br><span class="line"><span class="comment"># x和y分别是一个一维数组,表示样本的特征和标签</span></span><br><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># w和b表示线性模型的参数,初始化为0</span></span><br><span class="line">w = <span class="number">0</span> </span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># lr是梯度下降的学习率,epochs是训练轮数</span></span><br><span class="line">lr = <span class="number">0.01</span> </span><br><span class="line">epochs = <span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    y_pred = w*x + b <span class="comment">#计算预测值   </span></span><br><span class="line">    loss = np.square(y_pred - y).mean()</span><br><span class="line">    w = w - lr*<span class="number">2</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((y_pred - y)*x) </span><br><span class="line">    b = b - lr*<span class="number">2</span>/<span class="built_in">len</span>(x) * np.<span class="built_in">sum</span>((y_pred - y))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w, b)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2.003880582342283 0.9859898664422495</span><br></pre></td></tr></table></figure><p>步骤：</p><ol type="1"><li>生成测试数据:<strong>x</strong>和<strong>y</strong>数组分别代表<strong>输入</strong>和<strong>输出</strong>,这里生成了5个数据点。</li><li>参数初始化:模型参数w和b初始化为0。</li><li>定义超参数:<strong>学习率</strong>lr为0.01,<strong>训练轮数</strong>epochs为1000。</li><li>训练:for循环表示进行1000轮训练,每轮都进行以下步骤:</li></ol><ul><li><ol type="1"><li>根据当前参数w和b,计算预测输出y_pred。</li></ol></li><li><ol start="2" type="1"><li>计算损失函数loss,这里使用<strong>均方误差</strong>。</li></ol></li><li><ol start="3" type="1"><li>根据损失函数<strong>求导</strong>得出w和b的梯度。</li></ol></li><li><ol start="4" type="1"><li>使用梯度下降算法更新w和b,其中lr是学习率。</li></ol></li></ul><p>​5. 打印出训练后的w和b参数。</p><p>分析：</p><p>针对这个线性回归代码,最理想的输出结果是:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w = 2 </span><br><span class="line">b = 1</span><br></pre></td></tr></table></figure><p>因为我们生成的示例数据符合这样一个模型:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y = 2x + 1</span><br></pre></td></tr></table></figure><p>也就是说,真实的模型参数应该是: w(权重参数)= 2 b(偏置参数)= 1</p><p>如果模型训练完美,经过足够多的迭代优化,我们期望的参数w和b会收敛到这两个值。</p><p>具体来看,在这个代码示例中:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">y = np.array([<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>])</span><br></pre></td></tr></table></figure><p>这些样本点正好符合公式 y = 2x + 1。</p><p>所以当代码训练结束后,如果我们的w和b分别收敛到2和1,就说明模型训练是成功的,完美拟合了这个线性关系。</p><p>其中调节线性回归模型的学习率会对训练过程和结果产生不同的影响:</p><ol type="1"><li>学习率增加:</li></ol><ul><li><p>收敛速度会变快,需要的迭代轮数会减少。</p></li><li><p>但是容易产生参数的振荡,难以收敛到稳定优化的结果。</p></li><li><p>最终模型的预测效果可能会变差。</p></li></ul><ol start="2" type="1"><li>学习率减小:</li></ol><ul><li><p>收敛速度会变慢,需要更多的迭代轮数。</p></li><li><p>参数更新会更加稳定和平滑。</p></li><li><p>最终可以收敛到一个较优的模型,预测效果更好。</p></li><li><p>但是计算代价更高,需要花费更多时间。</p></li></ul><p>所以学习率的选择需要找到最佳平衡点:</p><ul><li><p>学习率不能太大,否则容易产生参数振荡。</p></li><li><p>学习率也不能太小,否则收敛速度过慢。</p></li></ul><p>一个通用的方法是从一个较小的学习率开始,如果发现收敛速度过慢,可以适当增加学习率;如果出现振荡,则应该降低学习率。</p><p>下面再给出一个较复杂的例子：</p><p>这个线性回归的代码示例:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure><p>导入所需的numpy和matplotlib库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">np.random.seed(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>设置随机数种子,这样可以重现结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = np.random.uniform(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">3</span> + np.random.normal(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>使用numpy随机生成100组训练数据,x范围是0到100,y计算方式是y=2x+3加上正态噪声。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x.reshape(-<span class="number">1</span>,<span class="number">1</span>), y) </span><br></pre></td></tr></table></figure><p>使用scikit-learn中的LinearRegression模型,拟合训练数据x和y。需要reshapex 为二维。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x_test = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_pred = model.predict(x_test)</span><br></pre></td></tr></table></figure><p>生成0-100范围内的100个预测点x_test,用训练好的模型model预测对应的y值,得到y_pred。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">plt.scatter(x, y)</span><br><span class="line">plt.plot(x_test, y_pred, color=<span class="string">&#x27;r&#x27;</span>) </span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用matplotlib画出训练数据的散点图,以及用红色线画出预测的线性回归直线。增加坐标标签。</p><p>这样我们就可以直观地看到了模型对数据的拟合效果。</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成100组随机数据</span></span><br><span class="line">np.random.seed(<span class="number">1</span>)</span><br><span class="line">x = np.random.uniform(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">y = <span class="number">2</span>*x + <span class="number">3</span> + np.random.normal(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 拟合线性回归模型</span></span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line">model = LinearRegression()</span><br><span class="line">model.fit(x.reshape(-<span class="number">1</span>,<span class="number">1</span>), y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 预测</span></span><br><span class="line">x_test = np.linspace(<span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>).reshape(-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">y_pred = model.predict(x_test)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 画图</span></span><br><span class="line">plt.scatter(x, y) </span><br><span class="line">plt.plot(x_test, y_pred, color=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>我们先生成了100组随机数据,其中y满足公式y=2x+3加上一点正态扰动。</p><p>然后我们使用scikit-learn中的LinearRegression模型对数据进行线性回归拟合。</p><p>最后我们生成100个等间隔的x,用模型预测对应的y,并画出散点图和预测的线性回归直线。</p><p><a href="https://imgse.com/i/pCIMXMq"><imgsrc="https://s1.ax1x.com/2023/07/16/pCIMXMq.png"alt="pCIMXMq.png" /></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;线性回归是一种基础而且常用的机器学习算法，顾名思义是一个回归模型。&lt;/p&gt;
&lt;p&gt;它的假设是，&lt;strong&gt;输出y可以被输入x以线性的方式预测&lt;/strong&gt;
&lt;code&gt;y = wx + b&lt;/code&gt;,&lt;/p&gt;
&lt;p&gt;其中，w和b是模型要学习的参数。&lt;/p&gt;</summary>
      
    
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://youyouhangyong.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="深度学习" scheme="https://youyouhangyong.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo指令</title>
    <link href="https://youyouhangyong.github.io/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/"/>
    <id>https://youyouhangyong.github.io/2023/07/03/Front-matter%E7%A4%BA%E4%BE%8B/</id>
    <published>2023-07-03T06:53:50.000Z</published>
    <updated>2024-08-21T11:49:55.590Z</updated>
    
    <content type="html"><![CDATA[新建文章 $ hexo new<title><p>$ hexo new "Hexo指令"</p>]]></content>
    
    
      
      
    <summary type="html">新建文章 $ hexo new
&lt;title&gt;
&lt;p&gt;$ hexo new &quot;Hexo指令&quot;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Hexo" scheme="https://youyouhangyong.github.io/categories/Hexo/"/>
    
    
    <category term="Markdown" scheme="https://youyouhangyong.github.io/tags/Markdown/"/>
    
    <category term="Hexo" scheme="https://youyouhangyong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>数据结构实习</title>
    <link href="https://youyouhangyong.github.io/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/"/>
    <id>https://youyouhangyong.github.io/2023/06/30/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E7%A8%8B%E5%AE%9E%E4%B9%A0/</id>
    <published>2023-06-30T10:42:10.000Z</published>
    <updated>2023-07-03T07:21:33.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="实习内容">实习内容</h1><h2 id="一马踏棋盘">一、马踏棋盘</h2><h4 id="问题描述"><strong>问题描述</strong></h4><p>将马随机放在国际象棋的8×8棋盘[0～7][0～7]的某个方格中，马按走棋规则进行移动。要求每个方格只进入一次，走遍棋盘上全部64个方格。编制递归和非递归程序，求出马的行走路线，并按求出的行走路线，将数字1，2，…，64依次填入一个8×8的方阵，输出之。</p><h4 id="程序代码"><strong>程序代码</strong></h4><p><strong>棋盘定义</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> ROW 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COL 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_STEPS ROW*COL</span></span><br></pre></td></tr></table></figure><p><strong>定义每次的改变的相对坐标</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> move_x[<span class="number">8</span>] = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="type">int</span> move_y[<span class="number">8</span>] = &#123; <span class="number">2</span>, <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-1</span>, <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br></pre></td></tr></table></figure><p>方法1：<strong>DFS（递归）</strong></p><blockquote><p><code>Dfs</code> 函数是深度优先遍历函数，使用递归方式实现。</p><p>接受二维数组 <code>path</code> 表示棋盘，<code>m</code> 和<code>n</code> 表示当前位置的坐标，<code>edge</code>表示棋盘边长，<code>count</code> 表示已经访问的格子数。</p><p>函数首先判断是否已经访问了所有的格子，如果是则直接返回。</p><p>然后判断当前位置是否在棋盘范围内且未被访问过，如果是则增加已访问的格子数，将该位置标记为已访问，并进行递归调用，以便继续向下一位置探索。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//深度优先遍历（递归）</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Dfs</span><span class="params">(<span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge)<span class="comment">//如果走过的格子数大于等于棋盘数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (m &lt;= edge - <span class="number">1</span> &amp;&amp; n &lt;= edge - <span class="number">1</span> &amp;&amp; m &gt;= <span class="number">0</span> &amp;&amp; n &gt;= <span class="number">0</span> &amp;&amp; path[m][n] == <span class="number">0</span>)<span class="comment">//位置（m,n）在棋盘上，并且没有被走过</span></span><br><span class="line">&#123;</span><br><span class="line">count++;<span class="comment">//走过的格子数+1</span></span><br><span class="line">path[m][n] = count;<span class="comment">//把该位置的值改为第几个走过的格子</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">Dfs(path, m + move_x[i], n + move_y[i], edge, count);<span class="comment">//进行递归，直到走过的格子数大于等于棋盘数</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法2：<strong>DFS+贪心算法（递归）</strong></p><blockquote><p><code>Dfs_tx</code>函数在深度优先遍历的基础上加入了贪心算法的思想，使用递归方式实现。</p><p>根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，</p><p>并选择具有最小可行方向数量的方向作为下一步的移动方向。</p><p>最后进行递归调用，继续向下一个位置探索。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dfs_tx</span><span class="params">(<span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count, <span class="type">int</span> found)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (found)<span class="keyword">return</span>;<span class="comment">// 如果已经找到完整路径，直接返回</span></span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge)<span class="comment">// 如果已经访问了所有方格</span></span><br><span class="line">&#123;</span><br><span class="line">found += <span class="number">1</span>;<span class="comment">// 将found标志设置为1，表示已找到完整路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">path[i][j] = flag[i][j];<span class="comment">// 将当前路径复制到path数组中</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (m &gt; edge - <span class="number">1</span> || n &gt; edge - <span class="number">1</span> || m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || flag[m][n] != <span class="number">0</span>)<span class="keyword">return</span>;<span class="comment">// 如果当前位置超出边界或已被访问过，则返回</span></span><br><span class="line"></span><br><span class="line">count++;<span class="comment">// 增加计数器(初始为0)</span></span><br><span class="line">flag[m][n] = count;<span class="comment">// 标记当前位置为已访问</span></span><br><span class="line"><span class="comment">//贪心部分，计算局部（两步）最优方向</span></span><br><span class="line"><span class="type">int</span> count_next[<span class="number">8</span>] = &#123; <span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span> &#125;;<span class="comment">// 存储每个可行方向的下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_next = m + move_x[i];<span class="comment">// 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next = n + move_y[i];<span class="comment">// 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next &lt; edge &amp;&amp; n_next &lt; edge &amp;&amp; m_next &gt;= <span class="number">0</span> &amp;&amp; n_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next][n_next] == <span class="number">0</span>)<span class="comment">//下一步的位置，未被访问则</span></span><br><span class="line">&#123;</span><br><span class="line">count_next[i] ++;<span class="comment">// 增加下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> m_next_next = m_next + move_x[j];<span class="comment">// 下一步的 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next_next = n_next + move_y[j];<span class="comment">// 下一步的 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next_next &lt; edge &amp;&amp; n_next_next &lt; edge &amp;&amp; m_next_next &gt;= <span class="number">0</span> &amp;&amp; n_next_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next_next][n_next_next] == <span class="number">0</span>)<span class="comment">//下一步的下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++;<span class="comment">// 增加下一步可行方向的数量*</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> position = <span class="number">0</span>;<span class="comment">// 选择下一步的最优方向</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++)<span class="comment">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (count_next[position] == <span class="number">-1</span>)</span><br><span class="line">position = i;</span><br><span class="line"><span class="keyword">if</span> ((count_next[i] &lt; count_next[position]) &amp;&amp; count_next[i] != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">position = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Dfs_tx(flag, path, m + move_x[position], n + move_y[position], edge, count, found);</span><br><span class="line">flag[m][n] = <span class="number">0</span>;<span class="comment">// 标记当前位置为未访问，以便在下一次递归中重新考虑该位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方法3：<strong>DFS+贪心算法（非递归）</strong></p><blockquote><p><code>Dfs_tx_s</code>函数使用非递归方式实现的深度优先遍历算法，加入了贪心算法的思想。</p><p>该函数使用栈来保存待访问的位置，首先将起始位置入栈，然后进入一个循环，直到栈为空。</p><p>在循环中，取出栈顶的位置，判断是否已找到完整路径，如果是则直接返回。</p><p>然后判断当前位置是否超出边界或已被访问过，如果是则跳过当前位置。接下来增加已访问的格子数，并标记当前位置为已访问。</p><p>然后根据贪心算法的思想，计算每个可行方向的下一步可行方向的数量，并选择具有最小可行方向数量的方向作为下一步的移动方向，</p><p>将该位置入栈。最后继续下一轮循环，直到栈为空。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Dfs_tx_s</span><span class="params">(<span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>], <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> edge, <span class="type">int</span> count, <span class="type">int</span>* found)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*found)<span class="keyword">return</span>;<span class="comment">//// 如果已经找到完整路径，直接返回</span></span><br><span class="line"><span class="comment">//定义栈</span></span><br><span class="line"><span class="type">int</span> stack_m[<span class="number">8</span> * <span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> stack_n[<span class="number">8</span> * <span class="number">8</span>];</span><br><span class="line"><span class="type">int</span> top = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//将第一个元素入栈</span></span><br><span class="line">stack_m[top] = m;</span><br><span class="line">stack_n[top] = n;</span><br><span class="line">top++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//取出栈顶元素</span></span><br><span class="line">top--;</span><br><span class="line">m = stack_m[top];</span><br><span class="line">n = stack_n[top];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt;= edge * edge) &#123;<span class="comment">//如果已经访问了所有方格</span></span><br><span class="line">*found = <span class="number">1</span>;<span class="comment">// 将found标志设置为1，表示已找到完整路径</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">path[i][j] = flag[i][j];</span><br><span class="line">&#125;<span class="comment">// 将当前路径复制到path数组中</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (m &gt; edge - <span class="number">1</span> || n &gt; edge - <span class="number">1</span> || m &lt; <span class="number">0</span> || n &lt; <span class="number">0</span> || flag[m][n] != <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;<span class="comment">// 如果当前位置超出边界或已被访问过，则跳过</span></span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line">flag[m][n] = count;<span class="comment">//// 标记当前位置为已访问</span></span><br><span class="line"><span class="comment">//贪心，计算局部（两步）最优方向</span></span><br><span class="line"><span class="type">int</span> count_next[<span class="number">8</span>] = &#123; <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="type">int</span> m_next = m + move_x[i];<span class="comment">// 下一步的 x坐标</span></span><br><span class="line"><span class="type">int</span> n_next = n + move_y[i];<span class="comment">// 下一步的 y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next &lt; edge &amp;&amp; n_next &lt; edge &amp;&amp; m_next &gt;= <span class="number">0</span> &amp;&amp; n_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next][n_next] == <span class="number">0</span>) &#123;<span class="comment">//下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++;<span class="comment">// 增加下一步可行方向的数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++) &#123;</span><br><span class="line"><span class="type">int</span> m_next_next = m_next + move_x[j];<span class="comment">//下一步的 下一步的x坐标</span></span><br><span class="line"><span class="type">int</span> n_next_next = n_next + move_y[j];<span class="comment">//下一步的 下一步的y坐标</span></span><br><span class="line"><span class="keyword">if</span> (m_next_next &lt; edge &amp;&amp; n_next_next &lt; edge &amp;&amp; m_next_next &gt;= <span class="number">0</span> &amp;&amp; n_next_next &gt;= <span class="number">0</span> &amp;&amp; flag[m_next_next][n_next_next] == <span class="number">0</span>)<span class="comment">//下一步的下一步的位置，未被访问则</span></span><br><span class="line">count_next[i]++; <span class="comment">//增加下一步可行方向的数量*</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> position = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;<span class="comment">//遍历count_next数组，找到具有最小可行方向数量的方向，将其存储在position变量中。</span></span><br><span class="line"><span class="keyword">if</span> (count_next[position] == <span class="number">-1</span>)</span><br><span class="line">position = i;</span><br><span class="line"><span class="keyword">if</span> ((count_next[i] &lt; count_next[position]) &amp;&amp; count_next[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">position = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stack_m[top] = m + move_x[position];</span><br><span class="line">stack_n[top] = n + move_y[position];</span><br><span class="line">top++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数的调用：</strong></p><blockquote><p>定义了两个二维数组 <code>path</code> 和<code>flag</code>，分别用于记录最终路径和临时路径。</p><p>初始化变量 <code>m</code> 和 <code>n</code>，表示起始位置的坐标。,<code>edge</code>，表示棋盘的大小（边长）,<code>found</code>，表示完整路径的标志，初始值为0。</p><p>根据用户输入的序号，使用 <code>switch</code>语句选择相应的解决方法。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> path[<span class="number">8</span>][<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">// 记录最终路径</span></span><br><span class="line"><span class="type">int</span> flag[<span class="number">8</span>][<span class="number">8</span>] = &#123; <span class="number">0</span> &#125;;<span class="comment">// 记录临时路径</span></span><br><span class="line"><span class="type">int</span> m, n;</span><br><span class="line"><span class="type">int</span> edge;</span><br><span class="line"><span class="type">int</span> found = <span class="number">0</span>;<span class="comment">// 完整路径标志</span></span><br><span class="line"><span class="type">int</span> switch_on;</span><br><span class="line">m = <span class="number">1</span>;</span><br><span class="line">n = <span class="number">1</span>;</span><br><span class="line">edge = <span class="number">8</span>;<span class="comment">// 棋盘大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1:使用深度优先搜索（递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2:使用深度优先搜索+贪心算法（递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3:使用深度优先搜索+贪心算法（非递归）\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;4:退出\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入序号，以选择解决方法：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;switch_on);</span><br><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">Dfs(path, m, n, edge, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">Dfs_tx(flag, path, m, n, edge, <span class="number">0</span>, found);</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">Dfs_tx_s(flag, path, m, n, edge, <span class="number">0</span>, &amp;found);</span><br><span class="line"><span class="keyword">if</span> (found) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; edge; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%2d &quot;</span>, path[i][j]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;没有找到路径\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入正确的序号&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二迷宫问题">二、迷宫问题</h2><h4 id="问题描述-1">问题描述</h4><p>以一个M×N的长方阵表示迷宫，0和1分别表示迷宫中的通路和障碍。设计一个程序，对任意设定的迷宫，求出一条从入口到出口的通路，或得出没有通路的结论。</p><p>首先实现一个以链表作存储结构的栈类型，然后编写一个求解迷宫的递归和非递归程序。求得的通路以三元组（i，j，d）的形式输出，其中：（i，j）指示迷宫中的一个坐标，d表示走到下一坐标的方向。</p><h4 id="程序代码-1">程序代码</h4><p><strong>初始化迷宫</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 迷宫的行列数</span></span><br><span class="line"><span class="type">int</span> M = <span class="number">10</span>, N = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 迷宫数组初始化</span></span><br><span class="line">maze[<span class="number">10</span>][<span class="number">10</span>] = &#123;</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>&#125;,</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>定义栈的基本结构</strong></p><blockquote><p>StackNode 节点</p><p>Stack 栈</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈的节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> &#123;</span></span><br><span class="line"><span class="type">int</span> x, y, direction;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125; StackNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 栈结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">StackNode* top;</span><br><span class="line">&#125; Stack;</span><br></pre></td></tr></table></figure><p><strong>定义栈的基本方法</strong></p><blockquote><p>initStack ( ) 初始化栈</p><p>isStackEmpty ( ) 判断栈是否为空</p><p>push ( ) 入栈</p><p>pop ( ) 出栈</p><p>top（）获取栈顶元素</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 初始化栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">initStack</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断栈是否为空</span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">isStackEmpty</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">stack</span>-&gt;top == <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 入栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">push</span><span class="params">(Stack* <span class="built_in">stack</span>, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> direction)</span> &#123;</span><br><span class="line">StackNode* node = (StackNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(StackNode));</span><br><span class="line">node-&gt;x = x;</span><br><span class="line">node-&gt;y = y;</span><br><span class="line">node-&gt;direction = direction;</span><br><span class="line">node-&gt;next = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 出栈</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">pop</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">StackNode* node = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"><span class="built_in">stack</span>-&gt;top = node-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(node);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取栈顶元素</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">top</span><span class="params">(Stack* <span class="built_in">stack</span>, <span class="type">int</span>* x, <span class="type">int</span>* y, <span class="type">int</span>* direction)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">*x = <span class="built_in">stack</span>-&gt;top-&gt;x;</span><br><span class="line">*y = <span class="built_in">stack</span>-&gt;top-&gt;y;</span><br><span class="line">*direction = <span class="built_in">stack</span>-&gt;top-&gt;direction;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>检查坐标是否有效</strong></p><blockquote><p>(x,y)在棋盘上，并且标记为0</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; x &lt; M &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; N &amp;&amp; maze[x][y] == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>递归求解迷宫通路</strong></p><blockquote><p>首先检查当前坐标 <code>(x, y)</code>是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为0（通路）。</p><p>如果当前坐标无效，返回 false，表示没有通路。</p><p>将当前坐标 <code>(x, y)</code> 入栈，表示已访问该节点。</p><p>将迷宫数组中的值标记为 2，表示该节点已访问过。</p><p>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回true，表示找到了通路。</p><p>递归尝试四个方向：向右 <code>(x, y+1)</code>、向下<code>(x+1, y)</code>、向左 <code>(x, y-1)</code>、向上<code>(x-1, y)</code>。</p><p>如果其中任意方向返回 true，表示找到了通路，直接返回 true。</p><p>如果以上四个方向都没有找到通路，说明当前节点不在通路上，将其从栈中弹出并清除标记。</p><p>返回 false，表示没有找到通路。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">solveMazeRecursive</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!isValid(x, y)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">push(<span class="built_in">stack</span>, x, y, <span class="number">-1</span>); <span class="comment">// 入栈，初始方向为-1</span></span><br><span class="line"></span><br><span class="line">maze[x][y] = <span class="number">2</span>; <span class="comment">// 标记已访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == M - <span class="number">1</span> &amp;&amp; y == N - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 到达出口</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> direction; <span class="comment">// 添加direction变量</span></span><br><span class="line"><span class="comment">// 尝试四个方向</span></span><br><span class="line"><span class="keyword">if</span> ((direction = <span class="number">0</span>, solveMazeRecursive(x, y + <span class="number">1</span>, <span class="built_in">stack</span>)) || <span class="comment">// 向右</span></span><br><span class="line">(direction = <span class="number">1</span>, solveMazeRecursive(x + <span class="number">1</span>, y, <span class="built_in">stack</span>)) || <span class="comment">// 向下</span></span><br><span class="line">(direction = <span class="number">2</span>, solveMazeRecursive(x, y - <span class="number">1</span>, <span class="built_in">stack</span>)) || <span class="comment">// 向左</span></span><br><span class="line">(direction = <span class="number">3</span>, solveMazeRecursive(x - <span class="number">1</span>, y, <span class="built_in">stack</span>))) &#123; <span class="comment">// 向上</span></span><br><span class="line">push(<span class="built_in">stack</span>, x, y, direction); <span class="comment">// 入栈，保存方向</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">pop(<span class="built_in">stack</span>); <span class="comment">// 从栈中移除</span></span><br><span class="line">maze[x][y] = <span class="number">0</span>; <span class="comment">// 清除标记</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>非递归求解迷宫通路</strong></p><blockquote><ol type="1"><li>初始化当前坐标 <code>(x, y)</code> 为起点<code>(0, 0)</code>，并将初始方向 <code>direction</code> 设为 0。</li><li>进入一个循环，直到找到通路或确定没有通路。</li><li>检查当前坐标 <code>(x, y)</code>是否为有效的路径节点，即判断是否在迷宫范围内且对应的迷宫数组值为0（通路）。</li><li>如果当前坐标有效，将其入栈，表示已访问该节点。将迷宫数组中的值标记为2，表示该节点已访问过。</li><li>如果当前坐标是迷宫的出口 <code>(M-1, N-1)</code>，则返回true，表示找到了通路。</li><li>设置方向 <code>direction</code> 为 0，表示方向。</li><li>更新坐标 <code>(x, y)</code> 为下一个节点，根据方向<code>direction</code> 的不同进行相应的移动操作。</li><li><strong>如果方向小于3，表示还有方向未尝试</strong>，递增方向并继续进行下一次循环。</li><li><strong>如果方向大于等于3，表示四个方向都尝试过</strong>，说明当前节点不在通路上。</li><li>检查栈是否为空，如果为空，表示已经回到起点且没有找到通路，返回false。</li><li>从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</li><li>根据方向进行相应的坐标更新操作。</li><li>回到步骤 3，继续进行下一次循环。</li></ol></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="title function_">solveMazeIterative</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, direction = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (isValid(x, y)) &#123;</span><br><span class="line">push(<span class="built_in">stack</span>, x, y, direction); <span class="comment">// 入栈</span></span><br><span class="line">maze[x][y] = <span class="number">2</span>; <span class="comment">// 标记已访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (x == M - <span class="number">1</span> &amp;&amp; y == N - <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 到达出口</span></span><br><span class="line">&#125;</span><br><span class="line">direction = <span class="number">0</span>;</span><br><span class="line">y++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (direction &lt; <span class="number">3</span>) &#123;<span class="comment">//如果方向小于 3，表示还有方向未尝试，递增方向并继续进行下一次循环。</span></span><br><span class="line">direction++;</span><br><span class="line"><span class="keyword">switch</span> (direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 向右</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 向下</span></span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 向左</span></span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (isStackEmpty(<span class="built_in">stack</span>)) &#123;<span class="comment">//如果方向大于等于 3，表示四个方向都尝试过，说明当前节点不在通路上。</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 无通路</span></span><br><span class="line">&#125;</span><br><span class="line">top(<span class="built_in">stack</span>, &amp;x, &amp;y, &amp;direction);<span class="comment">//从栈顶获取上一个节点的坐标和方向，将其作为当前节点继续进行下一次循环。</span></span><br><span class="line">pop(<span class="built_in">stack</span>); <span class="comment">// 从栈中移除</span></span><br><span class="line"><span class="keyword">switch</span> (direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>: <span class="comment">// 向上</span></span><br><span class="line">y++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// 向右</span></span><br><span class="line">x++;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// 向下</span></span><br><span class="line">y--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// 向左</span></span><br><span class="line">x--;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>打印迷宫和通路</strong></p><blockquote><p>□ 表示通路</p><p>■ 表示障碍</p><p>★ 表示通路上的路径</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printMaze</span><span class="params">(Stack* <span class="built_in">stack</span>)</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫及通路：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; M; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; N; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (maze[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;□ &quot;</span>); <span class="comment">// 通路</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;■ &quot;</span>); <span class="comment">// 障碍</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (maze[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;★ &quot;</span>); <span class="comment">// 通路上的路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n通路：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">StackNode* node = <span class="built_in">stack</span>-&gt;top;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (node != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (node-&gt;direction) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, E)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, S)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, W)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;(%d, %d, N)\n&quot;</span>, node-&gt;x + <span class="number">1</span>, node-&gt;y + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">node = node-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数的调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Stack <span class="built_in">stack</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1:递归求解迷宫通路\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2:非递归求解迷宫通路\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3:不走迷宫了\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> switch_on = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;输入序号：&quot;</span>);</span><br><span class="line">scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;switch_on);</span><br><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="comment">// 使用递归求解迷宫通路</span></span><br><span class="line">initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line"><span class="keyword">if</span> (solveMazeRecursive(<span class="number">0</span>, <span class="number">0</span>, &amp;<span class="built_in">stack</span>)) &#123;</span><br><span class="line">printMaze(&amp;<span class="built_in">stack</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫没有通路。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">initStack(&amp;<span class="built_in">stack</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用非递归求解迷宫通路</span></span><br><span class="line"><span class="keyword">if</span> (solveMazeIterative(&amp;<span class="built_in">stack</span>)) &#123;</span><br><span class="line">printMaze(&amp;<span class="built_in">stack</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;迷宫没有通路。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:<span class="built_in">printf</span>(<span class="string">&quot;请输入正确的序号&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找算法比较">查找算法比较</h2><h4 id="问题描述-2">问题描述</h4><ol type="1"><li><p>对以下6种常用的内部排序算法进行比较：顺序查找，折半查找，分块查找，插值查找，斐波那契查找，二叉树查找。</p></li><li><p>待查找表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-2">程序代码</h4><p><strong>顺序查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sequentialSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>折半查找（二分查找）</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="type">int</span> mid = (low + high) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[mid] &lt; key) &#123;</span><br><span class="line">            low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            high = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分块查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">blockSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> blockSizes[], <span class="type">int</span> blockNum, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i, j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; blockNum; i++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (blockSizes[i] &gt;= key) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> comparisons;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> blockSize = <span class="number">20</span>;</span><br><span class="line">    <span class="type">int</span> start = i * blockSize - blockSize;</span><br><span class="line">    <span class="type">int</span> end = i * blockSize;</span><br><span class="line">    <span class="keyword">for</span> (j = start; j &lt; end; j++) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (arr[j] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插值查找</strong></p><blockquote><p>改进的二分查找算法，它通过对数组进行估算，试图根据查找键的值在数组中的分布情况来预测该键可能出现的位置。公式<code>int pos = low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low])</code>用于计算估算的位置。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">interSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> low = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> high = size - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (low &lt;= high &amp;&amp; key &gt;= arr[low] &amp;&amp; key &lt;= arr[high]) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[low] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> comparisons;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> pos = low + ((key - arr[low]) * (high - low)) / (arr[high] - arr[low]);</span><br><span class="line">        <span class="keyword">if</span> (arr[pos] == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (arr[pos] &lt; key) &#123;</span><br><span class="line">            low = pos + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            high = pos - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>斐波那契查找</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">fibonacciSearch</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;  <span class="comment">// 记录比较次数的变量</span></span><br><span class="line">    <span class="type">int</span> fib2 = <span class="number">0</span>;  <span class="comment">// 第一个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> fib1 = <span class="number">1</span>;  <span class="comment">// 第二个斐波那契数</span></span><br><span class="line">    <span class="type">int</span> fib = fib1 + fib2;  <span class="comment">// 当前斐波那契数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到大于等于数组大小的最小斐波那契数</span></span><br><span class="line">    <span class="keyword">while</span> (fib &lt; size) &#123;</span><br><span class="line">        fib2 = fib1;</span><br><span class="line">        fib1 = fib;</span><br><span class="line">        fib = fib1 + fib2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//用于确定待查找数组的起始位置，它随着迭代的进行不断更新，以便逼近目标元素的位置</span></span><br><span class="line">    <span class="type">int</span> offset = <span class="number">-1</span>;  <span class="comment">// 用于索引的偏移值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行斐波那契查找</span></span><br><span class="line">    <span class="keyword">while</span> (fib &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line">        <span class="type">int</span> i = (offset + fib2) &lt; (size - <span class="number">1</span>) ? (offset + fib2) : (size - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (arr[i] &lt; key) &#123;</span><br><span class="line">            <span class="comment">// 关键字比当前元素大，向下移动斐波那契数</span></span><br><span class="line">            fib = fib1;</span><br><span class="line">            fib1 = fib2;</span><br><span class="line">            fib2 = fib - fib1;</span><br><span class="line">            offset = i;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; key) &#123;</span><br><span class="line">            <span class="comment">// 关键字比当前元素小，进一步向下移动斐波那契数</span></span><br><span class="line">            fib = fib2;</span><br><span class="line">            fib1 = fib1 - fib2;</span><br><span class="line">            fib2 = fib - fib1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 关键字在索引 i 处找到</span></span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查数组中最后一个元素（fib1 == 1）</span></span><br><span class="line">    <span class="keyword">if</span> (fib1 == <span class="number">1</span> &amp;&amp; arr[offset + <span class="number">1</span>] == key) &#123;</span><br><span class="line">        <span class="keyword">return</span> comparisons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 未在数组中找到关键字</span></span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>二叉树查找节点</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二叉树节点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">TreeNode</span>* <span class="title">right</span>;</span></span><br><span class="line">&#125; TreeNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二叉树节点</span></span><br><span class="line">TreeNode* <span class="title function_">createNode</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">    TreeNode* node = (TreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TreeNode));</span><br><span class="line">    node-&gt;value = value;</span><br><span class="line">    node-&gt;left = <span class="literal">NULL</span>;</span><br><span class="line">    node-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树插入节点</span></span><br><span class="line">TreeNode* <span class="title function_">insertNode</span><span class="params">(TreeNode* root, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> createNode(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; root-&gt;value) &#123;</span><br><span class="line">        root-&gt;left = insertNode(root-&gt;left, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (value &gt; root-&gt;value) &#123;</span><br><span class="line">        root-&gt;right = insertNode(root-&gt;right, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 二叉树查找节点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">searchNode</span><span class="params">(TreeNode* root, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> comparisons = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        comparisons++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (root-&gt;value == key) &#123;</span><br><span class="line">            <span class="keyword">return</span> comparisons;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; root-&gt;value) &#123;</span><br><span class="line">            root = root-&gt;left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            root = root-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> comparisons;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>生成顺序数据集</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">getSequen</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        arr[i] = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数调用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 生成顺序数据集</span></span><br><span class="line">    <span class="type">int</span> dataset[<span class="number">200</span>];</span><br><span class="line">    getSequen(dataset, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 统计每种算法的比较次数</span></span><br><span class="line">    <span class="type">int</span> seqComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> binComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> blockComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> inteComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> fibComp = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> binTreeComp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行10次随机数的查找</span></span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="type">int</span> key = rand() % <span class="number">200</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 顺序查找</span></span><br><span class="line">        <span class="type">int</span> comparisons = sequentialSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        seqComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 折半查找</span></span><br><span class="line">        comparisons = binarySearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        binComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分块查找</span></span><br><span class="line">        <span class="type">int</span> blockSizes[<span class="number">10</span>] = &#123; <span class="number">20</span>, <span class="number">40</span>, <span class="number">60</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">120</span>, <span class="number">140</span>, <span class="number">160</span>, <span class="number">180</span>, <span class="number">200</span> &#125;;</span><br><span class="line">        comparisons = blockSearch(dataset, blockSizes, <span class="number">10</span>, key);</span><br><span class="line">        blockComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 插值查找</span></span><br><span class="line">        comparisons = interSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        inteComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 斐波那契查找</span></span><br><span class="line">        comparisons = fibonacciSearch(dataset, <span class="number">200</span>, key);</span><br><span class="line">        fibComp += comparisons;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二叉树查找</span></span><br><span class="line">        TreeNode* root = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">200</span>; j++) &#123;</span><br><span class="line">            root = insertNode(root, dataset[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        comparisons = searchNode(root, key);</span><br><span class="line">        binTreeComp += comparisons;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算平均比较次数</span></span><br><span class="line">    <span class="type">float</span> avgSequential = seqComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBinary = binComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBlock = blockComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgInterpolation = inteComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgFibonacci = fibComp / <span class="number">10.0</span>;</span><br><span class="line">    <span class="type">float</span> avgBinaryTree = binTreeComp / <span class="number">10.0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印结果</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;顺序查找平均比较次数：%.2f\n&quot;</span>, avgSequential);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;折半查找平均比较次数：%.2f\n&quot;</span>, avgBinary);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;分块查找平均比较次数：%.2f\n&quot;</span>, avgBlock);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;插值查找平均比较次数：%.2f\n&quot;</span>, avgInterpolation);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;斐波那契查找平均比较次数：%.2f\n&quot;</span>, avgFibonacci);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;二叉树查找平均比较次数：%.2f\n&quot;</span>, avgBinaryTree);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内部排序算法比较">内部排序算法比较</h2><h4 id="问题描述-3">问题描述</h4><ol type="1"><li><p>对以下6种常用的内部排序算法进行比较：冒泡排序，直接插入排序，简单选择排序，快速排序，希尔排序，堆排序。</p></li><li><p>待排序表的表长不小于100；其中的数据要用伪随机数产生程序产生；至少要用5组不同的输入数据作比较；比较的指标为有关关键字参加的比较次数和关键字的移动次数（关键字交换计为3次移动）。</p></li><li><p>最后要对结果作出简单分析，包括对各组数据得出结果波动大小的解释。</p></li></ol><h4 id="程序代码-3">程序代码</h4><p><strong>冒泡排序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">bubbleSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; n - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[j];</span><br><span class="line">arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>直接插入排序</strong></p><blockquote><p>待排序的数组分为已排序和未排序两部分。初始时，将数组的第一个元素视为已排序部分，其余元素为未排序部分。然后，依次从未排序部分取出一个元素，插入到已排序部分的正确位置，使得已排序部分仍然保持有序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">insertionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> key = arr[i]; <span class="comment">// 当前要插入的元素</span></span><br><span class="line">j = i - <span class="number">1</span>; <span class="comment">// 从当前元素的前一个元素开始比较</span></span><br><span class="line">(*moves)++;</span><br><span class="line"><span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; arr[j] &gt; key) &#123;</span><br><span class="line">arr[j + <span class="number">1</span>] = arr[j]; <span class="comment">// 将大于当前元素的元素后移</span></span><br><span class="line">j = j - <span class="number">1</span>; <span class="comment">// 继续向前比较</span></span><br><span class="line">(*comparisons)++;</span><br><span class="line">(*moves) += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">arr[j + <span class="number">1</span>] = key; <span class="comment">// 插入当前元素到正确的位置</span></span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>简单选择排序</strong></p><blockquote><p>算法每次从未排序的部分选择最小的元素，并将其放到已排序部分的末尾。</p><p><code>i</code> 控制已排序部分的末尾位置，初始值为 0。min_idx存储未排序部分的最小元素的索引。</p><p>内层循环从 <code>i+1</code>开始遍历未排序部分，找到最小元素的索引。</p><p>如果当前元素比已记录的最小元素小，则更新最小元素的索引。比较过程中。</p><p>外层循环中，将找到的最小元素与已排序部分的末尾元素进行交换。。这样每一次外层循环都会将未排序部分的最小元素放到已排序部分的末尾。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">selectionSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j, min_idx;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">min_idx = i; <span class="comment">// 假设当前位置为最小值的索引</span></span><br><span class="line"><span class="keyword">for</span> (j = i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; arr[min_idx]) &#123;</span><br><span class="line">min_idx = j; <span class="comment">// 更新最小值的索引</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> temp = arr[min_idx];</span><br><span class="line">arr[min_idx] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>; <span class="comment">// 交换最小值和当前位置的元素，并增加移动计数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>快速排序</strong></p><blockquote><p>基于分治的思想，通过将<strong>数组分割为较小的子数组，然后递归地对子数组进行排序</strong>，最终将整个数组排序完成。</p><ol type="1"><li>选择一个基准元素（pivot），通常可以选择数组的最后一个元素作为基准。</li><li>设置两个指针 <code>i</code> 和<code>j</code>，初始时分别指向数组的第一个元素和最后一个元素。</li><li>从左边开始，找到第一个大于等于基准元素的元素，记为<code>arr[i]</code>。从右边开始，找到第一个小于等于基准元素的元素，记为<code>arr[j]</code>。</li><li>如果 <code>i</code> 小于 <code>j</code>，交换 <code>arr[i]</code> 和<code>arr[j]</code>。</li><li>重复步骤 3 和步骤 4，直到 <code>i</code> 不再小于<code>j</code>。</li><li>将基准元素 <code>arr[high]</code>（初始选择的最后一个元素）与<code>arr[i]</code>（当前 <code>i</code>指向的元素）交换位置，将基准元素放置在最终的位置上。</li><li>现在，基准元素左边的元素都小于它，右边的元素都大于它。</li><li>递归地对基准元素左边的子数组（<code>arr[low]</code> 到<code>arr[i-1]</code>）和右边的子数组（<code>arr[i+1]</code> 到<code>arr[high]</code>）进行快速排序。</li><li>重复上述步骤，直到每个子数组的大小为 1 或者为空。</li></ol><p>快速排序的核心操作是分区（partition）和递归排序。分区操作根据基准元素将数组划分为两个部分，其中一部分的元素都小于基准元素，另一部分的元素都大于基准元素。递归排序对分区后的子数组进行递归调用，直到数组被完全排序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">partition</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> pivot = arr[high]; <span class="comment">// 选择最后一个元素作为基准值</span></span><br><span class="line"><span class="type">int</span> i = low - <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="keyword">for</span> (j = low; j &lt;= high - <span class="number">1</span>; j++) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[j] &lt; pivot) &#123;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">// 交换 arr[i] 和 arr[j]</span></span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[j];</span><br><span class="line">arr[j] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将基准值放置到正确的位置</span></span><br><span class="line"><span class="type">int</span> temp = arr[i + <span class="number">1</span>];</span><br><span class="line">arr[i + <span class="number">1</span>] = arr[high];</span><br><span class="line">arr[high] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line"><span class="keyword">return</span> (i + <span class="number">1</span>); <span class="comment">// 返回基准值的索引</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速排序算法</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> low, <span class="type">int</span> high, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (low &lt; high) &#123;</span><br><span class="line"><span class="comment">// 找到基准值的索引</span></span><br><span class="line"><span class="type">int</span> pivot = partition(arr, low, high, comparisons, moves);</span><br><span class="line"><span class="comment">// 递归地对基准元素左边的子数组进行排序</span></span><br><span class="line">quickSort(arr, low, pivot - <span class="number">1</span>, comparisons, moves);</span><br><span class="line"><span class="comment">// 递归地对基准元素右边的子数组进行排序</span></span><br><span class="line">quickSort(arr, pivot + <span class="number">1</span>, high, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>希尔排序</strong></p><blockquote><p>是插入排序的一种改进算法，通过将待排序的数组按一定间隔分组，<strong>对每个分组进行插入排序</strong>，然后逐渐缩小间隔，最终完成整个数组的排序。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shellSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> gap, i, j;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用希尔增量，初始间隔为数组长度的一半，逐渐缩小间隔</span></span><br><span class="line"><span class="keyword">for</span> (gap = n / <span class="number">2</span>; gap &gt; <span class="number">0</span>; gap /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="comment">// 对每个分组进行插入排序</span></span><br><span class="line"><span class="keyword">for</span> (i = gap; i &lt; n; i++) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在当前分组内进行插入排序</span></span><br><span class="line"><span class="keyword">for</span> (j = i; j &gt;= gap &amp;&amp; arr[j - gap] &gt; temp; j -= gap) &#123;</span><br><span class="line">arr[j] = arr[j - gap];</span><br><span class="line">(*comparisons)++;</span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr[j] = temp;</span><br><span class="line">(*moves)++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>堆排序</strong></p><blockquote><p>堆排序通过构建最大堆和逐步调整堆实现排序</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">heapify</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span> i, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> largest = i;</span><br><span class="line"><span class="type">int</span> l = <span class="number">2</span> * i + <span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> r = <span class="number">2</span> * i + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较左子节点和根节点的值，找出较大的节点</span></span><br><span class="line"><span class="keyword">if</span> (l &lt; n) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[l] &gt; arr[largest]) &#123;</span><br><span class="line">largest = l;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较右子节点和当前最大节点的值，找出最大的节点</span></span><br><span class="line"><span class="keyword">if</span> (r &lt; n) &#123;</span><br><span class="line">(*comparisons)++;</span><br><span class="line"><span class="keyword">if</span> (arr[r] &gt; arr[largest]) &#123;</span><br><span class="line">largest = r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果最大节点不是当前节点，进行交换并继续调整子树</span></span><br><span class="line"><span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[i];</span><br><span class="line">arr[i] = arr[largest];</span><br><span class="line">arr[largest] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">heapify(arr, n, largest, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">heapSort</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> n, <span class="type">int</span>* comparisons, <span class="type">int</span>* moves)</span> &#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构建初始最大堆</span></span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">heapify(arr, n, i, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逐步将最大元素移到数组末尾并调整堆</span></span><br><span class="line"><span class="keyword">for</span> (i = n - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="type">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">arr[<span class="number">0</span>] = arr[i];</span><br><span class="line">arr[i] = temp;</span><br><span class="line">(*moves) += <span class="number">3</span>;</span><br><span class="line">heapify(arr, i, <span class="number">0</span>, comparisons, moves);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生成不同的随机数</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成大体上升序的随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getAscRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">arr[<span class="number">0</span>] = rand() % <span class="number">100</span>; <span class="comment">// 随机生成第一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> range = rand() % <span class="number">10</span> + <span class="number">1</span>; <span class="comment">// 生成随机的增加范围</span></span><br><span class="line"><span class="keyword">if</span> (rand() % <span class="number">10</span> &lt; <span class="number">3</span>) &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] - range; <span class="comment">// 基于前一个数减少范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] + range; <span class="comment">// 基于前一个数增加范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 生成大体上降序的随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getDescRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line">arr[<span class="number">0</span>] = rand() % <span class="number">100</span>; <span class="comment">// 随机生成第一个数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line"><span class="type">int</span> range = rand() % <span class="number">10</span> + <span class="number">1</span>; <span class="comment">// 生成随机的增加范围</span></span><br><span class="line"><span class="keyword">if</span> (rand() % <span class="number">10</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] - range; <span class="comment">// 基于前一个数减少范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">arr[i] = arr[i - <span class="number">1</span>] + range; <span class="comment">// 基于前一个数增加范围得到当前数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成随机数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getRandom</span><span class="params">(<span class="type">int</span> arr[], <span class="type">int</span> size)</span> &#123;</span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">arr[i] = rand() % <span class="number">500</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>针对不同的随机数编写不同的比较次数和关键字的移动次数的统计方法</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">comp_Random</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons/<span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves/<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_Random</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span><span class="comment">//因为快速排序的参数传输和其他函数不同，额外编写的。</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>,<span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_AscRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getAscRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_AscRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getAscRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>, <span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_DescRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">200</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">comp_q_DescRandom</span><span class="params">(<span class="type">void</span>(*searchFunction)())</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> input_data[<span class="number">200</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="type">int</span> comparisons, moves;</span><br><span class="line">comparisons = <span class="number">0</span>; moves = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">getRandom(input_data, <span class="number">200</span>);</span><br><span class="line">searchFunction(input_data, <span class="number">0</span>, <span class="number">199</span>, &amp;comparisons, &amp;moves);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;比较次数: %d\n&quot;</span>, comparisons / <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;移动次数: %d\n\n&quot;</span>, moves / <span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>主函数实现</strong></p><blockquote><p>主要为程序的调用</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为随机数据：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_Random(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_Random(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_Random(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_Random(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_Random(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_Random(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为大体上升序的随机数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_AscRandom(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_AscRandom(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;数据集为大体上降序的随机数：\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;冒泡排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(bubbleSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;直接插入排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(insertionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;简单选择排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(selectionSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;快速排序:\n&quot;</span>);</span><br><span class="line">comp_q_DescRandom(quickSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;希尔排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(shellSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;堆排序:\n&quot;</span>);</span><br><span class="line">comp_DescRandom(heapSort);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在数据集大小为200的情况下：</strong></p><ol type="1"><li>冒泡排序（Bubble Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于小规模数据排序</strong></li><li>比较次数：最好情况为0，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>直接插入排序（Insertion Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：稳定</li><li><strong>适用于基本有序的数据排序</strong></li><li>比较次数：最好情况为199，最坏情况为19900</li><li>移动次数：最好情况为199，最坏情况为59700</li></ul></li><li>简单选择排序（Selection Sort）：<ul><li>平均时间复杂度：O(n^2)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于数据量较小的排序</strong></li><li>比较次数：最好情况为19900，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>快速排序（Quick Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(n^2)</li><li>空间复杂度：O(logn)~O(n)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1526，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>平均时间复杂度：取决于增量序列的选择</li><li>最坏时间复杂度：取决于增量序列的选择</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于中等规模数据排序</strong></li><li>比较次数：最好情况为1247，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li><li>堆排序（Heap Sort）：<ul><li>平均时间复杂度：O(nlogn)</li><li>最坏时间复杂度：O(nlogn)</li><li>空间复杂度：O(1)</li><li>稳定性：不稳定</li><li><strong>适用于大规模数据排序</strong></li><li>比较次数：最好情况为1296，最坏情况为19900</li><li>移动次数：最好情况为0，最坏情况为59700</li></ul></li></ol><p><strong>不同数据集的影响</strong></p><ol type="1"><li>冒泡排序（Bubble Sort）：<ul><li>随机数据：由于每次比较只交换相邻元素，随机数据的冒泡排序性能较差，需要较多的比较和交换操作，波动较大。</li><li>大体上升序的随机数：冒泡排序在大体上升序的随机数上性能较好，因为大部分元素已经有序，只需要少量的比较和交换操作，波动较小。</li><li>大体下降序的随机数：冒泡排序在大体下降序的随机数上性能较差，需要较多的比较和交换操作来逆转递减序列，波动较大。</li></ul></li><li>插入排序（Insertion Sort）：<ul><li>随机数据：插入排序在随机数据上的性能较好，因为每个元素都与前面有序的部分进行比较，插入到正确的位置，波动较小。</li><li>大体上升序的随机数：插入排序在大体上升序的随机数上性能较好，只需要少量的比较操作就可以找到正确位置，波动较小。</li><li>大体下降序的随机数：插入排序在大体下降序的随机数上性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>快速排序（Quick Sort）：<ul><li>随机数据：快速排序在随机数据上的性能通常较好，它通过选择一个基准值并分区来排序，波动较小。</li><li>大体上升序的随机数：快速排序在大体上升序的随机数上的性能可能会略好一些，因为它能快速划分已经有序的部分，波动较小。</li><li>大体下降序的随机数：快速排序在大体下降序的随机数上的性能较差，需要较多的比较和划分操作，波动较大。</li></ul></li><li>希尔排序（Shell Sort）：<ul><li>随机数据：希尔排序在随机数据上的性能通常较好，它通过将数组分成多个子序列进行插入排序，逐渐缩小子序列的间隔，最终完成排序，波动较小。</li><li>大体上升序的随机数：希尔排序在大体上升序的随机数上的性能较好，由于大部分元素已经有序，插入排序的次数会减少，波动较小。</li><li>大体下降序的随机数：希尔排序在大体下降序的随机数上的性能较差，需要较多的比较和移动操作来逆转递减序列，波动较大。</li></ul></li><li>堆排序（Heap Sort）：<ul><li>随机数据：堆排序在随机数据上的性能通常较好，它通过构建最大堆（或最小堆）来进行排序，具有较好的稳定性和较少的波动。</li><li>大体上升序的随机数：堆排序在大体上升序的随机数上的性能较好，最大堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li><li>大体下降序的随机数：堆排序在大体下降序的随机数上的性能较好，最小堆的构建过程较快，而排序过程中的比较和交换操作相对较少，波动较小。</li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;实习内容&quot;&gt;实习内容&lt;/h1&gt;
&lt;h2 id=&quot;一马踏棋盘&quot;&gt;一、马踏棋盘&lt;/h2&gt;
&lt;h4 id=&quot;问题描述&quot;&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;将马随机放在国际象棋的8×8棋盘[0～7][0～7]的某个方格中，马按走棋规则进行移</summary>
      
    
    
    
    <category term="课程" scheme="https://youyouhangyong.github.io/categories/%E8%AF%BE%E7%A8%8B/"/>
    
    
    <category term="数据结构" scheme="https://youyouhangyong.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
